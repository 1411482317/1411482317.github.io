<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vmware桥接无法连接网络</title>
    <url>/2020/01/13/vmware%E6%A1%A5%E6%8E%A5%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<img src="/2020/01/13/vmware桥接无法连接网络/fm.gif">

<a id="more"></a>

<p>在vmware界面，左上角<code>编辑</code> - &gt; <code>虚拟网络编辑器</code></p>
<p><img src="1.png" alt></p>
<p><img src="2.png" alt></p>
<blockquote>
<p>选择一个网络可以的设备即可 （上图是我wifi设备的名称）</p>
</blockquote>
]]></content>
      <tags>
        <tag>vmware</tag>
      </tags>
  </entry>
  <entry>
    <title>C段错误(Segmentation fault)</title>
    <url>/2020/01/13/C%E6%AE%B5%E9%94%99%E8%AF%AF-Segmentation-fault/</url>
    <content><![CDATA[<img src="/2020/01/13/C段错误-Segmentation-fault/fm.jpg">

<p>基于centos8,gcc8.2的错误</p>
<p>段错误应该就是访问了不可访问的内存，这个内存区要么是不存在的，要么是受到系统保护的。</p>
<a id="more"></a>

<p>vs_code错误图<br><img src="error.png" alt></p>
<p>GDB单步错误图<br><img src="gdb_error.png" alt></p>
<p>段错误代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void function_8_8(void)&#123;</span><br><span class="line">    printf(&quot;1.+\t2.-\t3.*\t4./\t5.exit\n&quot;);</span><br><span class="line">    short num;</span><br><span class="line">    float n1,n2;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;num);</span><br><span class="line">    if(num == 1)&#123;</span><br><span class="line">        printf(&quot;输入数字1\n&quot;);</span><br><span class="line">        scanf(&quot;%f&quot;, &amp;n1);</span><br><span class="line">        printf(&quot;输入数字2\n&quot;);</span><br><span class="line">        scanf(&quot;%f&quot;, &amp;n2);</span><br><span class="line">        printf(&quot;%f + %f = %f\n&quot;, n1, n2, n1+n2);</span><br><span class="line">    &#125; else if (num == 2)&#123;</span><br><span class="line">        printf(&quot;输入数字1\n&quot;);</span><br><span class="line">        scanf(&quot;%f&quot;, &amp;n1);</span><br><span class="line">        printf(&quot;输入数字2\n&quot;);</span><br><span class="line">        scanf(&quot;%f&quot;, &amp;n2);</span><br><span class="line">        printf(&quot;%f - %f = %f\n&quot;, n1, n2, n1-n2);</span><br><span class="line">    &#125; else if (num == 3)&#123;</span><br><span class="line">        printf(&quot;输入数字1\n&quot;);</span><br><span class="line">        scanf(&quot;%f&quot;, &amp;n1);</span><br><span class="line">        printf(&quot;输入数字2\n&quot;);</span><br><span class="line">        scanf(&quot;%f&quot;, &amp;n2);</span><br><span class="line">        printf(&quot;%f * %f = %f\n&quot;, n1, n2, n1*n2);</span><br><span class="line">    &#125; else if (num == 4)&#123;</span><br><span class="line">        printf(&quot;输入数字1\n&quot;);</span><br><span class="line">        scanf(&quot;%f&quot;, &amp;n1);</span><br><span class="line">        printf(&quot;输入数字2\n&quot;);</span><br><span class="line">        scanf(&quot;%f&quot;, &amp;n2);</span><br><span class="line">        printf(&quot;%f / %f = %f\n&quot;, n1, n2, n1/n2);</span><br><span class="line">    &#125; else if(num == 5)&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        printf(&quot;input error\n&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<blockquote>
<p>在创建变量之前，先初始化变量，在scanf的结束的时候，判输入的变量程是否为我们的初始值。<br>如果是的话，说明我们的scanf并没有成功，用printf查看scanf的返回值，查看是否有错误信息</p>
</blockquote>
<p>我将上列代码该成如下，并进行测试</p>
<ol>
<li><p>只是为变量添加了初始值</p>
</li>
<li><p>查看scanf的返回值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void function_8_8(void)&#123;</span><br><span class="line">    printf(&quot;1.+\t2.-\t3.*\t4./\t5.exit\n&quot;);</span><br><span class="line">    short num = 0; // 使用前初始化</span><br><span class="line">    float n1 = 0.0,n2 = 0.0; // 使用前初始化</span><br><span class="line">    int t1 = 0,t2 = 0, t3 = 0; // 测试scanf返回值</span><br><span class="line">    t1 = scanf(&quot;%d&quot;, &amp;num);</span><br><span class="line">    printf(&quot;t1 = %d\n&quot;, t1);</span><br><span class="line">    if(num == 1)&#123;</span><br><span class="line">        printf(&quot;输入数字1\n&quot;);</span><br><span class="line">        t2 = scanf(&quot;%f&quot;, &amp;n1);</span><br><span class="line">        printf(&quot;t2 = %d\n&quot;, t2);</span><br><span class="line">        printf(&quot;输入数字2\n&quot;);</span><br><span class="line">        t3 = scanf(&quot;%f&quot;, &amp;n2);</span><br><span class="line">        printf(&quot;t3 = %d\n&quot;, t3);</span><br><span class="line">        printf(&quot;%f + %f = %f\n&quot;, n1, n2, n1+n2);</span><br><span class="line">    &#125; else if (num == 2)&#123;</span><br><span class="line">        printf(&quot;输入数字1\n&quot;);</span><br><span class="line">        t2 = scanf(&quot;%f&quot;, &amp;n1);</span><br><span class="line">        printf(&quot;t2 = %d\n&quot;, t2);</span><br><span class="line">        printf(&quot;输入数字2\n&quot;);</span><br><span class="line">        t3 = scanf(&quot;%f&quot;, &amp;n2);</span><br><span class="line">        printf(&quot;t3 = %d\n&quot;, t3);</span><br><span class="line">        printf(&quot;%f - %f = %f\n&quot;, n1, n2, n1-n2);</span><br><span class="line">    &#125; else if (num == 3)&#123;</span><br><span class="line">        printf(&quot;输入数字1\n&quot;);</span><br><span class="line">        t2 = scanf(&quot;%f&quot;, &amp;n1);</span><br><span class="line">        printf(&quot;t2 = %d\n&quot;, t2);</span><br><span class="line">        printf(&quot;输入数字2\n&quot;);</span><br><span class="line">        t3 = scanf(&quot;%f&quot;, &amp;n2);</span><br><span class="line">        printf(&quot;t3 = %d\n&quot;, t3);</span><br><span class="line">        printf(&quot;%f * %f = %f\n&quot;, n1, n2, n1*n2);</span><br><span class="line">    &#125; else if (num == 4)&#123;</span><br><span class="line">        printf(&quot;输入数字1\n&quot;);</span><br><span class="line">        t2 = scanf(&quot;%f&quot;, &amp;n1);</span><br><span class="line">        printf(&quot;t2 = %d\n&quot;, t2);</span><br><span class="line">        printf(&quot;输入数字2\n&quot;);</span><br><span class="line">        t3 = scanf(&quot;%f&quot;, &amp;n2);</span><br><span class="line">        printf(&quot;t3 = %d\n&quot;, t3);</span><br><span class="line">        printf(&quot;%f / %f = %f\n&quot;, n1, n2, n1/n2);</span><br><span class="line">    &#125; else if(num == 5)&#123;</span><br><span class="line">        printf(&quot;is exit\n&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125; else if(num == 0)&#123;</span><br><span class="line">        printf(&quot;input error \&quot;num == 0\&quot;\n&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        printf(&quot;input error\n&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>scanf的返回值为1，意思是我只有一个输入内容</li>
</ul>
<p><img src="err1.png" alt></p>
<blockquote>
<p>测试并没有出现任何的问题</p>
<p>可能是我用了没有初始化的变量所导致的错误？</p>
</blockquote>
<p><a href="https://blog.csdn.net/cs_polebear/article/details/38904783" target="_blank" rel="noopener"><strong>分段错误参考</strong></a></p>
<div class="tabs" id="sf"><ul class="nav-tabs"><li class="tab active"><a href="#sf-1">多个scanf输入</a></li></ul><div class="tab-content"><div class="tab-pane active" id="sf-1"><p><img src="sf.png" alt></p>
<p><a href="https://www.runoob.com/cprogramming/c-function-scanf.html" target="_blank" rel="noopener"><strong>scanf参考</strong></a></p>
</div></div></div>





]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown格式里为html5播放器添加选集列表</title>
    <url>/2020/01/10/markdown%E6%A0%BC%E5%BC%8F%E9%87%8C%E4%B8%BAhtml5%E6%92%AD%E6%94%BE%E5%99%A8%E6%B7%BB%E5%8A%A0%E9%80%89%E9%9B%86%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<p>用到了markdown写法，html5的<code>video</code>标签，js</p>
<p>用在wordpress的文章里</p>
<img src="/2020/01/10/markdown格式里为html5播放器添加选集列表/fm.jpg">

<a id="more"></a>

<table>
<thead>
<tr>
<th>样式</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>controls</td>
<td>显示控件</td>
</tr>
<tr>
<td>controlslist</td>
<td>禁止出现下载按钮</td>
</tr>
<tr>
<td>autoplay</td>
<td>视频在就绪后马上播放</td>
</tr>
<tr>
<td>src</td>
<td>视频源</td>
</tr>
<tr>
<td>type</td>
<td>视频类型</td>
</tr>
<tr>
<td><code>&lt;/video&gt;</code>的上一行</td>
<td>无法使用video标签才会显示出来，可自定义 （hexo这里会直接显示，我就把这行删了）</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 页面禁止使用右键 （我是用来防止右键另存为视频的）</span><br><span class="line">&lt;body oncontextmenu = &quot;return false&quot;&gt; </span><br><span class="line"></span><br><span class="line">&lt;video id=&quot;vid&quot; width=&quot;100%&quot; height=&quot;100%&quot; </span><br><span class="line">controls=&quot;controls&quot; </span><br><span class="line">controlslist=&quot;nodownload&quot; </span><br><span class="line">autoplay=&quot;autoplay&quot; </span><br><span class="line">style=&quot;clear:both;display:block;margin:auto&quot;&gt;</span><br><span class="line">&lt;source </span><br><span class="line">src=&quot;&quot; // 这里的默认播放视频，我设置为空，选集后才会播放视频</span><br><span class="line">type=&quot;video/mp4&quot;&gt;</span><br><span class="line">你的浏览器无法使用video标签 （删了）</span><br><span class="line">&lt;/video&gt;</span><br><span class="line"></span><br><span class="line">&lt;center&gt; // 居中</span><br><span class="line">&lt;table border=&quot;2&quot;&gt;</span><br><span class="line">	&lt;tr&gt;</span><br><span class="line">		&lt;td&gt;</span><br><span class="line">&lt;a href=&quot;javascript:&quot; onclick=&quot;player(&apos;视频连接1&apos;)&quot;&gt; 【第一集】 &lt;/a&gt;</span><br><span class="line">		&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">		&lt;td&gt;</span><br><span class="line">&lt;a href=&quot;javascript:&quot; onclick=&quot;player(&apos;视频连接2&apos;)&quot;&gt; 【第二集】 &lt;/a&gt;</span><br><span class="line">		&lt;/td&gt;</span><br><span class="line">	&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">// 更换视频的js</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function player(src) &#123;</span><br><span class="line">    var vid = document.getElementById(&quot;vid&quot;);</span><br><span class="line">    vid.src = src;</span><br><span class="line">    vid.play();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>实现</strong></p>
<blockquote>
<p><code>注意：</code>在hexo里选集的时候会蹦出一个空页面，关闭就行了，反正视频正常播放</p>
<p>用这种格式在wordpress里写文章，按选集按钮不会蹦出空白窗口</p>
</blockquote>
<!DOCTYPE HTML>
<html>
<head><meta name="generator" content="Hexo 3.9.0">

<title>Video MP4</title>
<meta charset="utf-8">

</head>

<body>

<body oncontextmenu="return false"> 

<p><video id="vid" width="100%" height="100%" controls="controls" controlslist="nodownload" autoplay="autoplay" style="clear:both;display:block;margin:auto"></video></p>
<source src type="video/mp4">

<center> 
<table border="2">
    <tr>
        <td>
<a href="javascript:" onclick="player('./t1.mp4')" target="_blank" rel="noopener"> 【第一集】 </a>
        </td>
        <td>
<a href="javascript:" onclick="player('./t2.mp4')" target="_blank" rel="noopener"> 【第二集】 </a>
        </td>
    </tr>
</table>
</center>
<script type="text/javascript">
function player(src) {
    var vid = document.getElementById("vid");
    vid.src = src;
    vid.play();
}
</script>

</body>
</body></html>


]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>当git部署出现 Spawn failed错误的解决方法</title>
    <url>/2020/01/09/%E5%BD%93git%E9%83%A8%E7%BD%B2%E5%87%BA%E7%8E%B0-Spawn-failed%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<img src="/2020/01/09/当git部署出现-Spawn-failed错误的解决方法/fm.jpg">

<p>win10的git，部署hexo时出现的错误</p>
<a id="more"></a>

<p>错误图<br><img src="error.png" alt></p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>进入hexo博客的目录，直接把<code>.deploy_git</code>删了，重新部署就行了</p>
<hr>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/2020/01/07/markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>markdown语法记录</p>
<img src="/2020/01/07/markdown语法/fn.jpg">

<a id="more"></a>

<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><details>
<summary>标题</summary>

<h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><h4 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h4><h5 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h5><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 标题1</span><br><span class="line"></span><br><span class="line">## 标题2</span><br><span class="line"></span><br><span class="line">### 标题3</span><br><span class="line"></span><br><span class="line">#### 标题4</span><br><span class="line"></span><br><span class="line">##### 标题5</span><br><span class="line"></span><br><span class="line">###### 标题6</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="代码与代码块"><a href="#代码与代码块" class="headerlink" title="代码与代码块"></a>代码与代码块</h1><details>
<summary>代码</summary>

<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`code`</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>代码块</summary>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code</span><br></pre></td></tr></table></figure>

<p><img src="code.png" alt></p>
</details>

<hr>
<h1 id="序号"><a href="#序号" class="headerlink" title="序号"></a>序号</h1><details>
<summary>有序序号</summary>

<ol>
<li><p>AAA</p>
</li>
<li><p>BBB</p>
</li>
<li><p>CCC</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. AAA</span><br><span class="line"></span><br><span class="line">2. BBB</span><br><span class="line"></span><br><span class="line">3. CCC</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>无序序号</summary>

<ul>
<li><p>AAA</p>
</li>
<li><p>BBB</p>
</li>
<li><p>CCC</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* AAA</span><br><span class="line"></span><br><span class="line">* BBB</span><br><span class="line"></span><br><span class="line">* CCC</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><details>
<summary>插入图片1</summary>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](图片链接 或 目录)</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h1><details>
<summary>链接</summary>

<p><a href="https://www.baidu.com/" target="_blank" rel="noopener">点击进入百度</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[点击进入百度](https://www.baidu.com/)</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="插入媒体文件"><a href="#插入媒体文件" class="headerlink" title="插入媒体文件"></a>插入媒体文件</h1><details>
<summary>本地视频</summary>

<p><video width="100%" height="400" src="./test.mp4" controls="controls"><br></video></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;video width=&quot;100%&quot; height=&quot;400&quot; src=</span><br><span class="line">&quot;视频目录&quot; </span><br><span class="line">controls=&quot;controls&quot;&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>插入网络视频/音频</summary>

<iframe src="//player.bilibili.com/player.html?aid=80702836&cid=138111823&page=1" scrolling="yes" border="1" frameborder="yes" framespacing="0" allowfullscreen="true" height="498" width="510"> 
</iframe>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=</span><br><span class="line">&quot;//player.bilibili.com/player.html?aid=80702836&amp;cid=138111823&amp;page=1&quot; </span><br><span class="line">scrolling=&quot;yes&quot; </span><br><span class="line">border=&quot;1&quot; </span><br><span class="line">frameborder=&quot;yes&quot; </span><br><span class="line">framespacing=&quot;0&quot; </span><br><span class="line">allowfullscreen=&quot;true&quot;</span><br><span class="line">height=498 </span><br><span class="line">width=510&gt; </span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><details>
<summary>分割线</summary>

<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="折叠效果"><a href="#折叠效果" class="headerlink" title="折叠效果"></a>折叠效果</h1><details>
<summary>折叠</summary>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;折叠&lt;/summary&gt;</span><br><span class="line"></span><br><span class="line">内容</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>嵌套折叠</summary>
<blockquote>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;嵌套折叠&lt;/summary&gt;</span><br><span class="line">&lt;blockquote&gt;</span><br><span class="line"></span><br><span class="line">父级内容</span><br><span class="line"></span><br><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;嵌套折叠2&lt;/summary&gt;</span><br><span class="line">&lt;blockquote&gt;</span><br><span class="line"></span><br><span class="line">子级内容</span><br><span class="line"></span><br><span class="line">&lt;/details&gt;&lt;blockquote&gt;</span><br><span class="line">&lt;/details&gt;&lt;blockquote&gt;</span><br></pre></td></tr></table></figure>

<details>
<summary>嵌套折叠2</summary>
<blockquote>

<p>子级内容</p>
</blockquote></details></blockquote>
</details>

<hr>
<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><details>
<summary>字体加粗</summary>

<p><strong>AAA</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**AAA**</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>字体颜色</summary>

<p><font color="blue">AAA</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font color=&quot;blue&quot;&gt;AAA&lt;/font&gt;</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>字体大小</summary>

<p><font size="10px">AAA</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font size=10px&gt;AAA&lt;/font&gt;</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><details>
<summary>表格</summary>

<table>
<thead>
<tr>
<th>aa</th>
<th>bb</th>
</tr>
</thead>
<tbody><tr>
<td>cc</td>
<td>dd</td>
</tr>
</tbody></table>
</details>

<hr>
<h1 id="引用列表"><a href="#引用列表" class="headerlink" title="引用列表"></a>引用列表</h1><details>
<summary>引用列表</summary>

<blockquote>
<p>1级引用</p>
<blockquote>
<p>2级引用</p>
<blockquote>
<p>3级引用</p>
<blockquote>
<p>4级引用</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;1级引用</span><br><span class="line">&gt;&gt;2级引用</span><br><span class="line">&gt;&gt;&gt;3级引用</span><br><span class="line">&gt;&gt;&gt;&gt;4级引用</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="居中语法"><a href="#居中语法" class="headerlink" title="居中语法"></a>居中语法</h1><center>居中</center>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;center&gt;居中&lt;/center&gt;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>C总结</title>
    <url>/2020/01/06/C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>基于操作系统<code>CentOS8</code>与<code>GCC8.2</code></p>
<p>粗略总结C语言</p>
<img src="/2020/01/06/C总结/fm.gif">

<a id="more"></a>

<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>数据的最基本类型，有整数，小数与字符类型，其中数字由整数与小数类型存储，字母与符号用字符类型存储</p>
<details><summary><font size="4px">带符号类型 与 不带符号类型</font></summary><blockquote>


<p><code>带符号类型</code>表示这个类型没有负数，并且表示的范围更大</p>
<p><code>不带符号类型</code>表示这个类型有负数</p>
<details close><summary><font size="4px">例子：char类型带符号 与 不带符号的范围</font></summary><blockquote>

<table>
<thead>
<tr>
<th>类型</th>
<th>写法</th>
<th>范围</th>
</tr>
</thead>
<tbody><tr>
<td>带符号char</td>
<td>char （或signed char）</td>
<td>-128~127</td>
</tr>
<tr>
<td>不带符号char</td>
<td>unsigned char</td>
<td>0~255</td>
</tr>
</tbody></table>
</blockquote></details>
</blockquote></details>

<details>
<summary><font size="4px">整数类型</font></summary>

<table>
<thead>
<tr>
<th>名称</th>
<th>长度</th>
<th>占用的位数</th>
</tr>
</thead>
<tbody><tr>
<td>short</td>
<td>短整型</td>
<td>16</td>
</tr>
<tr>
<td>int</td>
<td>整形</td>
<td>16 或 32</td>
</tr>
<tr>
<td>long</td>
<td>长整形</td>
<td>32</td>
</tr>
<tr>
<td>long long</td>
<td>更长的整形</td>
<td>64</td>
</tr>
</tbody></table>
<blockquote>
<p>C规定short不能比int大，long不能比int小</p>
</blockquote>
<h3 id="整形溢出"><a href="#整形溢出" class="headerlink" title="整形溢出"></a>整形溢出</h3><p>整数的溢出，会导致数值重置 （时钟就是一个例子，超过12就会重置到1）</p>
<blockquote>
<p>就拿char来做例子，127 + 1，其结果为 -128</p>
</blockquote>
<h3 id="位与字节"><a href="#位与字节" class="headerlink" title="位与字节"></a>位与字节</h3><p><code>位</code>bit</p>
<blockquote>
<p>计算器最小的存储单位，可以存储0或1（开或关）</p>
</blockquote>
<p><code>字节</code>byte</p>
<blockquote>
<p>计算器最常用的存储单位<br>1byte = 8bit<br>即长度为2^8=256<br>范围0-255</p>
</blockquote>
<h3 id="二进制转换成十进制的例子"><a href="#二进制转换成十进制的例子" class="headerlink" title="二进制转换成十进制的例子"></a>二进制转换成十进制的例子</h3><p>计算器由0和1组成，也就是二进制</p>
<blockquote>
<p>二进制，是给机器看的 （只有0或1）</p>
<p>十进制，是给人看的 （范围：0~9）</p>
</blockquote>
<p><img src="2-10.png" alt></p>
<blockquote>
<p>如上图所示，最前面的那些0可以舍弃</p>
<p>二进制1101 转换成 十进制也是23</p>
</blockquote>
</details>

<details>
<summary><font size="4px">浮点数(小数)类型</font></summary>

<table>
<thead>
<tr>
<th>名称</th>
<th>长度</th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>单精浮点数</td>
</tr>
<tr>
<td>double</td>
<td>双精浮点数</td>
</tr>
</tbody></table>
<blockquote>
<p>计算机将浮点数分成 整数与小数部分，并且分开存储</p>
<p>浮点数表示的范围比整数大</p>
</blockquote>
<h3 id="E记数法"><a href="#E记数法" class="headerlink" title="E记数法"></a>E记数法</h3><blockquote>
<p>3.14E+3 表示 3.14 * 10^3 （10^3 = 1000， 3被称为10的指数）</p>
<p>3.14E-4 表示 3.14 * 10^-4（10^-4 = 0.0001）</p>
</blockquote>
<p><img src="zhishu.png" alt></p>
</details>

<details>
<summary><font size="4px">将整数类型打印到显示器</font></summary>
<blockquote>

<details>
<summary><font size="4px">8，10，16进制的打印方式</font></summary>
<blockquote>

<ol>
<li><p>需要导入C库文件<code>stdio.h</code>获取<code>printf</code>函数</p>
</li>
<li><p>通过传入 参数 进printf函数，将数据显示到显示器</p>
</li>
<li><p>创建文件，格式为： 自定义名称.c</p>
</li>
<li><p>C语言默认的整数类型是int</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">// test.c</span><br><span class="line"></span><br><span class="line">#include：头文件导入语句</span><br><span class="line">&lt;stdio.h&gt; ：需要导入的文件（用&lt;&gt;包起来的，表示这是C库的文件）</span><br><span class="line"></span><br><span class="line">简单的理解是，将stdio.h这个文件里的内容 导入到你的文件里</span><br><span class="line">*/</span><br><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line"></span><br><span class="line">/* </span><br><span class="line">main函数，程序运行的入口 </span><br><span class="line"></span><br><span class="line">可以简单理解为，代码需要经过main函数才会执行</span><br><span class="line">*/</span><br><span class="line">int main()&#123;</span><br><span class="line">	int number = 10; // 变量number，存储int整形，数值为10</span><br><span class="line">	</span><br><span class="line">	// \n 换行符</span><br><span class="line">    printf(&quot;八进制  ：%o\n十进制  ：%d\n十六进制：%x\n&quot;,number,number,number);</span><br><span class="line">	</span><br><span class="line">	printf(&quot;---------------分割线---------------\n&quot;);</span><br><span class="line">	</span><br><span class="line">	// 显示进制前缀版</span><br><span class="line">	printf(&quot;八进制  ：%#o\n十进制  ：%#d\n十六进制：%#x\n&quot;,number,number,number);</span><br><span class="line">	</span><br><span class="line">	return 0; // 这是一个返回值，在main函数里返回0表示程序没有出问题</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>写法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>%o</td>
<td>八进制</td>
</tr>
<tr>
<td>%d</td>
<td>十进制</td>
</tr>
<tr>
<td>%x</td>
<td>十六进制</td>
</tr>
<tr>
<td>&gt;如果需要显示进制前缀，需要在%后面加个<code>#</code></td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>例子： #%d</p>
</blockquote>
<p><img src="jinzhijieguo.png" alt></p>
</blockquote></details>

<details>
<summary><font size="4px">指定打印其他整数类型</font></summary>
<blockquote>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// test.c</span><br><span class="line"></span><br><span class="line">unsigned int n1 = 11;</span><br><span class="line">    short n2 = 22;</span><br><span class="line">    long n3 = 33;</span><br><span class="line">    long long n4 = 44;</span><br><span class="line"></span><br><span class="line">    // 指定输出为unsigned int类型</span><br><span class="line">    printf(&quot;这是无符号类型int   n1 = %u\n&quot;, n1);</span><br><span class="line">    // 指定输出为 short 类型</span><br><span class="line">    printf(&quot;这是short类型       n2 = %hd\n&quot;, n2); </span><br><span class="line">    // 指定输出为 long 类型</span><br><span class="line">    printf(&quot;这是long类型        n3 = %ld\n&quot;, n3);</span><br><span class="line">    // 指定输出为 long long 类型</span><br><span class="line">    printf(&quot;这是long long类型   n4 = %lld\n&quot;, n4);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>写法</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td>%u</td>
<td>unsigned int</td>
</tr>
<tr>
<td>%hd</td>
<td>short</td>
</tr>
<tr>
<td>%ld</td>
<td>long</td>
</tr>
<tr>
<td>%lld</td>
<td>long long</td>
</tr>
</tbody></table>
</blockquote>
</details></blockquote>
</details>

<details>
<summary><font size="4px">字符类型</font></summary>
<blockquote>

<p>存储的是整数，通过编码表，转换成字符</p>
<blockquote>
<p>一个字符占 1bit</p>
</blockquote>
<p><img src="cn.png" alt></p>
<details>
<summary><font size="4px">转换例子</font></summary>
<blockquote>

<blockquote>
<p>默认使用ASCII编码表，65表示A</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// test.c</span><br><span class="line"></span><br><span class="line">char c1 = &apos;A&apos;,</span><br><span class="line">     c2 = 65;</span><br><span class="line"></span><br><span class="line">printf(&quot;c1 = %d\nc2 = %c\n&quot;, c1, c2);</span><br></pre></td></tr></table></figure>

<p><img src="jg.png" alt></p>
</blockquote></details></blockquote>

<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>用到转义符<code>\</code></p>
<p>常用的转义符有：<br>写法|功能<br>-|-<br>\n|换行<br>\t|制表符 （多个空格）<br>&#39;|一个 ‘<br>&quot;|一个 “<br>\|一个 <br>\0|空字符</p>
</details>

<details>
<summary><font size="4px">布尔类型</font></summary>

<p>用作于判断 真假，0表示假，0以外的数值表示真</p>
</details>

<details>
<summary><font size="4px">打印浮点数</font></summary>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// test.c</span><br><span class="line"></span><br><span class="line">float n1 = 1.1;</span><br><span class="line">    double n2 = 2.2e1;</span><br><span class="line">    long double n3 = 3.3e-2;</span><br><span class="line"></span><br><span class="line">    printf(&quot;n1 = %f\t%e\n&quot;,n1,n1);</span><br><span class="line">    printf(&quot;n1 = %f\t%e\n&quot;,n2,n2);</span><br><span class="line">    printf(&quot;n3 = %Lf\t%Le\n&quot;,n3,n3);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>写法</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td>%f</td>
<td>float 或 double</td>
</tr>
<tr>
<td>%Lf</td>
<td>long double</td>
</tr>
<tr>
<td>%e</td>
<td>float和double 指数计数法</td>
</tr>
<tr>
<td>%Le</td>
<td>long double 指数计数法</td>
</tr>
</tbody></table>
</details>

<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>必须初始化，并且值不能修改</p>
<details>
<summary>创建宏常量</summary>

<ol>
<li><p>使用到C预处理<code>#define</code> （宏）</p>
<blockquote>
<p>预处理是在 程序运行前 所运行的程序</p>
<p>文件运行流程：代码  -&gt; 预处理 -&gt; 编译 -&gt; 运行</p>
</blockquote>
</li>
<li><p>常量格式：</p>
<blockquote>
<p>#define NAME VALUE </p>
<p>宏的名称必须是全部大写</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// test.c</span><br><span class="line"></span><br><span class="line">#define CONST_VALUE 55 // 创建宏常量</span><br><span class="line"></span><br><span class="line">int main (void)&#123;</span><br><span class="line">	printf(&quot;%d\n&quot;, CONST_VALUE);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>创建const常量</summary>

<ol>
<li>使用到关键字<code>const</code></li>
</ol>
</details>

<hr>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>字符串是由多个字符所组成的，并且每个字符串的最后的一个字符是<code>\0</code></p>
<details>
<summary>字符串的输入输出</summary>

<ol>
<li><p>创建一个数组</p>
<blockquote>
<p>类型 名称 [大小]; </p>
</blockquote>
</li>
<li><p><code>scanf</code>函数，输入函数，你可以往程序里输入内容，遇到空白，换行符则会停止</p>
<blockquote>
<p>%s 表示这是一个字符串</p>
<p>将输入的数据，存储进字符数组name里</p>
<p>键盘是一种输入设备</p>
<p>数据输入成功后，会自动在末尾处添加\0</p>
</blockquote>
</li>
<li><p>输出数据 （printf其实就是将数据输出到输出设备）</p>
<blockquote>
<p>显示器就是一种输出设备</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// test.c</span><br><span class="line"></span><br><span class="line">char name[5]; // char类型数组</span><br><span class="line">printf(&quot;输入你的名称（最多4个字符）\n&quot;);</span><br><span class="line">scanf(&quot;%s&quot;, name);</span><br><span class="line">printf(&quot;hellow %s\n&quot;, name);</span><br></pre></td></tr></table></figure>

<p><img src="str.png" alt></p>
</details>

<details>
<summary>获取字符的长度</summary>

<ol>
<li><p>使用到头文件<code>#include &lt;string.h&gt;</code>里的<code>strlen</code>函数</p>
</li>
<li><p>strlen函数无视空字符</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// test.c</span><br><span class="line"></span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">// 初始化字符串</span><br><span class="line">char name[5] = &quot;ABC\0&quot;;</span><br><span class="line"></span><br><span class="line">// strlen函数会返回指定字符串的长度</span><br><span class="line">int name_size = strlen(name);</span><br><span class="line">printf(&quot;name的长度为：%d\n&quot;, name_size);</span><br></pre></td></tr></table></figure>

<p><img src="str2.png" alt></p>
</details>

<details>
<summary>初始化字符串</summary>

<div class="tabs" id="写法"><ul class="nav-tabs"><li class="tab active"><a href="#写法-1">写法 1</a></li><li class="tab"><a href="#写法-2">写法 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="写法-1"><p>char c[100] = “ABC\0”;</p>
</div><div class="tab-pane" id="写法-2"><p>char *cp = “ABC”;</p>
</div></div></div>
</details>

<details>
<summary>字符串函数</summary>

<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>puts (str)</td>
<td><strong>输出示字符串</strong>，并自动加换行符</td>
</tr>
<tr>
<td>gets (str)</td>
<td><strong>一次读取一个单词</strong>，因为不判断数组字符串是否能装下用户输入的字符串，会有溢出的问题，会丢弃\n</td>
</tr>
<tr>
<td>fgets (str, n, input)</td>
<td><strong>功能与gets一样</strong>,通过第二个参数限制字符溢出的问题，\n也会停止读取</td>
</tr>
<tr>
<td>gets_s (str, n)</td>
<td><strong>功能与gets一样</strong>，第二个参数限制读入字符串，丢弃\n，没有读取到\n则会将首字符设置为\0，返回一个空指针</td>
</tr>
<tr>
<td>fputs (str, n ,output)</td>
<td><strong>功能与puts一样</strong>限制输入，不会自动在末尾处加\n</td>
</tr>
<tr>
<td>strcat (str1, str2)</td>
<td><strong>拼接字符串</strong>，将第二个字符串添加到第一个字符串的末尾处，不判断str1的大小是否能容纳str2</td>
</tr>
<tr>
<td>strncat (str1, str2, n)</td>
<td><strong>拼接字符串</strong>，用n判断str1是否能容纳str2</td>
</tr>
<tr>
<td>strcmp (str1, str2)</td>
<td><strong>字符串比较</strong>，str1 &gt; str2 ，返回值：str1比str2大，则用正数表示多出的数，比str2小的话用负数表示少的数，一样用0表示</td>
</tr>
<tr>
<td>strncmp (str1, str2, n)</td>
<td><strong>比较</strong>n个字符串</td>
</tr>
<tr>
<td>strcpy (str1, str2)</td>
<td><strong>字符串拷贝</strong>，str2的字符串拷贝给str1</td>
</tr>
<tr>
<td>strncpy (str1, str2, n)</td>
<td><strong>字符串拷贝</strong>，指定从str2拷贝n个字符到str1</td>
</tr>
<tr>
<td>sprintf (str, str_format, …)</td>
<td><strong>用类似printf的格式写入到字符串</strong>参数1为目标字符串，参数2为格式，参数3为参量表</td>
</tr>
<tr>
<td>strchr (str, char c)</td>
<td><strong>查找第一次出现的字符</strong>，并以指针的形式返回，找不到则返回空指针</td>
</tr>
<tr>
<td>strpbrk (str1, str2)</td>
<td><strong>在str1查找str2中的任意字符</strong>，返回str1首个指向str2中的字符的指针，str1里没有str2任意一个字符则返回空指针</td>
</tr>
<tr>
<td>strrchr (str, char c)</td>
<td><strong>查找最后一个出现的字符</strong>，并以指针的形式返回，找不到返回空指针</td>
</tr>
<tr>
<td>strstr (str1, str2)</td>
<td><strong>str1里查找 str2出现的首位置</strong>，找不到返回空指针</td>
</tr>
</tbody></table>
</details>

<hr>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>用于操作数据的符号，例如算数运算符，逻辑运算符，比较运算符</p>
<details>
<summary><font size="4px">sizrof</font></summary>

<p>使用sizeof，获取类型所占用的字节数(bit)</p>
<blockquote>
<p>sizeof(类型);</p>
<p>返回一个整数类型，表示该 类型 所占的bit大小</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// test.c </span><br><span class="line"></span><br><span class="line">printf(&quot;char占用：%d个字节\n&quot;, sizeof(char));</span><br><span class="line">printf(&quot;int占用：%d个字节\n&quot;, sizeof(int));</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary><font size="4px">算数运算符</font></summary>

<table>
<thead>
<tr>
<th>写法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加法</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
</tr>
<tr>
<td>/</td>
<td>除法</td>
</tr>
<tr>
<td>%</td>
<td>取模</td>
</tr>
<tr>
<td>++</td>
<td>自增1</td>
</tr>
<tr>
<td>–</td>
<td>自减1</td>
</tr>
</tbody></table>
<blockquote>
<p>前自增(减)，先自增(减)在运算</p>
<p>后自增(减)，先运算在自增(减)</p>
</blockquote>
</details>

<details>
<summary><font size="4px">比较运算符</font></summary>

<table>
<thead>
<tr>
<th>写法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>==</td>
<td>等于</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
</tbody></table>
</details>

<details>
<summary><font size="4px">逻辑运算符</font></summary>

<table>
<thead>
<tr>
<th>写法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>!</td>
<td>非</td>
</tr>
<tr>
<td>||</td>
<td>或</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>与</td>
</tr>
</tbody></table>
</details>

<details>
<summary><font size="4px">赋值运算符</font></summary>

<table>
<thead>
<tr>
<th>写法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>赋值运算符</td>
</tr>
<tr>
<td>+=</td>
<td>自身加上其他值</td>
</tr>
<tr>
<td>-=</td>
<td>自身减去其他值</td>
</tr>
<tr>
<td>*=</td>
<td>自身乘其他值</td>
</tr>
<tr>
<td>/=</td>
<td>自身除其他值</td>
</tr>
<tr>
<td>%=</td>
<td>自身取模其他值</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 例子</span><br><span class="line"></span><br><span class="line">int i = 2;</span><br><span class="line">i += 2; // 等同于 i = i + 2;</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary><font size="4px">三元运算符</font></summary>

<blockquote>
<p>条件 ? true的处理 : false的处理</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// test.c</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">    int b = i != 0 ? 1 : 0;</span><br><span class="line">    printf(&quot;%d\n&quot;, b);</span><br></pre></td></tr></table></figure>

</details>

<h2 id="表达式与语句"><a href="#表达式与语句" class="headerlink" title="表达式与语句"></a>表达式与语句</h2><p><code>;</code>语句符</p>
<p>1 + 1 // 加法表达式，值为2</p>
<blockquote>
<p>int i = 1; // 表达式语句</p>
</blockquote>
<blockquote>
<p>每个表达式都会有一个值</p>
</blockquote>
<hr>
<h1 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h1><p>用于控制程序的语句，循环，判断</p>
<details>
<summary><font size="4px">循环</font></summary>

<p>如果添加一直为 真，则会造成死循环</p>
<ol>
<li><p><code>while</code>语句</p>
<blockquote>
<p>while(条件）</p>
</blockquote>
</li>
<li><p><code>for</code>语句</p>
<blockquote>
<p>for(变量; 条件; 数值的操作)</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// test.c</span><br><span class="line">// while</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">while(i &lt; 3)&#123;</span><br><span class="line"> ++i;</span><br><span class="line"> printf(&quot;i = %d\n&quot;, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// test.c</span><br><span class="line">// for</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">for(int a = 3; i != a; ++i)</span><br><span class="line">printf(&quot;i = %d\n&quot;, i);</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary><font size="4px">出口循环</font></summary>

<p>至少会执行一次的循环 （第一次判断条件为假的情况下）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//写法</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">	语句</span><br><span class="line">&#125;while (条件);  // 条件为假之前，重复执行do内的语句</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// test.c</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">    do&#123;</span><br><span class="line">        printf(&quot;test\n&quot;);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;while(i != 3);</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary><font size="4px">判断</font></summary>

<ol>
<li><p>if 如果</p>
<blockquote>
<p>if(条件)</p>
</blockquote>
</li>
<li><p>else 否则</p>
</li>
<li><p>else if 但是</p>
<blockquote>
<p>else if(条件)</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// test.c</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line"></span><br><span class="line">if (i != 0)</span><br><span class="line">printf(&quot;i != 0&quot;);</span><br><span class="line">else if (i == 1)</span><br><span class="line">printf(&quot;i !== 1&quot;);</span><br><span class="line">else</span><br><span class="line">printf(&quot;i == 0 &quot;);</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary><font size="4px">多重选择</font></summary>

<ol>
<li><p>switch(条件)</p>
</li>
<li><p>case ‘a’ 判断条件</p>
</li>
<li><p>break 跳出</p>
<blockquote>
<p>如果case没有break，程序会执行到break或switch结束</p>
</blockquote>
</li>
<li><p>default 功能与else一样</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 例子</span><br><span class="line"></span><br><span class="line">char c = &apos;a&apos;;</span><br><span class="line">switch(c)&#123;</span><br><span class="line">	case &apos;a&apos;:</span><br><span class="line">	printf(&quot;a\n&quot;);</span><br><span class="line">	break;</span><br><span class="line">	</span><br><span class="line">	case &apos;b&apos;:</span><br><span class="line">	printf(&quot;b\n&quot;);</span><br><span class="line">	break;</span><br><span class="line">	</span><br><span class="line">	case &apos;c&apos;:</span><br><span class="line">	printf(&quot;c\n&quot;);</span><br><span class="line">	break;</span><br><span class="line">	</span><br><span class="line">	default:</span><br><span class="line">	printf(&quot;default&quot;);</span><br><span class="line">	break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary><font size="4px">功能关键字</font></summary>

<table>
<thead>
<tr>
<th>写法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>break</td>
<td>跳出当前代码块 （终止当前判断或循环）</td>
</tr>
<tr>
<td>continue</td>
<td>跳过</td>
</tr>
<tr>
<td></td></tr></tbody></table></details>
<td></td>


<hr>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>将功能包装的方法</p>
<blockquote>
<p>函数的定义：</p>
<p>返回值类型 函数名 (参数列表)</p>
<p>返回有返回值类型的话，必须要为其返回一个值</p>
</blockquote>
<details>
<summary><font size="4px">参数分两种</font></summary>

<blockquote>
<ol>
<li>形参<blockquote>
<p>将传入的参数是一份拷贝，在函数里修改其数值，外部数据不会改变<br>int test (int)</p>
</blockquote>
</li>
<li>实参<blockquote>
<p>传入的参数是本体，在函数里修改其数值，外部数据也会改变<br>int test (int*)</p>
</blockquote>
</li>
</ol>
</blockquote>
</details>

<details>
<summary><font size="4px">例子</font></summary>

<ol>
<li><p>int 为返回值类型</p>
</li>
<li><p>double d为 函数需要传入的参数</p>
</li>
<li><p>return 0 表示返回数值0，函数结束 （只有单个return则直接退出函数）</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int test (double d) &#123;</span><br><span class="line"> if(d &lt; 0)</span><br><span class="line">	return 0;</span><br><span class="line"> else 	</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test2(double *d)&#123;</span><br><span class="line"> (*d)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line"> double d = 1.11,</span><br><span class="line"> d2 = 2.22;</span><br><span class="line"> </span><br><span class="line"> test(d); // 使用函数，传入形参</span><br><span class="line"> </span><br><span class="line"> test2(&amp;d2); // 传入实参</span><br><span class="line"> </span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>递归函数</summary>

<p>递归：自己循环式的调用自己，每个递归必须有一个出口，非常消耗内存</p>
</details>

<hr>
<h1 id="数组与指针"><a href="#数组与指针" class="headerlink" title="数组与指针"></a>数组与指针</h1><p>存储多个数据的空间</p>
<blockquote>
<p>数组的名称是一个指针</p>
<p>指针通过 自增 和 自减 可以获取它的上一个 或 下一个元素</p>
</blockquote>
<details>
<summary>数组</summary>

<blockquote>
<p>数组的定义：</p>
<p>类型 数组名称[常量整数]</p>
<p>数组通过索引<code>[]</code>去寻找元素</p>
<p>索引从0开始</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 数组的初始化</span><br><span class="line">int arr[3] = &#123;11,22,33&#125;;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">arr[0] == 11</span><br><span class="line">arr[1] == 22</span><br><span class="line">arr[2] == 33</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>多维数组</summary>

<p>嵌套数组，存储数组的数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 这个数组有 2*3个元素</span><br><span class="line">int arr[2][3] = &#123;</span><br><span class="line">        &#123;11, 22, 33&#125;,</span><br><span class="line">        &#123;44, 55, 66&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">	</span><br><span class="line">/*</span><br><span class="line">arr[0][0] == 11</span><br><span class="line">arr[0][1] == 22</span><br><span class="line">arr[0][2] == 33</span><br><span class="line"></span><br><span class="line">arr[1][0] == 44</span><br><span class="line">arr[1][1] == 55</span><br><span class="line">arr[1][2] == 66</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>指针</summary>

<p>指针会指向内存的地址值，通过指针可以直接操作内存</p>
<blockquote>
<p>指定的定义：</p>
<p>类型 *名称</p>
</blockquote>
<ol start="0">
<li><p>&amp;i 获取变量i的地址（=前的&amp;是别名，=后的&amp;是去地址）</p>
</li>
<li><p>int *p 创建一个指针</p>
</li>
<li><p>*p 解引指针，获取指针里的值</p>
</li>
<li><p>printf 的 %p 输出指针的地址值</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i = 11;</span><br><span class="line">    int *p = &amp;i;</span><br><span class="line">    (*p)++;</span><br><span class="line">    printf(&quot;%d\n&quot;, *p);</span><br><span class="line">	printf(&quot;指针的地址值：%p\n&quot;, p);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解引或使用 未初始化的指针（空指针）或导致未知的错误</p>
</blockquote>
<p><code>多级指针</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int *p; // 一级指针</span><br><span class="line">int *p2; // 二级指针</span><br><span class="line">int *p3; //三级指针</span><br><span class="line"></span><br><span class="line">p2 = &amp;p; // 二级指针指向一级指针</span><br><span class="line">p3 = &amp;p2; // 三级指针指向二级指针</span><br><span class="line"></span><br><span class="line">...以此来类推</span><br></pre></td></tr></table></figure>

<p><code>指针指向多维数组</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int array[1][2];</span><br><span class="line">int (*pointer)[2] = array;</span><br><span class="line"></span><br><span class="line">int arr[2][3][4];</span><br><span class="line">int (*p)[3][4] = arr;</span><br><span class="line"></span><br><span class="line">...以此类推</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>函数指针</summary>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int m(double*);</span><br><span class="line"></span><br><span class="line">int m2(double*);</span><br><span class="line"></span><br><span class="line">int (*name) (double*); // 创建函数指针</span><br><span class="line">name = m; // 指向函数m</span><br><span class="line"></span><br><span class="line">name = m2; // 指向函数m2</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>作为函数参数的数组</summary>

<ul>
<li><p><strong>形参</strong></p>
<blockquote>
<p>void m (int arr[]);</p>
</blockquote>
</li>
<li><p><strong>实参</strong></p>
<blockquote>
<p>void m (int *arr);</p>
</blockquote>
</li>
</ul>
</details>

<details>
<summary>获取数组长度</summary>



</details>

<hr>
<h1 id="空间管理"><a href="#空间管理" class="headerlink" title="空间管理"></a>空间管理</h1><p>管理内存空间的作用域 与 生命周期</p>
<details>
<summary>左值与右值</summary>

<p>左值的生命周期长，右值的生命周期短（生命周期即将结束）</p>
<ol>
<li><p>i为左值</p>
</li>
<li><p>test()返回的值是右值，没有指向左值的话就会立马失效</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i = test();</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>作用域</summary>

<p>这是程序的生命周期，一旦出了作用域，程序就会失效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; // 这是一个作用域</span><br><span class="line">int i = 11;</span><br><span class="line">&#125; // 结束作用域</span><br><span class="line"></span><br><span class="line">i = 22; // 错误，i已经失效</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>链接</summary>

<p>编译后产生的文件，它会和目标文件与系统的组件组合成一个可执行文件</p>
<p>目标文件 -&gt; 编译 -&gt; 生成链接 -&gt; 可执行文件</p>
<div class="tabs" id="链接"><ul class="nav-tabs"><li class="tab active"><a href="#链接-1">外部链接</a></li><li class="tab"><a href="#链接-2">内部链接</a></li><li class="tab"><a href="#链接-3">无链接</a></li></ul><div class="tab-content"><div class="tab-pane active" id="链接-1"><p>当前文件以外的文件可以使用</p>
<blockquote>
<p>外部链接变量可以用在多文件程序里使用</p>
</blockquote>
<blockquote>
<p>关键字：extern</p>
</blockquote>
</div><div class="tab-pane" id="链接-2"><p>只能在当前文件使用</p>
<blockquote>
<p>内部链接变量只能在一个文件中使用</p>
</blockquote>
</div><div class="tab-pane" id="链接-3"><p>只能在当前代码块里使用</p>
<blockquote>
<p>块作用域，函数作用域，函数原型作用域的变量都是无连接变量</p>
<p>这表示了这些作用域里的变量都是私有的</p>
</blockquote>
</div></div></div>

</details>

<details>
<summary>存储期</summary>

<ul>
<li><p>静态存储期 </p>
<blockquote>
<p>用关键字<code>static</code>标识，程序执行期间一直存在</p>
</blockquote>
</li>
<li><p>线程存储期</p>
<blockquote>
<p>从被声明到线程结束一直存在</p>
</blockquote>
</li>
<li><p>自动存储期</p>
<blockquote>
<p>块作用域具有自动存储期，程序进入块时，才会为变量分配内存</p>
<p>关键字：auto</p>
</blockquote>
</li>
<li><p>动态分配存储期 </p>
<blockquote>
<p>可以根据需要设计扩大（或缩小）</p>
</blockquote>
</li>
</ul>
</details>

<details>
<summary>寄存器变量</summary>

<p>寄存器变量存储在 CPU的寄存器里，访问这些变量非常快</p>
<blockquote>
<p>由于寄存器不是内存，所有没法获取寄存器变量的地址值</p>
<p>寄存器类似于自动变量</p>
<p>寄存器变量关键字<code>register</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">register int i;</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>定义与声明</summary>

<p>定义只有一个，声明可以有多个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i = 1l; // 定义int类型变量i，值为11</span><br><span class="line"></span><br><span class="line">extern int num; // 声明int类型变量num</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>内存操作</summary>

<p>需要头文件<code>#include &lt;stdlib.h&gt;</code></p>
<div class="tabs" id="内存"><ul class="nav-tabs"><li class="tab active"><a href="#内存-1">分配内存</a></li><li class="tab"><a href="#内存-2">释放内存</a></li></ul><div class="tab-content"><div class="tab-pane active" id="内存-1"><p>创建动态内存</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>void* malloc (n)</td>
<td>向内存申请n bit的空间，并返回一个指针指向这个空间</td>
</tr>
<tr>
<td>calloc (n, n2)</td>
<td>类似malloc，两个参数为无符号类型，n为数量，n2为类型大小</td>
</tr>
</tbody></table>
<p><code>void*</code>任意类型指针，使用前需要强转</p>
<blockquote>
<p>// 申请3个int类型大小的内存空间<br>int <em>p = ( int*</em> ) malloc(3 * sizeof(int));</p>
</blockquote>
</div><div class="tab-pane" id="内存-2"><p>释放动态内存，若用完的动态内存不及时释放，则会操作内存泄漏，会导致内存越来越小</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>free (动态内存指针)</td>
<td>释放动态内存</td>
</tr>
</tbody></table>
</div></div></div>

</details>

<hr>
<h1 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h1><p>I(input)输入， O(output)输出</p>
<details>
<summary>printf函数</summary>

<p>输出函数</p>
<p><img src="pf.png" alt></p>
<blockquote>
<p>该函数返回值，会返回打印字符的个数</p>
<p>返回负数则表示出错</p>
</blockquote>
<table>
<thead>
<tr>
<th>转换说明</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>%+5d</td>
<td>打印5个字符 （少于5个字符则在最前面补空格，补到5个字符为止）</td>
</tr>
<tr>
<td>%-5d</td>
<td>打印5个字符 （少于5个字符则在最后面补空格，补到5个字符为止）</td>
</tr>
<tr>
<td>%z</td>
<td>size_t类型 （机器无符号整形）</td>
</tr>
<tr>
<td>%.2f</td>
<td>打印浮点数时，只保留2个小数位</td>
</tr>
<tr>
<td></td></tr></tbody></table></details>
<td></td>


<details>
<summary>scanf函数</summary>

<p>输入函数</p>
<p><img src="sf.png" alt></p>
<blockquote>
<p>输入列表是变量，则需要在变量名前加一个&amp; （取其变量的引用）</p>
<p>数组不用加&amp; （因为数组名称本身就是一个指针）</p>
</blockquote>
</details>

<details>
<summary>单字符I/O</summary>

<table>
<thead>
<tr>
<th>函数名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>getchar()</td>
<td>输入一个字符</td>
</tr>
<tr>
<td>putchar(int)</td>
<td>输出一个字符，包括空格与换行符</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char c;</span><br><span class="line">    if(c = getchar())</span><br><span class="line">        putchar(c);</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>缓冲区</summary>

<p>一个用于数据缓冲的空间，当缓冲区满了的时候，会自动刷新缓冲区，将缓冲区里的数据输出</p>
</details>

<details>
<summary>I/O函数与常量</summary>

<p>需要<code>#include &lt;stdio.h&gt;</code></p>
<div class="tabs" id="函数与常量"><ul class="nav-tabs"><li class="tab active"><a href="#函数与常量-1">函数</a></li><li class="tab"><a href="#函数与常量-2">常量</a></li></ul><div class="tab-content"><div class="tab-pane active" id="函数与常量-1"><ul>
<li><code>fpost_t</code> 文件定位类型</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>fopen (文件目录, 打开格式)</td>
<td>打开文件</td>
</tr>
<tr>
<td>getc (文件指针)</td>
<td>从文件获取一个字符</td>
</tr>
<tr>
<td>putc (ch, 文件指针)</td>
<td>将字符ch放进文件里</td>
</tr>
<tr>
<td>fclose (文件指针)</td>
<td>关闭文件，返回值为0则成功</td>
</tr>
<tr>
<td>fseek (fp, n, 格式)</td>
<td>修改文件当前位置</td>
</tr>
<tr>
<td>ftell (fp, n, 格式)</td>
<td>修改文件当前位置（二进制）</td>
</tr>
<tr>
<td>fgetpos (FILE<em>, fpos_t</em>)</td>
<td>显示文件当前位置，描述文件当前位置到fpos_t的距离，返回0则成功</td>
</tr>
<tr>
<td>fsetpos (FILE<em>, const fpos_t</em>)</td>
<td>修改文件当前位置，返回0则成功</td>
</tr>
<tr>
<td>ungetc(int c, FILE*)</td>
<td>将下次读取文件的位置设置为c</td>
</tr>
<tr>
<td>fflush (FILE* f)</td>
<td>将缓冲区未写入的内容写到f</td>
</tr>
<tr>
<td>setvbug (FILE* , char* buf, int 功能, size_t 数组大小)</td>
<td>为指定文件创建一个指定的缓冲区</td>
</tr>
<tr>
<td>fwrite (buf, 写入数据的大小, 数据的数量, FILE*)</td>
<td>二进制写入</td>
</tr>
<tr>
<td>fread (buf, 写入数据的大小, 数据的数量, FILE*)</td>
<td>二进制读取，出错或读取到EOF则停止运行</td>
</tr>
</tbody></table>
</div><div class="tab-pane" id="函数与常量-2"><table>
<thead>
<tr>
<th>常量</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>EOF</td>
<td>文件尾</td>
</tr>
<tr>
<td>stdin</td>
<td>标准输入</td>
</tr>
<tr>
<td>stdout</td>
<td>标准输出</td>
</tr>
<tr>
<td>stderr</td>
<td>标准错误</td>
</tr>
<tr>
<td>SEEK_SET</td>
<td>文件首位置</td>
</tr>
<tr>
<td>SEEK_CUR</td>
<td>当前位置</td>
</tr>
<tr>
<td>SEEK_END</td>
<td>文件末尾处</td>
</tr>
</tbody></table>
</div></div></div>

</details>

<hr>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>将一堆不同的数据，封装到一个类型</p>
<details>
<summary>struct创建自定义类型</summary>

<ul>
<li><code>.</code> 成员访问符</li>
</ul>
<div class="tabs" id="struct的使用"><ul class="nav-tabs"><li class="tab active"><a href="#struct的使用-1">声明</a></li><li class="tab"><a href="#struct的使用-2">定义</a></li><li class="tab"><a href="#struct的使用-3">初始化</a></li><li class="tab"><a href="#struct的使用-4">访问</a></li></ul><div class="tab-content"><div class="tab-pane active" id="struct的使用-1"><blockquote>
<p>struct test{<br>int i;<br>double b;<br>char c[10];<br>};</p>
</blockquote>
</div><div class="tab-pane" id="struct的使用-2"><p>struct test t;</p>
<p>/* 声明并定义 */</p>
<blockquote>
<p>struct test{<br>int i;<br>double b;<br>char c[10];<br>}t2; </p>
<p>/* 匿名结构 */<br>struct{<br>int i;<br>double b;<br>char c[10];<br>}t3; </p>
</blockquote>
</div><div class="tab-pane" id="struct的使用-3"><p>struct test t = {<br>.i = 1,<br>.d = 1.1,<br>.c = “AAA”<br>};</p>
</div><div class="tab-pane" id="struct的使用-4"><blockquote>
<p>t.i;<br>t.b;<br>t.c;</p>
</blockquote>
</div></div></div>

</details>

<details>
<summary>union只能存储一种类型数据的数据类型</summary>

<p>联合类型，它只能存储一种类型的数值，用法和struct一样</p>
<blockquote>
<p>union u{<br>int ii,<br>double dd,<br>char cc[10]<br>};</p>
<p>struct u dx;<br>dx.ii = 11; // 此时dx里ii有值</p>
<p>dx.dd = 11.11; // 此时dx里只有dd有值，ii的值被删除了</p>
</blockquote>
</details>

<details>
<summary>enum用自定义名称，代表数值</summary>

<p>枚举类型，是一种常量，用法和struct一样</p>
<blockquote>
<p>enum e {<br>red = 1,<br>blue = 2,<br>green = 3<br>}dx_e;</p>
<p>int i = dx_e.red;</p>
</blockquote>
</details>

<details>
<summary>typedef取别名</summary>

<blockquote>
<p>typedef int mytype // mytype是int类型的别名<br>mytype i = 11; // int i = 11;</p>
</blockquote>
</details>

<hr>
<h1 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h1><details>
<summary>位运算符</summary>

<p>用来操作二进制</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>~</td>
<td>按位取反，11得0, 00得1</td>
</tr>
<tr>
<td>&amp;</td>
<td>按位与，11得1</td>
</tr>
<tr>
<td>|</td>
<td>按位或，11得1 ，10得1</td>
</tr>
<tr>
<td>^</td>
<td>按位异或，10得1， 00得0， 11得0</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移，将二进制位向左移动n位，丢弃左边的位，右边的位补0</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移，将二进制位向右移动n位，丢弃右边的位，左边的位补0</td>
</tr>
</tbody></table>
</details>

<details>
<summary>位字段</summary>

<p>用来操作二进制的第二种方法</p>
<ol>
<li><p>prnt有2个1位的字段</p>
</li>
<li><p>因为字段只有1位，所有只能赋值为0或1</p>
</li>
<li><p>可以直接通过<code>.</code>成员访问符 进行赋值</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct &#123;</span><br><span class="line">    unsigned int i0 : 1;</span><br><span class="line">    unsigned int i1 : 1;</span><br><span class="line">&#125;prnt;</span><br><span class="line"></span><br><span class="line">// 赋值</span><br><span class="line">prnt.i0 = 0;</span><br><span class="line">prnt.i1 = 1;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>prnt2里有一个2位的字段与一个8位的字段</p>
</li>
<li><p>要确保赋的值不能超过字段可容纳的大小</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct &#123;</span><br><span class="line">    unsigned int i0 : 2;</span><br><span class="line">    unsigned int i1 : 8;</span><br><span class="line">&#125;prnt2;</span><br><span class="line"></span><br><span class="line">// 赋值</span><br><span class="line">prnt2.i0 = 3;</span><br><span class="line">prnt2.i1 = 102;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>匿名字段，有值但没有名称</p>
</li>
<li><p>空洞字段，没值没名称，会迫使下一个字段与下一个整数对齐</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct &#123;</span><br><span class="line">    unsigned int i0 : 1;</span><br><span class="line">    unsigned int    : 2; // 匿名字段</span><br><span class="line">	unsigned int i2 : 1;</span><br><span class="line">	unsigned int    : 0; // 空洞字段</span><br><span class="line">	unsigned int i3 : 1; // 将会存储在一个unsigned int</span><br><span class="line">&#125;prnt2;</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h1><details>
<summary>#define宏</summary>

<p>可以创建常量与函数</p>
<ol>
<li>#创建字符串</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define NUM 11 //宏常量</span><br><span class="line"></span><br><span class="line">#define FUNC (X) ((x)*(x)) // 宏函数，需要用多个()保证正确顺序</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>#include文件包含</summary>

<table>
<thead>
<tr>
<th>写法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>#include &lt;&gt;</td>
<td>系统目录文件</td>
</tr>
<tr>
<td>#include “”</td>
<td>自定义目录文件</td>
</tr>
<tr>
<td></td></tr></tbody></table></details>
<td></td>


<details>
<summary>其他宏</summary>

<table>
<thead>
<tr>
<th>写法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>#undef name</td>
<td>取消宏定义</td>
</tr>
<tr>
<td>#ifdef name</td>
<td>if， name存储则true</td>
</tr>
<tr>
<td>#else</td>
<td>#ifdef与#ifndef的else</td>
</tr>
<tr>
<td>#ifndef name</td>
<td>name不存在则true</td>
</tr>
<tr>
<td>#endif</td>
<td>结束当前#ifdef或#ifndef</td>
</tr>
<tr>
<td>#if</td>
<td>非0则true</td>
</tr>
<tr>
<td>#elif</td>
<td>#if的else语句</td>
</tr>
<tr>
<td><strong>DATE</strong></td>
<td>预处理日期Dmm dd yyyy</td>
</tr>
<tr>
<td><strong>FILE</strong></td>
<td>当前的文件名</td>
</tr>
<tr>
<td><strong>LINE</strong></td>
<td>行号</td>
</tr>
<tr>
<td><strong>STDC</strong></td>
<td>设置为1则遵守C标准</td>
</tr>
<tr>
<td><strong>STDC_HOSTED</strong></td>
<td>设置为1则使用本机环境</td>
</tr>
<tr>
<td><strong>STDC_VERSION</strong></td>
<td>199901L表示C99，201112L表示C11</td>
</tr>
<tr>
<td><strong>TIME</strong></td>
<td>编译时间hh:mm:ss</td>
</tr>
<tr>
<td>#line</td>
<td>指令重置</td>
</tr>
<tr>
<td>#error</td>
<td>让预处理器发出错误信息</td>
</tr>
</tbody></table>
</details>

<hr>
<h1 id="C库"><a href="#C库" class="headerlink" title="C库"></a>C库</h1><details>
<summary>查看数值类型的范围</summary>

<table>
<thead>
<tr>
<th>整数类型的范围</th>
<th>浮点数类型的范围</th>
</tr>
</thead>
<tbody><tr>
<td>#include &lt;limits.h&gt;</td>
<td>#include &lt;float.h&gt;</td>
</tr>
<tr>
<td></td></tr></tbody></table></details>
<td></td>


<p>字符处理<code>#include &lt;ctype.h&gt;</code></p>
<p>C标准库<code>#include &lt;stdlib.h&gt;</code></p>
<hr>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>用垃圾组装一个nas并安装黑群晖</title>
    <url>/2020/01/03/%E7%BB%84%E8%A3%85%E4%B8%80%E4%B8%AAnas%E5%B9%B6%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/</url>
    <content><![CDATA[<p>基于一些淘汰的pc设备组装</p>
<img src="/2020/01/03/组装一个nas并安装黑群晖/封面.jpg">

<a id="more"></a>

<h1 id="组装nas"><a href="#组装nas" class="headerlink" title="组装nas"></a>组装nas</h1><blockquote>
<p>黑群辉不怎么吃cpu和内存，所以垃圾的cpu和2g内存就够了</p>
</blockquote>
<table>
<thead>
<tr>
<th><center>物品</center></th>
</tr>
</thead>
<tbody><tr>
<td>淘汰的主板与cpu <strong>(cpu推荐带核显的)</strong></td>
</tr>
<tr>
<td>2g左右的内存</td>
</tr>
<tr>
<td>一个8G左右的U盘</td>
</tr>
<tr>
<td>若干个硬盘</td>
</tr>
<tr>
<td>交换机</td>
</tr>
<tr>
<td>250W左右的电源 <strong>(推荐用大品牌的，毕竟开机时间会比较长)</strong></td>
</tr>
<tr>
<td>cpu风扇</td>
</tr>
</tbody></table>
<hr>
<h1 id="使用U盘安装黑群晖"><a href="#使用U盘安装黑群晖" class="headerlink" title="使用U盘安装黑群晖"></a>使用U盘安装黑群晖</h1><a class="btn" href="https://pan.baidu.com/s/1D-biTMeb8zf33qrzb34uew" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>下载黑群晖6.17与安装所需的工具</a>

<blockquote>
<p>插入U盘 (使用前需要格式化)</p>
<p>打开<code>ChipEasy.chs.v1.6</code><br><img src="uid.png" alt><br>VID 与 PID 后面会用到</p>
</blockquote>
<blockquote>
<p>安装并打开<code>OSFMount</code>创建一个盘<br><img src="osf.png" alt><br><img src="o2.png" alt><br>打开创建好的盘</p>
<p>修改<code>grub.cfg</code>文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set vid=0x你U盘的vid</span><br><span class="line"></span><br><span class="line">set pid=0x你U盘的pid</span><br></pre></td></tr></table></figure>

<blockquote>
<p>保存</p>
<p>返回<code>OSFMount</code>，点击<code>Dismount all&amp; Exit</code>保存<br><img src="pe.png" alt></p>
</blockquote>
<hr>
<h1 id="启动nas"><a href="#启动nas" class="headerlink" title="启动nas"></a>启动nas</h1><blockquote>
<p>u盘插入nas，启动引导为U盘</p>
<p>显示下图则表示成功<br><img src="isok.png" alt></p>
</blockquote>
<hr>
<h1 id="使用群辉系统"><a href="#使用群辉系统" class="headerlink" title="使用群辉系统"></a>使用群辉系统</h1><blockquote>
<p>安装<code>Synology Assistant</code>并打开<br><img src="sj.png" alt></p>
</blockquote>
<blockquote>
<p>安装流程</p>
<p>设置 -&gt; 手动安装 -&gt; 选择黑群晖的pat文件 -&gt; 安装</p>
<p><code>更新</code>选 手动，黑群晖无法使用<code>QuickConnect服务</code>选 跳过</p>
</blockquote>
<h2 id="添加盘"><a href="#添加盘" class="headerlink" title="添加盘"></a>添加盘</h2><p><img src="0.png" alt><br><img src="1.png" alt><br><img src="2.png" alt><br><img src="3.png" alt></p>
<hr>
<h1 id="映射黑群晖的共享目录"><a href="#映射黑群晖的共享目录" class="headerlink" title="映射黑群晖的共享目录"></a>映射黑群晖的共享目录</h1><h2 id="win10版"><a href="#win10版" class="headerlink" title="win10版"></a>win10版</h2><blockquote>
<p>流程</p>
<p>此电脑 -&gt; 网络 -&gt; 右击网络 -&gt; 映射网络驱动器<br><img src="map.png" alt></p>
</blockquote>
<h2 id="linux-centos8版"><a href="#linux-centos8版" class="headerlink" title="linux_centos8版"></a>linux_centos8版</h2><blockquote>
<p>进入GUI</p>
<p>按<code>win</code>键打开<code>Files</code><br><img src="l.png" alt></p>
</blockquote>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我使用的成本如下：</p>
<table>
<thead>
<tr>
<th>物品</th>
<th>价格</th>
</tr>
</thead>
<tbody><tr>
<td>我淘汰下来的主板与cpu (GA-F2A68HM-DS2 + AMD速龙X4 740)</td>
<td>因为我没花这部分的钱所以为0r</td>
</tr>
<tr>
<td>某宝ddr3 1333</td>
<td>17.5r</td>
</tr>
<tr>
<td>自带的8G U盘</td>
<td>0r</td>
</tr>
<tr>
<td>fast-FS05C</td>
<td>16r</td>
</tr>
<tr>
<td>aigo g3 (400w额定电源)</td>
<td>129r</td>
</tr>
<tr>
<td>某宝cpu风扇</td>
<td>20r</td>
</tr>
<tr>
<td>wd 1T蓝盘*1 (14年的库存，全新) 和wd 320G蓝盘*3 (1-4次通电的二手垃圾)</td>
<td>216r + 28r*3 = 300r</td>
</tr>
<tr>
<td>sata线*4</td>
<td>2r*4 = 8r</td>
</tr>
<tr>
<td>17.5+16+129+20+300+8</td>
<td>一共490.5r</td>
</tr>
</tbody></table>
<blockquote>
<p>可以在手机下个<code>es文件浏览器</code>，手机可以直接看到存在nas里的视频</p>
</blockquote>
<p>主要还是硬盘贵…其他的东西可以拿垃圾来凑合着用，反正只是用来存东西,日后还想继续拓展的话就要上<code>pcie阵列卡</code>和<code>移动硬盘</code></p>
<p>注意：假如不是千兆或者万兆网络，千万别把存在nas里的大型游戏直接双击打开，结果就是会卡得要死，我的是百兆网络，打开个网易云音乐都要20多秒，这个玩意是吃宽带速度的，直接运行存在nas里的软件需要慎重考虑</p>
]]></content>
      <tags>
        <tag>黑群辉</tag>
      </tags>
  </entry>
  <entry>
    <title>添加宿主机与黑群晖共享文件夹</title>
    <url>/2020/01/03/%E6%B7%BB%E5%8A%A0%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%B8%8E%E9%BB%91%E7%BE%A4%E6%99%96%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<p>用win10与vmare搭建的<code>cent8</code>与黑群晖6.17</p>
<img src="/2020/01/03/添加宿主机与黑群晖共享文件夹/封面.jpg">

<a id="more"></a>

<h1 id="共享宿主机文件夹"><a href="#共享宿主机文件夹" class="headerlink" title="共享宿主机文件夹"></a>共享宿主机文件夹</h1><p><img src="gxfile.png" alt></p>
<blockquote>
<p>设置好后，终端输入</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 命令查看当前有哪些共享的目录</span><br><span class="line">vmware-hgfsclient </span><br><span class="line"></span><br><span class="line">// 挂载所有的共享目录</span><br><span class="line">vmhgfs-fuse .host:/ /mnt/hgfs</span><br><span class="line"></span><br><span class="line">// 挂载指定的共享目录</span><br><span class="line">vmhgfs-fuse .host:/目录名 /mnt/hgfs</span><br></pre></td></tr></table></figure>

<blockquote>
<p>直接访问<code>/mnt/hgfs</code>即可查看共享了的目录</p>
</blockquote>
<hr>
<h1 id="添加黑群晖共享目录"><a href="#添加黑群晖共享目录" class="headerlink" title="添加黑群晖共享目录"></a>添加黑群晖共享目录</h1><p><img src="hqgx.png" alt></p>
<h1 id="挂载黑群晖目录"><a href="#挂载黑群晖目录" class="headerlink" title="挂载黑群晖目录"></a>挂载黑群晖目录</h1><p><img src="nfs.png" alt><br><img src="nfs2.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 安装nfs</span><br><span class="line">yum install nfs-utils -y</span><br><span class="line"></span><br><span class="line">// 检查nfs服务的黑群晖ip</span><br><span class="line">showmount -e 黑群晖ip</span><br><span class="line"></span><br><span class="line">// 创建挂载目录 (目录可自定义)</span><br><span class="line">/my_dirent/NFS_file</span><br><span class="line"></span><br><span class="line">//挂载黑群晖共享文件夹 (/Volume2/Basic_2为showmount查询的结果，每个人都不同的)</span><br><span class="line">mount -t nfs 黑群晖ip:/路径/目录名称 /my_dirent/NFS_file/ -o proto=tcp -o nolock</span><br><span class="line"></span><br><span class="line">// 查看挂载目录</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <tags>
        <tag>vmware</tag>
        <tag>黑群辉</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker搭建wordpress博客</title>
    <url>/2019/12/25/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<img src="/2019/12/25/使用docker搭建wordpress博客/封面.gif">

<p>使用<code>cent8</code>进行操作</p>
<p><code>docker</code>是一种容器技术，能将应用封装成一个镜像<br><code>wordpress</code>动态博客</p>
<a id="more"></a>

<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><h2 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h2><blockquote>
<p>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且<br>device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 设置仓库</span><br><span class="line"></span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 设置稳定的仓库</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 安装docker与其依赖</span><br><span class="line"></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p><font color="red"><strong>安装时候，出现下图的错误</strong></font></p>
<p><img src="containerd.io.png" alt></p>
<blockquote>
<p>containerd.io的版本必须&gt;=1.2.2-3<br><img src="yum_list_containerd.io.png" alt><br>yum源的containerd.io版本太低</p>
</blockquote>
<a class="btn" href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>版本较高的containerd.io</a>

<ul>
<li><p>找到下载好的安装包，直接用yum安装</p>
<blockquote>
<p><img src="rpm_install.png" alt></p>
</blockquote>
</li>
<li><p>最后，在安装docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="使用docker"><a href="#使用docker" class="headerlink" title="使用docker"></a>使用docker</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 启动[停止][重启]docker</span><br><span class="line">systemctl start[stop][restart] docker</span><br><span class="line"></span><br><span class="line">// 查看正在运行的容器</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">// 查看所有的容器(包括没有运行的)</span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">// 启动[停止][重启]容器</span><br><span class="line">docker start[stop][restart] 容器ID</span><br></pre></td></tr></table></figure>

<h2 id="更改镜像源为国内"><a href="#更改镜像源为国内" class="headerlink" title="更改镜像源为国内"></a>更改镜像源为国内</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 创建文件</span><br><span class="line"></span><br><span class="line">sudo vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener"><strong>阿里云，容器</strong></a><blockquote>
<p>注册好后，选择镜像仓库，并创建</p>
<p>然后选择镜像加速</p>
</blockquote>
</li>
</ul>
<h1 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h1><p>这个是用于定义与运行多个docker应用程序的工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 终端输入 pip 连按两下 Tab键 查看有没有pip(没有则自行百度python-pip)</span><br><span class="line"></span><br><span class="line">// 安装docker-compose</span><br><span class="line">pip3 install docker-compose</span><br><span class="line"></span><br><span class="line">// 查看docker-compose版本</span><br><span class="line">docker-compose -v</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="使用docker-compose-yml，编写一键搭建wordpress博客的配置文件"><a href="#使用docker-compose-yml，编写一键搭建wordpress博客的配置文件" class="headerlink" title="使用docker-compose.yml，编写一键搭建wordpress博客的配置文件"></a>使用docker-compose.yml，编写一键搭建wordpress博客的配置文件</h1><ul>
<li><a href="https://www.runoob.com/docker/docker-compose.html" target="_blank" rel="noopener"><strong>详细教程</strong></a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 查看所有已被占用的端口</span><br><span class="line">netstat -tulnp</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 创建文件 docker-compose.yml，并写入以下内容</span><br><span class="line"></span><br><span class="line">version: &apos;3.3&apos; # compose版本</span><br><span class="line"></span><br><span class="line">services: # 创建服务</span><br><span class="line"> db: # 创建名为 db 的对象（以下是对象参数）</span><br><span class="line">  image: mysql:5.7 # 指定容器镜像:版本</span><br><span class="line">  volumes: # 将主机的数据挂载到容器里</span><br><span class="line">   - db_data:/my_dirent/blog/wordpress/mysql</span><br><span class="line">  restart: always # 重启模式，always容器总是重新启动</span><br><span class="line">  environment: # 添加环境变量</span><br><span class="line">   MYSQL_ROOT_PASSWORD: root # mysql root密码</span><br><span class="line">   MYSQL_DATABASE: wordpress # 数据库名称</span><br><span class="line">   MYSQL_USER: wordpress # 账户</span><br><span class="line">   MYSQL_PASSWORD: wordpress # 密码</span><br><span class="line"></span><br><span class="line"> wordpress:  # 创建名为 wordpress 的对象（以下是对象参数）</span><br><span class="line">  depends_on: # 设置依赖关系，先运行依赖关系db，最后在运行wordpress</span><br><span class="line">    - db # 依赖于 db 对象</span><br><span class="line">  image: wordpress:latest # 指定容器镜像:最新版本</span><br><span class="line">  ports: # 端口</span><br><span class="line">    - &quot;8000:80&quot; # 80端口 映射到8000端口</span><br><span class="line">  restart: always # 重启模式，always容器总是重新启动</span><br><span class="line">  environment: # 添加环境变量</span><br><span class="line">    WORDPRESS_DB_HOST: db:3306 # 主机（连接到mysql）</span><br><span class="line">    WORDPRESS_DB_USER: wordpress # 账户</span><br><span class="line">    WORDPRESS_DB_PASSWORD: wordpress # 密码</span><br><span class="line">    WORDPRESS_DB_NAME: wordpress # 名称</span><br><span class="line">volumes: # 将主机的数据挂载到容器里</span><br><span class="line"> db_data: &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>注意！</code></p>
<blockquote>
<p>使用dockerfile是挂载不了目录的</p>
</blockquote>
<h2 id="使用docker-compose-yml文件"><a href="#使用docker-compose-yml文件" class="headerlink" title="使用docker-compose.yml文件"></a>使用docker-compose.yml文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 启动应用程序</span><br><span class="line">docker-compose up</span><br><span class="line"></span><br><span class="line">// 启动应用程序，并且在后台执行</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="初始化wordpress"><a href="#初始化wordpress" class="headerlink" title="初始化wordpress"></a>初始化wordpress</h1><blockquote>
<p>打开浏览器，输入<code>localhost:8000</code> 8000为映射的端口</p>
</blockquote>
<p>如果出现<code>无法连接到数据库的错误</code></p>
<blockquote>
<ol>
<li><p>重启一下linux</p>
</li>
<li><p>使用systemctl启动docker</p>
</li>
<li><p>关闭防火墙</p>
</li>
<li><p>关闭selinux</p>
</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 永久关闭selinux</span><br><span class="line">vim /etc/sysconfig/selinux</span><br><span class="line"></span><br><span class="line">// 改成以下</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="使用自定义主题"><a href="#使用自定义主题" class="headerlink" title="使用自定义主题"></a>使用自定义主题</h1><p>将下载好的主题，解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 终端运行，将宿主机的文件，拷贝到容器里</span><br><span class="line">docker cp /主题目录 容器名称:/指定的目录</span><br></pre></td></tr></table></figure>

<p>进入后端，刷新主题即可显示</p>
<hr>
<h1 id="使用内网穿透达到外网可以访问本地wordpress"><a href="#使用内网穿透达到外网可以访问本地wordpress" class="headerlink" title="使用内网穿透达到外网可以访问本地wordpress"></a>使用内网穿透达到外网可以访问本地wordpress</h1><ul>
<li><a href="http://www.nat123.com/" target="_blank" rel="noopener"><font color="red"><strong>下载nat123</strong></font></a></li>
</ul>
<p>下载，注册，登陆后</p>
<p><img src="n1.png" alt></p>
<p><img src="n2.png" alt></p>
<hr>
<h1 id="修改媒体文件最大上传大小"><a href="#修改媒体文件最大上传大小" class="headerlink" title="修改媒体文件最大上传大小"></a>修改媒体文件最大上传大小</h1><blockquote>
<p>更新软件<code>apt-get update -y</code></p>
<p>安装vim<code>apt-get install vim -y</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 进入容器，创建文件</span><br><span class="line">vim /usr/local/etc/php/conf.d/uploads.ini</span><br><span class="line"></span><br><span class="line">// 写入以下内容</span><br><span class="line"></span><br><span class="line">file_uploads = On</span><br><span class="line">memory_limit = 500M</span><br><span class="line">upload_max_filesize = 30M //可以自定义大小</span><br><span class="line">post_max_size = 30M //可以自定义大小</span><br><span class="line">max_execution_time = 600</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="增加文件上传类型"><a href="#增加文件上传类型" class="headerlink" title="增加文件上传类型"></a>增加文件上传类型</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 进入容器，修改配置文件</span><br><span class="line">vim /var/www/html/wp-config.php</span><br><span class="line"></span><br><span class="line">// 写入</span><br><span class="line">define( &apos;ALLOW_UNFILTERED_UPLOADS&apos;, true);  // 去除上传的文件类型限制</span><br></pre></td></tr></table></figure>

<h1 id="手动创建容器（可选）"><a href="#手动创建容器（可选）" class="headerlink" title="手动创建容器（可选）"></a>手动创建容器（可选）</h1><p>以下是我的容器创建的例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 这是一个bash</span><br><span class="line"></span><br><span class="line"># !/bin/bash</span><br><span class="line"></span><br><span class="line"># docker pull myql5.7 and wordpress</span><br><span class="line">function pull () &#123;</span><br><span class="line"> docker pull mysql:5.7;</span><br><span class="line"> docker pull wordpress:latest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># create mysql </span><br><span class="line"></span><br><span class="line"># --privileged=true  CentOS系统下的安全Selinux禁止了一些安全权限，导致MySQL容器 # 在运行时会因为权限不足而报错，所以需要增加该选项</span><br><span class="line"></span><br><span class="line"># -p 端口</span><br><span class="line"></span><br><span class="line"># -e 环境变量</span><br><span class="line">function create_mysql () &#123;</span><br><span class="line"> docker run -d --privileged=true --name myMysql -v /my_dirent/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -p 33306:3306 mysql:5.7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># create wordpress</span><br><span class="line"></span><br><span class="line"># &quot;WORDPRESS_DB_HOST&quot;: 链接的docker的MySQL的IP地址和端口，一般设置成mysql的表示</span><br><span class="line"># 用默认的设置</span><br><span class="line"></span><br><span class="line"># &quot;WORDPRESS_DB_USER&quot;: 以什么用户使用MySQL，默认是root</span><br><span class="line"></span><br><span class="line"># &quot;WORDPRESS_DB_PASSWORD&quot; 这设置MySQL的登陆用户密码，由于上一项是默认的root，所</span><br><span class="line"># 以这一项和之前的&quot;MYSQL_ROOT_PASSWORD“要相同</span><br><span class="line"></span><br><span class="line"># &quot;WORDPRESS_DB_NAME&quot;: 数据库的表名，不需要修改，用默认的”wordpress&quot;就行</span><br><span class="line">function create_wordpress () &#123;</span><br><span class="line">docker run -d --name mwp -e WORDPRESS_DB_HOST=mysql -e WORDPRESS_DB_PASSWORD=root -p 8000:80 --link myMysql:mysql -v /my_dirent/NFS_file:/var/www/html/data1 -v /my_dirent/NFS_file2:/var/www/html/data2 wordpress;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># start docker and create</span><br><span class="line">function all () &#123;</span><br><span class="line"> systemctl start docker;</span><br><span class="line"> pull;</span><br><span class="line"> create_mysql;</span><br><span class="line"> create_wordpress;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$1</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="wordpress文章里插入nas里的视频"><a href="#wordpress文章里插入nas里的视频" class="headerlink" title="wordpress文章里插入nas里的视频"></a>wordpress文章里插入nas里的视频</h1><ol>
<li><p>创建容器的时候，将nas的共享目录，映射到<code>/var/www/html</code>目录里</p>
</li>
<li><p>修改映射目录的权限</p>
</li>
<li><p>添加markdown插件<code>WP Githuber MD</code></p>
</li>
<li><p>视频插入写法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// width宽，height高，src视频源</span><br><span class="line">// http://192.168.32.130:8000 表示 wordpress网站地址</span><br><span class="line">// /data1/video/qyaxl/1.mp4 表示 视频目录 （nas映射目录下的文件）</span><br><span class="line"></span><br><span class="line">[video width=&quot;1280&quot; height=&quot;720&quot; mp4=</span><br><span class="line">&quot;http://192.168.32.130:8000/data1/video/qyaxl/1.mp4&quot;]</span><br><span class="line">[/video]</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>c++笔记</title>
    <url>/2019/11/25/c-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2019/11/25/c-笔记/封面.png">

<p>使用<code>g++</code>与<code>c++ primer第五版</code></p>
<a id="more"></a>

<h1 id="变量与基本类型"><a href="#变量与基本类型" class="headerlink" title="变量与基本类型"></a>变量与基本类型</h1><h2 id="算数类型"><a href="#算数类型" class="headerlink" title="算数类型"></a>算数类型</h2><p><code>算数类型</code>用于数学计算的类型（详细参考书本第30页 的表）</p>
<p><code>整数类型</code>正整数与负整数</p>
<p><code>浮点数类型</code>带小数位的数值</p>
<blockquote>
<ul>
<li><p>带_t的char类型都是Unicode的字符类型</p>
</li>
<li><p>c++规定int至少有一个short大，long至少有一个int大，long long至少有一个long大</p>
</li>
</ul>
</blockquote>
<h2 id="有符号与没符号类型的区别"><a href="#有符号与没符号类型的区别" class="headerlink" title="有符号与没符号类型的区别"></a>有符号与没符号类型的区别</h2><p><code>有符合类型</code>可以有负数（比如char的取值范围：-128 - 127）</p>
<p><code>无符合类型</code>没有负数，正数值比有符号类型大（比如char的取值范围：0 - 255）</p>
<p><strong><code>注意</code></strong>：有符号类型最好不要和无符号类型混合使用</p>
<h2 id="类型转换与强制类型转换"><a href="#类型转换与强制类型转换" class="headerlink" title="类型转换与强制类型转换"></a>类型转换与强制类型转换</h2><p><code>类型转换</code>将一个类型转换成其他的类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 例子</span><br><span class="line">// bool类型除了0之外，其他数值都为true</span><br><span class="line">bool b = 11;</span><br><span class="line"></span><br><span class="line">if(b)</span><br><span class="line">	std::cout &lt;&lt; &quot;is ok&quot; &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>

<p><code>强制类型转换</code>强制将一个类型转换为其他类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 例子</span><br><span class="line">// 将一个浮点数类型 强制转换成 一个整形 导致失去精度（后面的小数位丢失了）</span><br><span class="line">double d = 1.11;</span><br><span class="line"></span><br><span class="line">int i = (int)d; // (int)d 将变量d强制转换成int类型，并赋值给int变量i</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &quot;i = &quot; &lt;&lt; i &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>

<h2 id="字面值与转义字符"><a href="#字面值与转义字符" class="headerlink" title="字面值与转义字符"></a>字面值与转义字符</h2><p><code>字面值</code>是常量类型（书本第37页有 指定字面值类型 的表）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 例子</span><br><span class="line">int i = 11; // 11为数值字面值类型</span><br><span class="line"></span><br><span class="line">char *c = &quot;abc&quot;; // &quot;abc&quot;为字符串字面值</span><br></pre></td></tr></table></figure>

<p><code>转义字符</code>一个\加上一个字符，表示特殊意义的字符</p>
<blockquote>
<p>比如：\n 表示换行符</p>
</blockquote>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><code>变量</code>数据的类型决定了变量会占用的空间，布局，该空间能存储的值范围，能参与的运算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i; // 定义一个变量，变量名为i</span><br><span class="line"></span><br><span class="line">int a = 11; // 定义一个变量，并初始化该变量，值11就是变量a的初始值</span><br></pre></td></tr></table></figure>

<p><code>默认初始化</code>变量没有初始值，会根据变量的类型与位置进行初始化</p>
<blockquote>
<p>变量位置在函数体外，或者全局作用域，变量的默认初始值为0除此之外，变量的默认初始值为未定义的</p>
</blockquote>
<h3 id="声明与定义"><a href="#声明与定义" class="headerlink" title="声明与定义"></a>声明与定义</h3><p><code>声明</code>一般作用于分离式编译，在多个不同的文件里可以存在同名的变量名</p>
<blockquote>
<p>比如：文件A和文件B里面，都有一个int i的变量</p>
</blockquote>
<p>一个变量能被多次声明，但只能定义一次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extern int i; // 声明一个变量</span><br><span class="line"></span><br><span class="line">extern int a = 11; // 定义一个变量</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>在函数体内，初始化一个由extern标记的变量，则会出错</p>
<h2 id="标识符与作用域"><a href="#标识符与作用域" class="headerlink" title="标识符与作用域"></a>标识符与作用域</h2><p><code>标识符</code>由字母，数字，下划线组成（也就是变量名）</p>
<ul>
<li><p>变量名用的标识符，用小写的字母</p>
</li>
<li><p>自定义类的类名，第一个字母要大写</p>
</li>
<li><p>标识符有多个单词，需要用下划线区分</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int number; // 变量名</span><br><span class="line"></span><br><span class="line">class Lei; // 类名</span><br><span class="line"></span><br><span class="line">int this_number; // 有多个单词的标识符</span><br></pre></td></tr></table></figure>

<p><strong>书本第43页，c++关键字 表</strong></p>
<p><code>作用域</code>用<code>{}</code>表示程序的生命周期</p>
<blockquote>
<p>使用生命周期结束的程序，将会出错</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; // 程序从这里开始</span><br><span class="line">	int i = 11;</span><br><span class="line">&#125;; // 程序从这里结束</span><br></pre></td></tr></table></figure>

<p><strong>嵌套作用域</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; // 外部作用域</span><br><span class="line">	&#123; // 内部作用域</span><br><span class="line">		int i = 11;</span><br><span class="line">	&#125;; // 内部作用域执行到这里就结束了</span><br><span class="line"></span><br><span class="line">&#125;; // 结束外部作用域</span><br></pre></td></tr></table></figure>

<h2 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h2><p><code>复合类型</code>依赖其他类型 才能使用的类型（一个基本类型 加 一个声明符）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 多个复合类型的声明</span><br><span class="line"></span><br><span class="line">int a, *p; // 声明一个变量a 与一个指针p</span><br><span class="line"></span><br><span class="line">int *b, *c; // 声明两个指针</span><br></pre></td></tr></table></figure>

<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>可以为对象<code>取别名</code>或者获取对象的<code>地址值</code></p>
<blockquote>
<p>赋值运算符<code>=</code><strong>前的&amp;</strong>叫做取别名，<code>=</code><strong>后的&amp;</strong>叫做取地址值</p>
<p>使用别名引用，必须有值</p>
<p>别名引用一旦定义，就无法绑定到其他的对象</p>
<p><code>注意:</code>引用不是对象，只是为一个已存在的对象取别名或者取地址值</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 取别名例子</span><br><span class="line">int i = 11;</span><br><span class="line"></span><br><span class="line">int a = &amp;i; // a是i的别名，修改a等同于修改i</span><br><span class="line">/* 也可以使用这样的写法 */</span><br><span class="line">// int &amp;a = i;</span><br><span class="line"></span><br><span class="line">a = 22; // 等同于：i = 22; </span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &quot;i= &quot; &lt;&lt; i &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 取地址值例子</span><br><span class="line"></span><br><span class="line">int i = 99;</span><br><span class="line"></span><br><span class="line">int *p = &amp;i; // 指针p，指向了i的地址值</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; &amp;i &lt;&lt; std::endl; // 输出了变量i的地址值</span><br></pre></td></tr></table></figure>

<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针是一种对象，作用于地址值的操作，可以直接操作内存的方式</p>
<blockquote>
<p>获取对象的地址值，与上面 取地址值例子 一样</p>
</blockquote>
<p><code>指针值(地址值)的4种状态</code></p>
<ol>
<li><p>指向一个对象</p>
</li>
<li><p>指向 紧邻的对象（也就是指针的名称） 的下一个位置</p>
<blockquote>
<p>指针的名称指向了一个地址值，叫做<code>首地址</code></p>
<p>首地址 加上/减去 指针类型所占的位 从而使指针移动到 下一个/上一个 地址值</p>
</blockquote>
</li>
<li><p>空指针，没有指向任何对象</p>
</li>
<li><p>无效指针，以上情况以外的值</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 指针4种状态的例子</span><br><span class="line"></span><br><span class="line">int i = 11;</span><br><span class="line"></span><br><span class="line">int *p = &amp;i; // 指针 指向一个对象</span><br><span class="line"></span><br><span class="line">// p + 1; // 指针获取下一个位置</span><br><span class="line"></span><br><span class="line">int *p2 = 0; // 空指针</span><br><span class="line">int *p22; //空指针</span><br><span class="line">int *p222 = nullpter; // 空指针(c++11)</span><br><span class="line">int *p2222 = NULL; // 空指针</span><br><span class="line"></span><br><span class="line">int *p3;</span><br><span class="line"></span><br><span class="line">delete p3; // 删除指针p3</span><br><span class="line"></span><br><span class="line">// p3 = &amp;i; // 错误，无效的指针，因为指针已经被删除</span><br></pre></td></tr></table></figure>

<p><code>解引符 *</code>运行访问指针 指向 的对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i = 11;</span><br><span class="line"></span><br><span class="line">int *p = &amp;i;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; *p &lt;&lt; std::endl; // 使用解引符，获取对象i指向的值</span><br></pre></td></tr></table></figure>

<p><strong><code>注意：</code></strong>建议初始化所有的指针</p>
<h4 id="指针的赋值-与-其他指针"><a href="#指针的赋值-与-其他指针" class="headerlink" title="指针的赋值 与 其他指针"></a>指针的赋值 与 其他指针</h4><p>指针就如同变量，他的值能随意的修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 指针的赋值 例子</span><br><span class="line">int a = 11,</span><br><span class="line">    b = 22,</span><br><span class="line">	c = 33;</span><br><span class="line">	</span><br><span class="line">int *p = &amp;a;</span><br><span class="line">std::cout &lt;&lt; &quot;p= &quot; &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">p = &amp;b;</span><br><span class="line">std::cout &lt;&lt; &quot;p= &quot; &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">p = &amp;c;</span><br><span class="line">std::cout &lt;&lt; &quot;p= &quot; &lt;&lt; *p &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>

<p><code>void*</code>可以是任意类型的指针（如果需要使用指向的对象，需要进行强转）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// void*指针 例子</span><br><span class="line"></span><br><span class="line">int i = 11;</span><br><span class="line">double d = 1.11;</span><br><span class="line"></span><br><span class="line">void *vp = &amp;i; // 指向int类型对象</span><br><span class="line"></span><br><span class="line">int *p = (int*)vp;// 使用int类型指针，接收经过强转的void*类型</span><br><span class="line">std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">vp = &amp;d;</span><br><span class="line"></span><br><span class="line">double *dp = (double*)vp;</span><br><span class="line">std::cout &lt;&lt; *dp &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>

<h4 id="判断指针的合法值"><a href="#判断指针的合法值" class="headerlink" title="判断指针的合法值"></a>判断指针的合法值</h4><p>只要非0，都是正确的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 例子</span><br><span class="line"></span><br><span class="line">int i = 11;</span><br><span class="line"></span><br><span class="line">int *p = &amp;i;</span><br><span class="line"></span><br><span class="line">int *p2;</span><br><span class="line"></span><br><span class="line">if(p)</span><br><span class="line">	std::cout &lt;&lt; &quot;ok&quot; &lt;&lt; std::endl;</span><br><span class="line">	</span><br><span class="line">if(p2)</span><br><span class="line">	std::cout &lt;&lt; &quot;ok&quot; &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>

<h4 id="多级指针与指针引用"><a href="#多级指针与指针引用" class="headerlink" title="多级指针与指针引用"></a>多级指针与指针引用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 多级指针例子</span><br><span class="line"></span><br><span class="line">int i = 11;</span><br><span class="line"></span><br><span class="line">int *p = &amp;i; // 一级指针</span><br><span class="line"></span><br><span class="line">int **p2; // 二级指针</span><br><span class="line"></span><br><span class="line">int ***p3; // 三级指针（以此类推）</span><br><span class="line"></span><br><span class="line">p2 = &amp;p; // 二级指针 指向 一级指针</span><br><span class="line"></span><br><span class="line">p3 = &amp;p2; // 三级指针 指向 二级指针（以此类推）</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; ***p3 &lt;&lt; std::endl ; // 解引三级指针</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 指针引用</span><br><span class="line"></span><br><span class="line">int i = 11, *p = &amp;i;</span><br><span class="line"></span><br><span class="line">int *&amp;r = p;</span><br><span class="line"></span><br><span class="line">*r = 22;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>

<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><code>const</code>常量限定符，被该限定符修饰的对象，其值无法改变，无法修改的对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// const例子</span><br><span class="line">const int i = 11; // 编译时初始化</span><br><span class="line"></span><br><span class="line">// i = 22; // 错误</span><br><span class="line"></span><br><span class="line">const int a = sizeof(int); // 运行时初始化</span><br></pre></td></tr></table></figure>

<p><strong><code>注意：</code></strong>默认状态下，const对象仅在文件内生效</p>
<p><strong>多个文件使用同一个const声明</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 例子</span><br><span class="line"></span><br><span class="line">// 在a.h头文件</span><br><span class="line">extern const int i; //声明</span><br><span class="line"></span><br><span class="line">// main.cpp</span><br><span class="line">extern const int i = 11; // 定义</span><br></pre></td></tr></table></figure>

<p><strong><code>注意：</code></strong>在多个文件共享const对象，必须添加extern</p>
<h3 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h3><p>值不能改的别名，普通类型不能接收常量类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 常量引用例子</span><br><span class="line"></span><br><span class="line">const int i = 11;</span><br><span class="line"></span><br><span class="line">const int &amp;a = i;</span><br><span class="line"></span><br><span class="line">/* 常量引用也可以绑定非常量类型 */</span><br><span class="line">int b = 22;</span><br><span class="line"></span><br><span class="line">const int &amp;c = b; // 常量引用接收普通类型</span><br></pre></td></tr></table></figure>

<h3 id="常量指针"><a href="#常量指针" class="headerlink" title="常量指针"></a>常量指针</h3><p>常量指针只能指向常量对象，普通类型不能接收常量类型</p>
<blockquote>
<p>常量指针必须初始化，一旦初始化其值无法改变</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 例子</span><br><span class="line"></span><br><span class="line">const int i = 11;</span><br><span class="line"></span><br><span class="line">const int *p = &amp;i;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>把*放在const前，表示指针是一个常量，即指针本身是常量，指针指向的值并非常量</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 例子</span><br><span class="line">int i = 11; // 非常量</span><br><span class="line"></span><br><span class="line">int *const p = &amp;i; // 指针本身是常量， 但其值并非常量</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一个指向常量对象的常量指针</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 例子</span><br><span class="line"></span><br><span class="line">const int i = 11;</span><br><span class="line"></span><br><span class="line">const int *const p = &amp;i;</span><br></pre></td></tr></table></figure>

<h3 id="顶-底-层const"><a href="#顶-底-层const" class="headerlink" title="顶/底 层const"></a>顶/底 层const</h3><p><code>底层const</code>const在左边,可以表示任意的对象是常量，对象本身不是常量，指向的值是常量</p>
<blockquote>
<p>对象本身不是常量，对象指向的值不能修改的就是底层const</p>
</blockquote>
<p><code>顶层csont</code>const在右边，表示指针自身是常量</p>
<blockquote>
<p>对象本身就是常量的，就是顶层const</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//例子</span><br><span class="line"></span><br><span class="line">int i = 11;</span><br><span class="line"></span><br><span class="line">int *const p = &amp;i; // 顶层const，值不能修改</span><br><span class="line"></span><br><span class="line">const int i2 = 22; // 顶层const，值不能修改</span><br><span class="line"></span><br><span class="line">const int *p2 = &amp;i2; // 底层const，p2的值可以修改，指针本身不是常量，但其值是常量</span><br><span class="line"></span><br><span class="line">const int *const p3 = p2; // 左边是底层const，右边是顶层const，表示指针本身</span><br><span class="line">// 与它指向的值都是常量</span><br><span class="line"></span><br><span class="line">const int &amp;r = i2; // 声明引用的const，都是底层const</span><br></pre></td></tr></table></figure>

<blockquote>
<p>指针的值：指针指向的地址值</p>
<p>指针指向的值：指针指向的地址值，里面的值</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 值可以修改的底层const 例子</span><br><span class="line"></span><br><span class="line"> const int i  = 22;</span><br><span class="line"> const int *p = &amp;i; // 底层const，指针本身不是常量，但指针指向的值是常量</span><br><span class="line"></span><br><span class="line"> int i2 = 33;</span><br><span class="line"> p = &amp;i2; // 修改指针的值，指向非常量，int*可以转成const int*</span><br><span class="line"> std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line"> </span><br><span class="line">// *p = 44; // 错误，指针指向的值是一个常量</span><br></pre></td></tr></table></figure>

<h3 id="constexpr关键字与常量表达式"><a href="#constexpr关键字与常量表达式" class="headerlink" title="constexpr关键字与常量表达式"></a>constexpr关键字与常量表达式</h3><p><code>constexpr</code>编译时常量</p>
<p><code>常量表达式</code>值不会改变，并且编译时计算出结果的表达式</p>
<blockquote>
<p>字面值与常量对象属于常量表达式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 常量表达式 例子与误区</span><br><span class="line"></span><br><span class="line">const int i = 11; //常量表达式</span><br><span class="line"></span><br><span class="line">const int i2 = i + 1; // 常量表达式</span><br><span class="line"></span><br><span class="line">const int i3 = sizeof(int); // 不是常量表达式</span><br><span class="line">// sizeof(int)需要运行时才能得出结果，常量表达式是基于编译时得出结果</span><br><span class="line"></span><br><span class="line">/* 假如有一个函数test，返回值类型有constexpr关键字 */</span><br><span class="line">// 函数原型： constexpr int test();</span><br><span class="line"></span><br><span class="line">const int i4 = test(); // 常量表达式</span><br><span class="line">// 此处可看出，拥有constexpr关键字返回值类型的函数，也可以是常量表达式</span><br></pre></td></tr></table></figure>

<p><code>constexpr指针</code>仅对指针对象自身有效，也就是顶层const</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// constexpr 例子</span><br><span class="line"></span><br><span class="line">constexpr int *i = nullptr; // 顶层const</span><br><span class="line"></span><br><span class="line">constexpr const int *i2 = nullpter; // 顶底层const</span><br></pre></td></tr></table></figure>

<h2 id="处理类型"><a href="#处理类型" class="headerlink" title="处理类型"></a>处理类型</h2><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>字面意思，就是给类型取一个别名，方便理解与使用</p>
<blockquote>
<p>取别名的方式有两种：</p>
<ol>
<li><code>typedef</code>关键字</li>
<li><code>using</code>关键字</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 例子</span><br><span class="line"></span><br><span class="line">typedef int I; // I是int类型的别名</span><br><span class="line"></span><br><span class="line">using DB = double; // DB是double类型的别名</span><br><span class="line"></span><br><span class="line">typedef int* I_pointer; // I_pointer是int*的别名</span><br><span class="line"></span><br><span class="line">using D_pointer = double*; // D_pointer是double*的别名</span><br></pre></td></tr></table></figure>

<h3 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h3><p>声明变量时，能从值判断出类型</p>
<p><code>auto</code>关键字，类型推导，必须有初始值，而且值类型必须一样</p>
<blockquote>
<p>auto 标识符 = 需要推导的值;</p>
<p>auto会忽略掉顶层const，但会保留底层const</p>
<p>auto推导出顶层const，需要明确指出</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// auto 例子</span><br><span class="line"></span><br><span class="line">auto i = 11; // 推导出为int类型</span><br><span class="line"></span><br><span class="line">auto d = 1.11; // 推导出为double类型</span><br><span class="line"></span><br><span class="line">auto i2 = 22, *p = &amp;i2; // 推导出i2为int，p为int指针</span><br><span class="line"></span><br><span class="line">// auto a = i + d; // 错误，类型不一样</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 复合类型与const的 auto 例子</span><br><span class="line"></span><br><span class="line">int i = 11, &amp;r = i;</span><br><span class="line"></span><br><span class="line">auto a = r; //a推导出为int，相当于：auto a = i;</span><br><span class="line"></span><br><span class="line">const int c_i = 22, &amp;r2 = c_i; </span><br><span class="line"></span><br><span class="line">auto b = c_i; // b推导出为int，忽略顶层const</span><br><span class="line"></span><br><span class="line">auto c = r2; // c为int</span><br><span class="line"></span><br><span class="line">auto d = &amp;i; // d为int*</span><br><span class="line"></span><br><span class="line">auto e = &amp;c_i; // e为const int*，取常量地址是一种底层const</span><br><span class="line"></span><br><span class="line">const auto f = c_i; // f为const int，显式明确为顶层const</span><br><span class="line"></span><br><span class="line">auto &amp;g = c_i; // g为const int&amp;</span><br><span class="line"></span><br><span class="line">/* 注意：auto不能以非常量引用，绑定字面值 */</span><br><span class="line">// 错误例子： auto &amp;h = 44; // 非常量引用绑定字面值</span><br><span class="line"></span><br><span class="line">const auto &amp;j = 44; // j为const int&amp;</span><br></pre></td></tr></table></figure>

<p><code>decltype</code>返回传入参数的类型</p>
<blockquote>
<p>decltype(需要推导的类型) 标识符 = 值;</p>
<p>表达式是变量，返回变量的类型（包括顶层const）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// decltype 例子</span><br><span class="line"></span><br><span class="line">/* 往里面传入一个函数，函数原型为：int f() */</span><br><span class="line">decltype(f()) dx; // dx为int，以函数的返回值作为推导的结果</span><br><span class="line"></span><br><span class="line">int *p = nullpter;</span><br><span class="line"></span><br><span class="line">decltype(p) dx2; // dx2为int*</span><br><span class="line"></span><br><span class="line">const int i = 11, &amp;r = i;</span><br><span class="line"></span><br><span class="line">decltype(i) dx3; // dx3为const int</span><br><span class="line"></span><br><span class="line">decltype(r) dx4 = dx3; // dx4为const int&amp;，引用必须赋值，dx4是dx3的别名</span><br></pre></td></tr></table></figure>

<blockquote>
<p>假如decltype(r)的结果为int&amp;，decltype传入r+0结果是一个int，不是引用</p>
<p>假如decltype(i)的结果为int，decltype传入i=i2结果是一个引用（i2也是一个int）</p>
<ul>
<li>赋值会产生引用</li>
</ul>
<p>decltype传入指针的解引类型，将会获取引用类型</p>
<p>在decltype传入的值用一个小括号括起来，获取的结果必定是一个引用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// decltype 的引用 例子</span><br><span class="line"></span><br><span class="line">int i = 11,</span><br><span class="line">*p = &amp;i,</span><br><span class="line">&amp;r = i;</span><br><span class="line"></span><br><span class="line">decltype(r+0) dx; // dx为int</span><br><span class="line"></span><br><span class="line">int a = 1, b = 2;</span><br><span class="line">decltype(a = b) dxx; // dxx为int&amp;</span><br><span class="line"></span><br><span class="line">decltype(*p) dx2 = dx; // dx2为int&amp;</span><br><span class="line"></span><br><span class="line">decltype((i)) dx3 = dx; // dx3为int&amp;</span><br></pre></td></tr></table></figure>

<h3 id="自定义数据结构"><a href="#自定义数据结构" class="headerlink" title="自定义数据结构"></a>自定义数据结构</h3><p>数据结构是把一些相关的数据组织在一起，然后使用（也就是自定义类型）</p>
<p><code>struct</code>与<code>class</code>都可以</p>
<blockquote>
<p>struct的成员对外的默认访问权限是public（公开）</p>
<p>class的成员对外的默认访问权限是private（私有）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// struct例子</span><br><span class="line">struct S_lei&#123;</span><br><span class="line">	int i = 11;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">S_lei dx; // 此时S_lei已经是一个类型</span><br><span class="line"></span><br><span class="line">dx.i; // 成员调用符 &quot;.&quot; 获取S_lei的成员i</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// class 例子</span><br><span class="line"></span><br><span class="line">// 由于class对外的访问权限是private，所以需要添加一个对外访问权限public</span><br><span class="line"></span><br><span class="line">class C_lei&#123;</span><br><span class="line">public:	// 添加一个公开权限的接口</span><br><span class="line">	double d = 1.11;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">C_lei dx; // 创建对象</span><br><span class="line"></span><br><span class="line">dx.d; // 访问C_lei类型的成员</span><br></pre></td></tr></table></figure>

<h3 id="自定义头文件与头文件保护符"><a href="#自定义头文件与头文件保护符" class="headerlink" title="自定义头文件与头文件保护符"></a>自定义头文件与头文件保护符</h3><blockquote>
<p>自定义头文件的方法：<br>创建一个新的文件，命名方式为：自定义名称.h</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 导入自定义头文件例子</span><br><span class="line"></span><br><span class="line">// 假如有一个test.h的自定义头文件</span><br><span class="line"></span><br><span class="line">#include “test.h&quot;</span><br></pre></td></tr></table></figure>

<p><code>预处理器</code>文件编译之前执行的一段程序，以#开头的都是预处理</p>
<p><code>头文件保护符</code>保证头文件是唯一导入的，不会重复导入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 头文件保护符 例子</span><br><span class="line"></span><br><span class="line">/* 假如现在在test.h头文件里 */</span><br><span class="line"></span><br><span class="line">#ifndef 自定义名称 // 如果 ”自定义名称“宏 不存在则为真，执行以下程序</span><br><span class="line">#define 自定义名称 // 添加 “自定义名称”宏 保证该头文件不会被重复导入</span><br><span class="line"></span><br><span class="line">// 头文件内容</span><br><span class="line"></span><br><span class="line">#endif // 一旦 #ifndef 检测为真，程序将运行到这里为止</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="字符串，向量（vector），数组"><a href="#字符串，向量（vector），数组" class="headerlink" title="字符串，向量（vector），数组"></a>字符串，向量（vector），数组</h1><h2 id="命名空间的using声明"><a href="#命名空间的using声明" class="headerlink" title="命名空间的using声明"></a>命名空间的using声明</h2><p>被使用得最多的命名空间是<code>std</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 例子</span><br><span class="line"></span><br><span class="line">using namespace std; // 声明std命名空间，可以使用std里的所有内容</span><br><span class="line"></span><br><span class="line">using namespace std::cout; // 声明std命名空间里的cout，只能使用std里的cout</span><br></pre></td></tr></table></figure>

<p><code>注意：</code>头文件不应该有using声明</p>
<h2 id="标准库string字符串容器"><a href="#标准库string字符串容器" class="headerlink" title="标准库string字符串容器"></a>标准库string字符串容器</h2><p>长度可变的字符串序列</p>
<blockquote>
<p>使用前需要包含头文件：<code>#include &lt;string&gt;</code></p>
<p>string定义在std命名空间里</p>
</blockquote>
<p><code>初始化string对象</code>书本第76页</p>
<p><code>string对象的操作</code>书本第77页</p>
<h2 id="getline函数，保留字符串输入时的空白符"><a href="#getline函数，保留字符串输入时的空白符" class="headerlink" title="getline函数，保留字符串输入时的空白符"></a>getline函数，保留字符串输入时的空白符</h2><p>该函数一旦遇到换行符就结束读取，并返回结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 使用例子</span><br><span class="line"></span><br><span class="line">for(std::string tmp; std::getline(std::cin, tmp); )</span><br><span class="line">        std::cout &lt;&lt; &quot;cout: &quot; &lt;&lt; tmp &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>

<h2 id="处理字符"><a href="#处理字符" class="headerlink" title="处理字符"></a>处理字符</h2><p>导入 <code>#include &lt;cctype&gt;</code> 头文件</p>
<blockquote>
<p>该头文件拥有处理各种字符的函数，详细函数在书本的第82页的表格</p>
</blockquote>
<h2 id="标准库vector容器"><a href="#标准库vector容器" class="headerlink" title="标准库vector容器"></a>标准库vector容器</h2><p>需导入 <code>#include &lt;vector&gt;</code> 头文件</p>
<p><code>初始化对象</code>书本第87页</p>
<p><code>对象的操作</code>书本第91页</p>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>是一种指针，指向容器内某个元素</p>
<p><code>迭代器操作</code>书本第96页</p>
<p><code>string与vector的迭代器操作</code>书本第99页</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>一种长度固定的容器</p>
<blockquote>
<p>数组的长度必须是一个常量</p>
<p>数组的索引通常会使用无符号整形</p>
<p>数组对象的标识符，是一个指针，该指针指向数组内的第一个元素</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 初始化数组例子</span><br><span class="line"></span><br><span class="line">// 数组内元素的默认值根据数组定义的位置来确定</span><br><span class="line">int arr[10]; // 能储存10个int元素的数组</span><br><span class="line"></span><br><span class="line">int arr2[] = &#123;1,2,3&#125;; // 拥有3个元素的数组</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 访问数组内的元素</span><br><span class="line"></span><br><span class="line">int arr[] = &#123;2,3,4&#125;;</span><br><span class="line"></span><br><span class="line">arr[0]; // 2</span><br><span class="line"></span><br><span class="line">arr[1]; // 3</span><br><span class="line"></span><br><span class="line">arr[2]; // 4</span><br></pre></td></tr></table></figure>

<p><code>注意：</code>索引从0开始</p>
<h1 id="C风格字符串"><a href="#C风格字符串" class="headerlink" title="C风格字符串"></a>C风格字符串</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 例子</span><br><span class="line"></span><br><span class="line">char c[] = &quot;char&quot;; // 不带\n</span><br><span class="line"></span><br><span class="line">char *c2 = &quot;char&quot;; // 自带\n</span><br></pre></td></tr></table></figure>

<p><code>C风格字符串函数</code>书本第109页</p>
<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>数组的数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 例子</span><br><span class="line"></span><br><span class="line">int arr[2][4] = &#123;</span><br><span class="line">	&#123;1,2,3,4&#125;,</span><br><span class="line">	&#123;5,6,7,8&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr[0][1]; // 1</span><br><span class="line"></span><br><span class="line">arr[1][2]; //6</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><hr>
]]></content>
      <categories>
        <category>c/c++</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Unix高级环境笔记</title>
    <url>/2019/10/18/Unix%E9%AB%98%E7%BA%A7%E7%8E%AF%E5%A2%83%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2019/10/18/Unix高级环境笔记/封面.gif">

<p>基于<code>cent8</code>与<code>Unix高级环境编程第三版</code></p>
<a id="more"></a>

<h1 id="配置官网上下载的源码"><a href="#配置官网上下载的源码" class="headerlink" title="配置官网上下载的源码"></a>配置官网上下载的源码</h1><p><a href="http://apuebook.com/code3e.html" target="_blank" rel="noopener"><strong>源码下载</strong></a></p>
<p>解压文件后，将里面include目录的<code>apue.h</code>与lib目录的<code>error.c</code>拷贝到<code>usr/include</code></p>
<hr>
<h1 id="Unix基础"><a href="#Unix基础" class="headerlink" title="Unix基础"></a>Unix基础</h1><p>Unix结构：应用程序 -&gt; shell或公用函数 -&gt; 系统调用 -&gt; 内核</p>
<h2 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h2><p><code>argc</code>命令行的参数数量</p>
<p><code>argv</code>argv[0]表示程序的路径和名称，之后的都是命令行的参数</p>
<p><strong>输出文件名称以及路径，和所有命令行的参数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void func(const int &amp;argc, char **argv)&#123;</span><br><span class="line">	printf(&quot;argc: %d\n&quot;, argc);</span><br><span class="line">	for(unsigned int i = 0; i != argc; ++i)</span><br><span class="line">		printf(&quot;%s\n&quot;, argv[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)&#123;</span><br><span class="line">	func(argc, argv);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="main.png" alt></p>
<p><strong>列出目录中所有文件</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//这本书每一个程序都会有的头文件</span><br><span class="line">#include &quot;apue.h&quot;</span><br><span class="line">#include &quot;error.c&quot;</span><br><span class="line"></span><br><span class="line">// DIR和dirent</span><br><span class="line">#include &lt;dirent.h&gt;</span><br><span class="line"></span><br><span class="line">void getDir(const int &amp;argc, char **argv)&#123;</span><br><span class="line">	DIR	*dp;</span><br><span class="line">	dirent  *dirp;</span><br><span class="line"></span><br><span class="line">	// 命令行参数不等于两个则输出错误信息</span><br><span class="line">	if(argc != 2)</span><br><span class="line">		err_quit(&quot;usage: ls directory_name&quot;);</span><br><span class="line">		</span><br><span class="line">	// 命令行的参数2为路径，路径为空则输出错误信息</span><br><span class="line">	if( ( dp = opendir(argv[1]) ) == NULL )</span><br><span class="line">		err_sys(&quot;can&apos;t open %s&quot;, argv[1]);</span><br><span class="line">	</span><br><span class="line">	// 当dp获取的路径存在，将当前目录下的所有文件和目录名称都存放在dirp里</span><br><span class="line">	while( ( dirp = readdir(dp) ) != NULL) // dirp不为NULL才会输出文件和目录的名称</span><br><span class="line">		printf(&quot;%s\n&quot;, dirp-&gt;d_name);</span><br><span class="line">	</span><br><span class="line">	//释放资源</span><br><span class="line">	closedir(dp);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)&#123;</span><br><span class="line">	getDir(argc, argv);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="dir.png" alt></p>
<h2 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h2><p>不带缓冲区的I/O函数<code>open</code> <code>read</code> <code>write</code> <code>lseek</code> <code>close</code></p>
<p><strong>使用标准输入，读取一行一个字符的程序</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void my_io()&#123;</span><br><span class="line">	// 缓冲区大小</span><br><span class="line">	const int buffsize = 4096;</span><br><span class="line">	// 记录每一个字符</span><br><span class="line">	int  n;</span><br><span class="line">	// 缓冲区</span><br><span class="line">	char buf[buffsize];</span><br><span class="line">	</span><br><span class="line">	// read函数返回读取的字节数，返回0停止程序，返回-1则出现错误</span><br><span class="line">	// 循环输入字符，ctrl+d结束输入</span><br><span class="line">	while(n = read(STDIN_FILENO, buf, buffsize) &gt; 0 )</span><br><span class="line">		if(write(STDOUT_FILENO, buf, n) != n)</span><br><span class="line">			err_sys(&quot;write error&quot;);</span><br><span class="line">	</span><br><span class="line">	if(n &lt; 0)</span><br><span class="line">		err_sys(&quot;read error&quot;);</span><br><span class="line">&#125;</span><br><span class="line">		</span><br><span class="line">int main()&#123;</span><br><span class="line">	my_io();</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="io.png" alt></p>
<p><strong>vim打开test文件</strong></p>
<p><img src="io2.png" alt></p>
<p>如果使用<code>./a.out &lt;&lt; infile &gt;&gt; outfile</code>infile的内容会复制到outfile</p>
<p><strong>使用标准输入，读取一整行输入</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void my_io2()&#123;</span><br><span class="line">	// 记录每个字符</span><br><span class="line">	int c;</span><br><span class="line">	</span><br><span class="line">	while( (c = getc(stdin)) != EOF )</span><br><span class="line">		if(putc(c, stdout) == EOF)</span><br><span class="line">			err_sys(&quot;output error&quot;);</span><br><span class="line">	</span><br><span class="line">	if(ferror(stdin))</span><br><span class="line">		err_sys(&quot;input error&quot;);</span><br><span class="line">		</span><br><span class="line">int main()&#123;</span><br><span class="line">	my_io2();</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="程序与进程"><a href="#程序与进程" class="headerlink" title="程序与进程"></a>程序与进程</h2><p><strong>获取进程ID（PID）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main(int argc, char **argv)&#123;</span><br><span class="line"></span><br><span class="line">	printf(&quot;%ld\n&quot;, static_cast&lt;long&gt;(getpid()));</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>从标准输入读取命令，然后执行</strong></p>
<p>类似于shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void in_shell()&#123;</span><br><span class="line">	char buf[MAXLINE];</span><br><span class="line">	pid_t pid;</span><br><span class="line">	int status;</span><br><span class="line"></span><br><span class="line">	printf(&quot;%% &quot;);</span><br><span class="line">	</span><br><span class="line">	//fgets以\n作为结束符，但下面的execlp函数只能用null字符作为结束符</span><br><span class="line">	while(fgets(buf, MAXLINE, stdin) != NULL)&#123;</span><br><span class="line">		if(buf[strlen(buf) - 1] == &apos;\n&apos;)</span><br><span class="line">			buf[strlen(buf) - 1] = 0;</span><br><span class="line">		</span><br><span class="line">		//fork返回负数则表示出错</span><br><span class="line">		if((pid = fork()) &lt; 0)&#123;</span><br><span class="line">			err_sys(&quot;fork error&quot;);</span><br><span class="line">		&#125; else if(pid == 0)&#123;</span><br><span class="line">			//execlp执行从标准输入流读入的命令</span><br><span class="line">			execlp(buf,buf, static_cast&lt;char*&gt;(0));</span><br><span class="line">			err_ret(&quot;couldn&apos;t execute: %s&quot;, buf);</span><br><span class="line">			exit(127);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		//等待子进程终止</span><br><span class="line">		if((pid = waitpid(pid, &amp;status, 0)) &lt; 0)</span><br><span class="line">			err_sys(&quot;waitpid error&quot;);</span><br><span class="line"></span><br><span class="line">		printf(&quot;%% &quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">	in_shell();</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="出错处理"><a href="#出错处理" class="headerlink" title="出错处理"></a>出错处理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;apue.h&quot;</span><br><span class="line">#include &quot;error.c&quot;</span><br><span class="line"></span><br><span class="line">//需要头文件</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)&#123;</span><br><span class="line"></span><br><span class="line">//fprintf使用指定的流</span><br><span class="line">//sterr错误流</span><br><span class="line">//strerror将errno的值以字符串形式输出</span><br><span class="line">//errno的值定义在头文件errno.h</span><br><span class="line">//EACCES为整形常量13</span><br><span class="line">fprintf(stderr &quot;EACCES: %s\n&quot;, strerror(EACCES));</span><br><span class="line"></span><br><span class="line">//ENOENT为常量整形2</span><br><span class="line">errno = ENOENT;</span><br><span class="line"></span><br><span class="line">//perror基于errno的值产生错误消息</span><br><span class="line">perror(argv[0]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="输出用户id和该用户的组id"><a href="#输出用户id和该用户的组id" class="headerlink" title="输出用户id和该用户的组id"></a>输出用户id和该用户的组id</h2><p><code>getuid</code>函数，输出用户id</p>
<p><code>getgid</code>函数，输出当前用户的组id</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">printf(&quot;uid = %d\ngid = %d\n&quot;, getuid(), getgid());</span><br></pre></td></tr></table></figure>

<h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><p>用于通知进程发生了某种情况</p>
<p><strong>进程的三种处理信号的方式</strong></p>
<ul>
<li><p>忽略，不推荐</p>
</li>
<li><p>按系统默认方式处理，除数为0则终止程序</p>
</li>
<li><p>提供自定义的函数</p>
</li>
</ul>
<p><strong>为上面的in_shell函数，添加信号</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// +</span><br><span class="line">// 自定义信号处理</span><br><span class="line">static void sig_int(int signo)&#123;</span><br><span class="line">	printf(&quot;interrupt\n%% &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void in_shell()&#123;</span><br><span class="line">	char buf[MAXLINE];</span><br><span class="line">	pid_t pid;</span><br><span class="line">	int status;</span><br><span class="line"></span><br><span class="line">	// +</span><br><span class="line">	// signal捕获信号</span><br><span class="line">	// SIGINT终止程序</span><br><span class="line">	if(signal(SIGINT, sig_int) == SIG_ERR)</span><br><span class="line">		err_sys(&quot;signal error&quot;);</span><br><span class="line"></span><br><span class="line">	printf(&quot;%% &quot;);</span><br><span class="line">	</span><br><span class="line">	//fgets以\n作为结束符，但下面的execlp函数只能用null字符作为结束符</span><br><span class="line">	while(fgets(buf, MAXLINE, stdin) != NULL)&#123;</span><br><span class="line">		if(buf[strlen(buf) - 1] == &apos;\n&apos;)</span><br><span class="line">			buf[strlen(buf) - 1] = 0;</span><br><span class="line">		</span><br><span class="line">		//fork返回负数则表示出错</span><br><span class="line">		if((pid = fork()) &lt; 0)&#123;</span><br><span class="line">			err_sys(&quot;fork error&quot;);</span><br><span class="line">		&#125; else if(pid == 0)&#123;</span><br><span class="line">			//execlp执行从标准输入流读入的命令</span><br><span class="line">			execlp(buf,buf, static_cast&lt;char*&gt;(0));</span><br><span class="line">			err_ret(&quot;couldn&apos;t execute: %s&quot;, buf);</span><br><span class="line">			exit(127);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		//等待子进程终止</span><br><span class="line">		if((pid = waitpid(pid, &amp;status, 0)) &lt; 0)</span><br><span class="line">			err_sys(&quot;waitpid error&quot;);</span><br><span class="line"></span><br><span class="line">		printf(&quot;%% &quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="时间值"><a href="#时间值" class="headerlink" title="时间值"></a>时间值</h2><p><code>时钟时间</code>进程运行的时间总量</p>
<p><code>用户cpu时间</code>执行用户指令所用的时间量</p>
<p><code>系统cpu时间</code>为该进程执行内核所经历的时间</p>
<h2 id="系统调用和库函数"><a href="#系统调用和库函数" class="headerlink" title="系统调用和库函数"></a>系统调用和库函数</h2><p><img src="m.jpg" alt></p>
<hr>
<h1 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I/O"></a>文件I/O</h1><p>基于<code>fcntl.h</code>与<code>unistd.h</code>头文件</p>
<p><code>文件描述符</code>是一个索引（非负整数）用来访问文件，打开或新建文件内核会返回一个文件<br>描述符，文件的读写会用到文件描述符</p>
<p><code>open</code>函数与<code>openat</code>函数，打开或创建文件，openat第一个参数为文件描述符</p>
<p><code>close</code>函数，关闭打开文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;apue.h&quot;</span><br><span class="line">#include &quot;error.c&quot;</span><br><span class="line"></span><br><span class="line">// open所在地</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">// perror所在地</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)&#123;</span><br><span class="line">	if(argc != 2)</span><br><span class="line">		err_sys(&quot;input error&quot;);</span><br><span class="line">	</span><br><span class="line">	int fd; // 存放文件描述符</span><br><span class="line">	</span><br><span class="line">	// O_RDWR以读写格式打开</span><br><span class="line">	// O_CREAT如果文件不存在，则创建文件</span><br><span class="line">	// O_EXCL文件存在则出错，不存在则创建，配合O_CREATE使用</span><br><span class="line">	if((fd = open(argv[1], O_RDWR | O_CREAT | O_EXCL)) &lt; 0)&#123;</span><br><span class="line">		perror(&quot;open&quot;); // 文件描述符为负数，输出错误信息</span><br><span class="line">		return 1;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;file open\n&quot;); // 输出成功信息</span><br><span class="line">	close(fd); // 关闭文件</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>creat</code>函数，创建新文件，效果等同于<code>open(path, O_WRONLY|O_CREATE|O_TRUNC, mode)</code></p>
<p><code>lseek</code>函数，设置文件偏移量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;apue.h&quot;</span><br><span class="line">#include &quot;error.c&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)&#123;</span><br><span class="line">	if(argc != 2)</span><br><span class="line">		err_sys(&quot;input error&quot;);</span><br><span class="line">	</span><br><span class="line">	int fd;</span><br><span class="line">	if((fd = open(argv[1], O_RDWR)) &lt; 0)</span><br><span class="line">		perror(&quot;open&quot;);</span><br><span class="line">	printf(&quot;file is open\n&quot;); // 文件打开成功的提示</span><br><span class="line"></span><br><span class="line">	off_t c; // long int类型</span><br><span class="line">	// lseek设置当前偏移量（除了使用O_APPEND选项，否则偏移量都为0）</span><br><span class="line">	// SEEK_CUR当前偏移量加上函数的第二个参数（也就是10）</span><br><span class="line">	if((c = lseek(fd, 10, SEEK_CUR)) &lt; 0)</span><br><span class="line">		perror(&quot;lseek&quot;);</span><br><span class="line">	printf(&quot;seek is %d\n&quot;, c); // 不出意外，会输出当前的偏移量为10（默认的0加上10）</span><br><span class="line"></span><br><span class="line">	close(fd); // 关闭文件</span><br><span class="line">	</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>write</code>函数，从打开文件写入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;apue.h&quot;</span><br><span class="line">#include &quot;error.c&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)&#123;</span><br><span class="line">	if(argc != 2)</span><br><span class="line">		err_sys(&quot;input error&quot;);</span><br><span class="line"></span><br><span class="line">	int fd;</span><br><span class="line">	if((fd = open(argv[1], O_RDWR | O_CREAT | O_EXCL)) &lt; 0)</span><br><span class="line">		perror(&quot;open&quot;);</span><br><span class="line">	</span><br><span class="line">	printf(&quot;file is open\n&quot;);</span><br><span class="line"></span><br><span class="line">	char buf[] = &quot;abcdefghij&quot;; // 需要写的数据</span><br><span class="line"></span><br><span class="line">	if(write(fd, buf, 10) != 10) // 数据写入</span><br><span class="line">		err_sys(&quot;buf write error&quot;);</span><br><span class="line">		</span><br><span class="line">	close(fd);</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>空洞文件：</strong>文件偏移量大于当前文件长度，也就是强行增加文件大小，那些多出来的文件<br>数据，每个字节默认的数据为\0，这些多出来的数据就是文件的空洞</p>
<blockquote>
<p>空洞文件的作用有：<br>   比如下载文件，会生成一个与你所下载文件大小一样的文件，但里面没有数据，需要等待<br>下载，把数据写进这个空洞文件</p>
</blockquote>
<p><code>read</code>函数，从打开文件读取数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;apue.h&quot;</span><br><span class="line">#include &quot;error.c&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)&#123;</span><br><span class="line">	if(argc != 2)</span><br><span class="line">		err_sys(&quot;input error&quot;);</span><br><span class="line"></span><br><span class="line">	int fd;</span><br><span class="line">	if((fd = open(argv[1], O_RDWR)) &lt; 0)</span><br><span class="line">		err_sys(&quot;open error&quot;);</span><br><span class="line">	</span><br><span class="line">	const int si = 10;</span><br><span class="line">	char buf[si]; // 缓冲区，一次只读取10个字节</span><br><span class="line">	</span><br><span class="line">	ssize_t s; // 读取到的字节数</span><br><span class="line">	</span><br><span class="line">	while((s = read(fd, buf, si)) != 0)&#123; // read返回0表示读取到文件尾</span><br><span class="line">		if(s == -1) // read返回-1则表示读取错误</span><br><span class="line">			err_sys(&quot;read error&quot;);</span><br><span class="line">		printf(&quot;%d\n&quot;,s);</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试数据：</strong></p>
<blockquote>
<p>hellow<br>word!<br>12345678900</p>
</blockquote>
<p><strong>注意：</strong>记得把换行符给算进去，一共22个字节加上3个换行符的字节</p>
<p><img src="t.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 将标准输入的数据，输入到文件 */</span><br><span class="line"></span><br><span class="line">#include &quot;apue.h&quot;</span><br><span class="line">#include &quot;error.c&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)&#123;</span><br><span class="line">	if(argc != 2)</span><br><span class="line">		err_sys(&quot;input error&quot;);</span><br><span class="line"></span><br><span class="line">	// output</span><br><span class="line">	int fd2;</span><br><span class="line">	if((fd2 = open(argv[1], O_RDWR)) &lt; 0)</span><br><span class="line">		err_sys(&quot;output open error&quot;);</span><br><span class="line">	</span><br><span class="line">	int n; // 读取到的字节数</span><br><span class="line">	char buf[MAXLINE]; // 缓冲区</span><br><span class="line"></span><br><span class="line">	while((n = read(STDIN_FILENO, buf, MAXLINE)) &gt; 0)</span><br><span class="line">		if(write(fd2, buf, n) != n)</span><br><span class="line">			err_sys(&quot;write error&quot;);</span><br><span class="line"></span><br><span class="line">	if(n &lt; 0)</span><br><span class="line">		err_sys(&quot;read error&quot;);</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件共享与原子操作"><a href="#文件共享与原子操作" class="headerlink" title="文件共享与原子操作"></a>文件共享与原子操作</h2><p><strong>文件共享</strong></p>
<blockquote>
<p>每个文件或设备都有一个v节点（结构），v节点里有一个i节点（索引节点）</p>
<p>Linux没有使用v节点，而是使用i节点，虽然实现不同但概念一样</p>
</blockquote>
<p><strong>该进程有两个不同的打开文件：一个文件从标准输入打开（文件描述符0）一个文件<br>从标准输出打开（文件描述符1）</strong></p>
<p><img src="v-node.png" alt></p>
<p><strong>两个进程打开同一个文件</strong></p>
<p><img src="n-node2.jpg" alt></p>
<p><strong>原子操作：</strong>要么执行所有步骤，要么不执行</p>
<h2 id="dup返回与修改文件描述符"><a href="#dup返回与修改文件描述符" class="headerlink" title="dup返回与修改文件描述符"></a>dup返回与修改文件描述符</h2><p><code>dup</code>函数，返回当前可用的最小的文件描述符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;apue.h&quot;</span><br><span class="line">#include &quot;error.c&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">// dup函数所在地</span><br><span class="line">#include &lt;unistd.h&gt; </span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)&#123;</span><br><span class="line">	if(argc != 2)</span><br><span class="line">		err_sys(&quot;input error&quot;);</span><br><span class="line"></span><br><span class="line">	int fd;</span><br><span class="line">	if((fd = open(argv[1], O_RDWR)) &lt; 0)&#123;</span><br><span class="line">		err_sys(&quot;open error&quot;);</span><br><span class="line">		return 1;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	printf(&quot;old fd: %d\n&quot;, fd);</span><br><span class="line"></span><br><span class="line">	int n_fd; // 存储新的文件描述符</span><br><span class="line">	// 返回小于0则表示出错</span><br><span class="line">	if((n_fd = dup(fd)) &lt; 0)&#123; // 获取当前最小可用的文件描述符</span><br><span class="line">		err_sys(&quot;dup error&quot;);</span><br><span class="line">		return 1;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	printf(&quot;new fd: %d\n&quot;, n_fd); </span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>dup2</code>函数，可用修改当前的文件描述符，假如fd等于fd2则返回fd2并且不关闭它（fd2已经打开<br>的情况下，需要将其关闭）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;apue.h&quot;</span><br><span class="line">#include &quot;error.c&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">// dup2函数所在地</span><br><span class="line">#include &lt;unistd.h&gt; </span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)&#123;</span><br><span class="line">	if(argc != 2)</span><br><span class="line">		err_sys(&quot;input error&quot;);</span><br><span class="line"></span><br><span class="line">	int fd;</span><br><span class="line">	if((fd = open(argv[1], O_RDWR)) &lt; 0)&#123;</span><br><span class="line">		err_sys(&quot;open error&quot;);</span><br><span class="line">		return 1;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	printf(&quot;old fd: %d\n&quot;, fd);</span><br><span class="line"></span><br><span class="line">	int n_fd, // 存储新的文件描述符</span><br><span class="line">		new_fd = 999; // 新的文件描述符，如果该描述符已经被打开，则需要关闭它</span><br><span class="line">	</span><br><span class="line">	if((n_fd = dup2(fd, new_fd)) &lt; 0)&#123; // dup2返回小于0的数则表示错误</span><br><span class="line">		err_sys(&quot;dup2 error&quot;);</span><br><span class="line">		return 1;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	printf(&quot;new fd: %d\n&quot;, n_fd);</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="sync保证实际文件与缓冲区内容的一致性"><a href="#sync保证实际文件与缓冲区内容的一致性" class="headerlink" title="sync保证实际文件与缓冲区内容的一致性"></a>sync保证实际文件与缓冲区内容的一致性</h2><p>当写入数据时，内核会将数据复制到缓冲区，然后排入队列，延迟写入硬盘</p>
<p><code>sync</code>函数，将修改过的块缓冲区排入 写队列，然后返回（并不会等待实际写磁盘操作结束）</p>
<p><code>fsync</code>函数，只对由文件描述符指定的文件起作用（磁盘写入结束才返回）</p>
<p><code>fdatasync</code>函数，只影响文件数据部分</p>
<h2 id="fcntl修改-已打开文件-的属性"><a href="#fcntl修改-已打开文件-的属性" class="headerlink" title="fcntl修改 已打开文件 的属性"></a>fcntl修改 已打开文件 的属性</h2><p><strong>只需要主动打开文件的描述符，就可以修改描述符的属性</strong></p>
<p><code>fcntl</code>函数，出错会返回-1</p>
<p>函数原型与所属头文件：</p>
<blockquote>
<p>#include &lt;fcntl.h&gt;<br>int fcntl(int fd, int cmd, … /* int arg */)</p>
<p>fd  : 文件标识符<br>cmd : 命令,一共有11种<br>arg : 基于cmd的值，传入的第三个参数</p>
</blockquote>
<p><code>功能：</code></p>
<ol>
<li><p>复制一个已有文件描述符 </p>
</li>
<li><p>获取/设置 文件描述符标志</p>
</li>
<li><p>获取/设置 文件状态标志</p>
</li>
<li><p>获取/设置 异步I/O所有权</p>
</li>
<li><p>获取/设置 记录锁</p>
</li>
</ol>
<p><strong>例子</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;apue.h&gt;</span><br><span class="line">#include &lt;error.c&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line"></span><br><span class="line">void m(const int &amp;argc , char *argv[])&#123;</span><br><span class="line">    if(argc != 2)</span><br><span class="line">        err_quit(&quot;usage: a.out &lt;descriptor#&gt;&quot;);</span><br><span class="line"></span><br><span class="line">    int val; // 指定文件描述符</span><br><span class="line">    if((val = fcntl(atoi(argv[1]), F_GETFL, 0)) &lt; 0)</span><br><span class="line">        err_sys(&quot;fcntl error for fd %d&quot;, atoi(argv[1]));</span><br><span class="line"></span><br><span class="line">    int v = val &amp; O_ACCMODE;// 读写操作时，取出flag(标识)中的低2位</span><br><span class="line"></span><br><span class="line">        /* fcntl函数的标识 */</span><br><span class="line">        if(v = O_RDONLY)</span><br><span class="line">            printf(&quot;read only &quot;);</span><br><span class="line">        if(v = O_WRONLY)</span><br><span class="line">            printf(&quot;write only &quot;);</span><br><span class="line">        if(v = O_RDWR)</span><br><span class="line">            printf(&quot;read write &quot;);</span><br><span class="line">        else</span><br><span class="line">            err_dump(&quot;unknown access mode&quot;);</span><br><span class="line"></span><br><span class="line">    /* open函数已有的文件状态标识 */</span><br><span class="line">    if(v == O_RDONLY)</span><br><span class="line">            printf(&quot;read only &quot;);</span><br><span class="line">    else if(v == O_WRONLY)</span><br><span class="line">            printf(&quot;write only &quot;);</span><br><span class="line">    else if(v == O_RDWR)</span><br><span class="line">            printf(&quot;read write &quot;);</span><br><span class="line">	else</span><br><span class="line">            err_dump(&quot;unknown access mode&quot;);</span><br><span class="line">	</span><br><span class="line">	// _POSIX_C_SOURCE功能测试宏</span><br><span class="line">    #if !defined(_POSIX_C_SOURCE) &amp;&amp; defined(O_FSYNC) &amp;&amp; (O_FSYNC != O_SYNC)</span><br><span class="line">        if(val &amp; O_FSYNC)  </span><br><span class="line">            printf(&quot;, synchronous writes&quot;);</span><br><span class="line">    #endif</span><br><span class="line"></span><br><span class="line">    putchar(&apos;\n&apos;);</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc , char *argv[])&#123;</span><br><span class="line">    m(argc, argv);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="fcntl_test.png" alt></p>
<blockquote>
<p>第一个为输出文件状态标志</p>
<p>第二个为将文件状态标志输入到文件</p>
<p>第三个为修改文件描述符标志，改为写追加模式</p>
<p>第四个为修改文件描述符标志，改为读写模式</p>
</blockquote>
<h2 id="ioctl-I-O操作的杂物箱（终端I-O最常用的）"><a href="#ioctl-I-O操作的杂物箱（终端I-O最常用的）" class="headerlink" title="ioctl I/O操作的杂物箱（终端I/O最常用的）"></a>ioctl I/O操作的杂物箱（终端I/O最常用的）</h2><p>作用于：文件IO，磁带IO，套接字IO，终端IO</p>
<blockquote>
<p>#include &lt;unistd.h&gt;</p>
<p>#include &lt;sys/ioctl.h&gt;<br>int ioctl(int fd, int request, …)<br>返回值：出错返回-1</p>
<p>fd : 文件描述符<br>request : 一个依赖于设备的请求</p>
</blockquote>
<h2 id="dev-fd目录"><a href="#dev-fd目录" class="headerlink" title="/dev/fd目录"></a>/dev/fd目录</h2><p>里面有0,1,2,3等文件，打开这些文件，等同于复制描述符（假定描述符是打开的）</p>
<blockquote>
<p>fd = open(“/dev/fd/0”, mode) 等同于 fd = dup(0)</p>
</blockquote>
<p>作用：/dev/fd目录里的文件主要由shell使用，提高文件名参数的一致性，看起来更加清晰</p>
<h2 id="3-2练习，实现dup2，但不使用fcntl"><a href="#3-2练习，实现dup2，但不使用fcntl" class="headerlink" title="3.2练习，实现dup2，但不使用fcntl"></a>3.2练习，实现dup2，但不使用fcntl</h2><hr>
]]></content>
      <categories>
        <category>Unix</category>
      </categories>
  </entry>
  <entry>
    <title>Unix网络编程（套接字联网API）笔记</title>
    <url>/2019/10/17/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E5%A5%97%E6%8E%A5%E5%AD%97%E8%81%94%E7%BD%91API%EF%BC%89%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2019/10/17/Unix网络编程（套接字联网API）笔记/封面.gif">

<p>基于CentOS8,与书籍<code>Unix网络编程卷1</code></p>
<a id="more"></a>

<h1 id="配置unp-h头文件"><a href="#配置unp-h头文件" class="headerlink" title="配置unp.h头文件"></a>配置unp.h头文件</h1><p><a href="http://www.unpbook.com/src.html" target="_blank" rel="noopener"><strong>源码下载</strong></a></p>
<p>解压后，会有一个<code>unpv13e</code>目录</p>
<blockquote>
<p>进入目录输入<code>./configure</code></p>
<p>打开README文件，按里面顺序进行make（我只make了前两个）</p>
<p>此时<code>unpv13e</code>目录会生成一个<code>libunp.o</code>文件，将这个文件拷贝到/usr/lib<code>和</code>/usr/lib64/</p>
<p>将unpv13e目录下的~config.h<code>文件和unpv13e/lib目录下的</code>unp.h`文件拷贝到/usr/include目录下</p>
<p>打开拷贝过去的<code>unp.h</code>文件，<code>#include &quot;../config.h&quot;</code>改成<code>#include &quot;config.h</code></p>
<p>在<code>unp.h</code>中需要添加一行<code>#define MAX_LINE 2048</code></p>
</blockquote>
<p><strong>unpv13e/libfree目录下 make报错</strong></p>
<blockquote>
<p>打开<code>inet_ntop.c</code>文件<br>在所有头文件下面加入<code>#define size_t socklen_t</code><br>重新make即可</p>
</blockquote>
<ul>
<li>unp.h使用方法：直接添加头文件<code>#include &quot;unp.h&quot;</code></li>
</ul>
<p>使用的时候出现了：</p>
<p><img src="err.png" alt></p>
<p>这些函数没有实现，实现这些的函数在<code>unpv13e/lib/error.c</code>头文件里</p>
<p>将<code>error.c</code>拷贝到lib/include在main函数里<code>#include &quot;unp.h&quot;</code>下方添加即可</p>
<div class="tabs" id="参考"><ul class="nav-tabs"><li class="tab active"><a href="#参考-1">参考 1</a></li><li class="tab"><a href="#参考-2">参考 2</a></li><li class="tab"><a href="#参考-3">参考 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="参考-1"><p><a href="https://blog.csdn.net/u011068702/article/details/60970131" target="_blank" rel="noopener"><strong>参考</strong></a></p>
</div><div class="tab-pane" id="参考-2"><p><a href="https://www.cnblogs.com/wuyuegb2312/articles/2455902.html" target="_blank" rel="noopener"><strong>参考2</strong></a></p>
</div><div class="tab-pane" id="参考-3"><p><a href="https://www.jianshu.com/p/a0037f327b96" target="_blank" rel="noopener"><strong>参考3</strong></a></p>
</div></div></div>

<hr>
<h1 id="使用下载的源文件"><a href="#使用下载的源文件" class="headerlink" title="使用下载的源文件"></a>使用下载的源文件</h1><p>使用图1-5的时间获取客户程序</p>
<ol>
<li><p>打开<code>unpv13e/intro</code>目录，然后执行<code>make</code>目录</p>
</li>
<li><p><code>./daytimetcpsrv</code>执行文件，打开服务器</p>
</li>
<li><p>打开另一个终端，执行<code>./daytimetcpcli 你的IP</code></p>
</li>
</ol>
<hr>
<h1 id="OSI模型"><a href="#OSI模型" class="headerlink" title="OSI模型"></a>OSI模型</h1><p><img src="OSI.png" alt></p>
<hr>
<h1 id="网络细节命令"><a href="#网络细节命令" class="headerlink" title="网络细节命令"></a>网络细节命令</h1><p><code>ifconfig</code>每个接口的详细信息</p>
<p><code>netstat [选项]</code> <code>n</code>输出数值地址<code>i</code>提供网络接口信息<code>r</code>展示路由表</p>
<hr>
<h1 id="POSIX"><a href="#POSIX" class="headerlink" title="POSIX"></a>POSIX</h1><p>POSIX可移植操作系统接口</p>
<hr>
<h1 id="64位体系结构"><a href="#64位体系结构" class="headerlink" title="64位体系结构"></a>64位体系结构</h1><p>每个进程内部可以由此时用更长的编址长度（即64位指针），从而可以寻址很大的内存空间</p>
<p>64位Unix模型称为LP64（L长整数，P指针）占用64位</p>
<hr>
<h1 id="传输层：TCP-UDP-SCTP"><a href="#传输层：TCP-UDP-SCTP" class="headerlink" title="传输层：TCP,UDP,SCTP"></a>传输层：TCP,UDP,SCTP</h1><p>UDP：无连接协议，速度快，不保证数据会到达目的地，缺乏可靠性</p>
<p>TCP：面向协议，先与服务器建立连接，需要三次握手，可靠</p>
<p>SCTP：面向消息，提供多宿特性（使单个端点支持多个IP），四次握手</p>
<h2 id="TCP链接分组交换图"><a href="#TCP链接分组交换图" class="headerlink" title="TCP链接分组交换图"></a>TCP链接分组交换图</h2><p><img src="tcp.jpg" alt></p>
<h2 id="SCTP分组交换图"><a href="#SCTP分组交换图" class="headerlink" title="SCTP分组交换图"></a>SCTP分组交换图</h2><p><img src="sctp.jpg" alt></p>
<h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>16位整数，用于区分TPC,UDP,SCTP的进程</p>
<p><code>LANA</code>因特网已经分配数值权威机构</p>
<ul>
<li><p>0-1023端口由LANA控制</p>
</li>
<li><p>1024-49151由LANA登记使用情况，不控制</p>
</li>
<li><p>49152-65535动态端口，LANA不管</p>
</li>
</ul>
<h2 id="TCP与并发服务器图"><a href="#TCP与并发服务器图" class="headerlink" title="TCP与并发服务器图"></a>TCP与并发服务器图</h2><p><img src="tcp%E5%B9%B6%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt> </p>
<h2 id="缓冲器大小以及限制"><a href="#缓冲器大小以及限制" class="headerlink" title="缓冲器大小以及限制"></a>缓冲器大小以及限制</h2><p><code>MTU</code>最大传输单元</p>
<p><code>特大净荷</code>IPv6特有选项，需要MTU</p>
<p><code>IPv4</code>最大65535字节，总长度字段16位，最小MTU为64字节,最小重组缓冲区为576字节</p>
<p><code>IPv6</code>最大65575字节，可以用特大净荷将字段长度拓展到32位，最小MTU为1280字节，最小重组缓冲区为1500字节</p>
<hr>
<h1 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h1><p>大多数套接字函数都需要一个指向套接字地址结构的指针作为参数</p>
<p>套接字地址结构，以引用传递</p>
<p><code>#include &lt;netlinet/in.h&gt;</code>网络套接字地址结构，POSIX数据类型</p>
<p><code>#include &lt;strings.h&gt;</code>字节操作</p>
<hr>
]]></content>
      <categories>
        <category>Unix</category>
      </categories>
      <tags>
        <tag>套接字</tag>
      </tags>
  </entry>
  <entry>
    <title>linux基础笔记</title>
    <url>/2019/10/08/linux%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2019/10/08/linux笔记/封面.gif">

<p>基于<code>Cent8</code>与书籍<code>鸟哥的LINUX私房菜基础篇第四版</code></p>
<a id="more"></a>

<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p><code>tab按键</code>名称补全</p>
<p><code>ctrl按键+c</code>中断目前程序</p>
<p><code>ctrl按键+d</code>exit</p>
<p><code>shift按键+page up</code>上一页</p>
<p><code>shift按键+page down</code>下一页</p>
<p><code>date</code>时间</p>
<p><code>cal</code>日历</p>
<p><code>clear</code>清屏</p>
<p><code>su [用户名]</code>切换用户，不输入用户名则切换到root</p>
<p><code>ls [-aid]</code>查看当前目录所有文件的名称，<code>a</code>显示隐藏目录和文件<code>i</code>查看节点编号<code>d</code>区块存储大小</p>
<p><code>ll [-aid]</code>查看当前目录所有文件的名称和权限</p>
<p><code>man [命令]</code>获取该命令的使用说明</p>
<p><code>cp 文件 指定目录</code>拷贝文件</p>
<p><code>mv 文件 指定目录</code>移动文件</p>
<p><code>rm [-rf] 文件</code>删除文件/目录<code>r</code>递归<code>f</code>强制删除</p>
<p><code>cd 目录</code>.表示当前目录，..表示父目录</p>
<p><code>pwd</code>查看当前目录</p>
<p><code>mkdir 名称</code>创建目录</p>
<p><code>touch 名称</code>创建文件</p>
<p><code>chmod 权限 文件</code>修改文件的权限</p>
<p><code>file 文件</code>查看文件类型</p>
<table>
<thead>
<tr>
<th align="left">r</th>
<th align="left">w</th>
<th align="left">x</th>
<th align="left">0</th>
<th align="left">5</th>
<th align="left">7</th>
</tr>
</thead>
<tbody><tr>
<td align="left">读</td>
<td align="left">写</td>
<td align="left">可执行</td>
<td align="left">权限清空</td>
<td align="left">读与可执行</td>
<td align="left">全部权限</td>
</tr>
</tbody></table>
<p><strong>注意：数字最多只能有三个，分别表示：用户，组，其他用户</strong></p>
<table>
<thead>
<tr>
<th align="left">写法</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u-rwx</td>
<td align="left">取消用户的读取，写入，执行</td>
</tr>
<tr>
<td align="left">g-rwx</td>
<td align="left">取消组的读取，写入，执行</td>
</tr>
<tr>
<td align="left">o-rwx</td>
<td align="left">取消其他用户的读取，写入，执行</td>
</tr>
<tr>
<td align="left">u+rwx</td>
<td align="left">添加用户的读取，写入，执行</td>
</tr>
<tr>
<td align="left">g+rwx</td>
<td align="left">添加组的读取，写入，执行</td>
</tr>
<tr>
<td align="left">o+rwx</td>
<td align="left">添加其他用户的读取，写入，执行</td>
</tr>
</tbody></table>
<p><strong>注意：rwx是可选择的，不一定要全写，写入你希望的权限就行了</strong></p>
<p><code>yum list</code>查看可以使用yum能下载的软件，通过<code>yum install 软件名</code>进行下载，install换成remove则是删除</p>
<p><code>find 查找目录 [-name] &quot;查找名称&quot;</code>查找文件，find的使用条件所查找的路径必须具有读权限</p>
<p><code>grep [-iv] 需要查找的字符串 文件</code>过滤，往指定文件查找字符串，<code>i</code>忽略大小写<code>v</code>查出不包含字符串的结果</p>
<p><code>管道符|</code>将一个进程的输出作为另一个进程的输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 显示所有在/my_test目录找到的有关键字main.cpp的文件，并输出详细信息</span><br><span class="line">ll /my_test | grep -i main.cpp</span><br></pre></td></tr></table></figure>

<p><code>reboot</code>重启</p>
<p><code>shutdown [-h] [时间]</code>设置关机时间，时间处设置<code>now</code>则立刻关机</p>
<p><code>ping [-c&lt;n&gt;] 网页</code>测试这个网页的ping，<code>c</code>测试测试次数</p>
<p><code>ifconfig</code>查看和配置当前机器的网络参数信息</p>
<p><code>chattr [+-=] [ai] 文件或目录</code>设置隐藏属性<code>a</code>只能增加数据，不能删和改<code>i</code>不能删改写只有root才能设置</p>
<p><strong><code>+</code>添加特设参数，<code>-</code>删除特殊参数，<code>=</code>直接设置特殊参数</strong></p>
<hr>
<h1 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h1><p><code>vim 文件名</code>如果没有该文件就会创建一个空文本</p>
<p>按<code>:</code>输入使用命令</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">wq</td>
<td align="left">保存</td>
</tr>
<tr>
<td align="left">q!</td>
<td align="left">不保存，并退出vim</td>
</tr>
<tr>
<td align="left">i</td>
<td align="left">往文件输入内容</td>
</tr>
<tr>
<td align="left">esc按钮</td>
<td align="left">取消当前命令，进入重新输入命令界面</td>
</tr>
</tbody></table>
<hr>
<h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><p><code>echo 环境变量名</code>查看该环境变量里所有的路径</p>
<p><code>export 环境变量名=路径:$环境变量名</code>设置临时环境变量`设置临时环境变量</p>
<p><strong>注意：多个路径用<code>:</code>进行分隔</strong></p>
<p><strong>设置永久环境变量</strong></p>
<blockquote>
<p>打开<code>vim /etc/profile</code>文件<br>在文件末尾处输入临时环境变量<br>保存<br>命令行输入<code>source /etc/profile</code>立即使用该配置文件</p>
</blockquote>
<h1 id="linux的ext2文件系统"><a href="#linux的ext2文件系统" class="headerlink" title="linux的ext2文件系统"></a>linux的ext2文件系统</h1><p>这是linux最传统的磁盘文件</p>
<p><code>数据区块</code>是用来存放文件数据的地方</p>
<p><strong>ext2支持的区块</strong></p>
<table>
<thead>
<tr>
<th align="left">限制</th>
<th align="left">1K区块</th>
<th align="left">2K区块</th>
<th align="left">4K区块</th>
</tr>
</thead>
<tbody><tr>
<td align="left">最大单一文件</td>
<td align="left">16G</td>
<td align="left">256G</td>
<td align="left">2TB</td>
</tr>
<tr>
<td align="left">最大文件系统总容量</td>
<td align="left">2TB</td>
<td align="left">8TB</td>
<td align="left">16TB</td>
</tr>
</tbody></table>
<ul>
<li><p>如果需要修改区块大小与数量，必须格式化</p>
</li>
<li><p>每个区块只能存放一个文件的数据，如果一个文件的数量大于区块的大小，则这个文件会占用多个区块，<br>如果这个文件小于区块的大小，这个区块的剩余容量将不能被使用，造成了空间浪费</p>
</li>
<li><p>文件系统最前面有个可以安装引导的启动扇区</p>
</li>
</ul>
<h2 id="inode-节点-表"><a href="#inode-节点-表" class="headerlink" title="inode(节点)表"></a>inode(节点)表</h2><p>记录文件属性以及文件实际数据存放的区块</p>
<ul>
<li><p>文件的读写属性</p>
</li>
<li><p>文件拥有者与组</p>
</li>
<li><p>文件大小</p>
</li>
<li><p>文件建立与修改时间</p>
</li>
<li><p>最后一次读取时间</p>
</li>
<li><p>最近修改时间</p>
</li>
<li><p>文件的特性标识</p>
</li>
<li><p>文件真正内容的指向</p>
</li>
<li><p>每个文件只会占用一个inode，能建立的文件数量与节点数量有关</p>
</li>
<li><p>系统读取文件先找inode并分析所记录的权限与用户是否符合，符合则读取区块的内容</p>
</li>
<li><p>inode固定大小为128，256B，记录一个数据需要4B，假如超出inode大小则会出现间接记录区</p>
</li>
</ul>
<p><code>间接分区</code>就是再拿一块分区来当作记录区块号码的记录区，文件太大就会使用间接的分区来记录编号</p>
<p><img src="inode.jpg" alt></p>
<p>节点 -&gt; [间接区块] -&gt; 区块</p>
<h2 id="superblock超级区块"><a href="#superblock超级区块" class="headerlink" title="superblock超级区块"></a>superblock超级区块</h2><p>记录整个文件系统相关信息，没有超级区块就没有文件系统</p>
<ul>
<li><p>区块与inode的总量</p>
</li>
<li><p>未使用的inode与区块数量</p>
</li>
<li><p>区块与inode的大小（区块为1k,2k,4k,inode为128b,256b）</p>
</li>
<li><p>文件系统的挂载时间，系统信息</p>
</li>
<li><p>有效位数值，被挂载为0，未挂载为1</p>
</li>
</ul>
<hr>
<h1 id="VFS"><a href="#VFS" class="headerlink" title="VFS"></a>VFS</h1><p>用来管理所有的文件系统，了解即可</p>
<hr>
<h1 id="xfs文件系统"><a href="#xfs文件系统" class="headerlink" title="xfs文件系统"></a>xfs文件系统</h1><p>日志文件系统，文件系统恢复速度，创建速度快</p>
<p><strong>主要规划为：</strong></p>
<p><code>数据区</code>有节点，数据区块，超级区块数据，区块可在512b-64k调整，节点可在256b-2m调整</p>
<p><code>文件系统活动登陆区</code>文件的变化会被记录，直到变化完整写入到数据区，该记录才会结束。假如发生意外<br>（例如停电）导致文件系统损坏，系统会拿这个登录区进行校验，查看在系统出意外前，文件系统在做什么操作，<br>借此快速修复文件系统 </p>
<p><code>实时运行区</code>当文件要被建立时，会在这个区段里找数个extent区块，将文件存放到这个区块，等分配完后，<br>在写入到数据段和节点与区块中，这个extent的大小在格式化时先指定，4K-1G，extent的调整可能会影响到<br>物理硬盘的性能</p>
<hr>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>用于文件的共享</p>
<h2 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h2><p>通过系统的节点链接产生新文件名</p>
<p><strong>硬链接只是在某个目录下新增一条文件名，链接到某个节点编号的关联记录</strong></p>
<p><code>ln 源文件 目标文件</code>建立硬链接</p>
<p>硬链接的限制为：不能跨文件系统于链接目录</p>
<h2 id="符号链接（软链接）"><a href="#符号链接（软链接）" class="headerlink" title="符号链接（软链接）"></a>符号链接（软链接）</h2><p>类似于快捷键</p>
<p>软连接就是建立一个独立文件，这个文件会让数据的读取指向它链接的那个文件的文件名，由于只是利用文件<br>来做为指向的操作，当源文件被删除，软链接的文件就会打不开</p>
<p><code>ln -sf 源文件 目标文件</code>添加了<code>s</code>选项就变成了软链接，<code>f</code>为强制执行</p>
<hr>
<h1 id="观察磁盘分区状态"><a href="#观察磁盘分区状态" class="headerlink" title="观察磁盘分区状态"></a>观察磁盘分区状态</h1><p><code>lsblk [-] 设备</code>列出所有磁盘列表</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-i</td>
<td align="left">ASCII字符输出</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">列出设置的完整名称</td>
</tr>
</tbody></table>
<ul>
<li><p><code>NAME</code>设备名</p>
</li>
<li><p><code>MAJ:MIN</code>内核识别设备</p>
</li>
<li><p><code>RM</code>设备是否可卸载（比如移动硬盘之类的）</p>
</li>
<li><p><code>SIZE</code>容量</p>
</li>
<li><p><code>RO</code>是否为只读</p>
</li>
<li><p><code>TYPE</code>类型，disk为磁盘，partition为分区，rom只读存储器</p>
</li>
<li><p><code>MOUNTPOINT</code>挂载点</p>
</li>
</ul>
<h2 id="列出设备的UUID（全局唯一标识符）"><a href="#列出设备的UUID（全局唯一标识符）" class="headerlink" title="列出设备的UUID（全局唯一标识符）"></a>列出设备的UUID（全局唯一标识符）</h2><p>该标识符是独一无二的，可以拿来挂载或使用这个设备的文件系统</p>
<p><code>blkid</code>列出设备的UUID</p>
<h2 id="列出分区类型与信息"><a href="#列出分区类型与信息" class="headerlink" title="列出分区类型与信息"></a>列出分区类型与信息</h2><p><code>parted 磁盘名称 print</code></p>
<ul>
<li><p><code>Model</code>磁盘模块名称</p>
</li>
<li><p><code>Disk</code>磁盘总容量</p>
</li>
<li><p><code>Sector size</code>磁盘的每个逻辑、物理扇区容量</p>
</li>
<li><p><code>partition Table</code>分区表格式</p>
</li>
</ul>
<hr>
<h1 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h1><h2 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h2><p>MBR用该分区</p>
<p><code>fdisk 磁盘名</code>打开fdisk</p>
<h2 id="gdisk"><a href="#gdisk" class="headerlink" title="gdisk"></a>gdisk</h2><p>GPT用该分区</p>
<p><code>gdisk 磁盘名</code>打开fdisk</p>
<ul>
<li><p><code>d</code>删除一个分区</p>
</li>
<li><p><code>n</code>增加一个分区</p>
</li>
<li><p><code>p</code>打印出分区表</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Number</td>
<td align="left">分区编号，/dev/xx1这样计算</td>
</tr>
<tr>
<td align="left">Start</td>
<td align="left">每个分区的开始扇区位置</td>
</tr>
<tr>
<td align="left">End</td>
<td align="left">每个分区的结束扇区位置，End-Start可获取分区总容量</td>
</tr>
<tr>
<td align="left">Size</td>
<td align="left">分区容量</td>
</tr>
<tr>
<td align="left">Code</td>
<td align="left">分区文件类型，Linux为8300，swap为8200，这只是一个提示</td>
</tr>
</tbody></table>
<ul>
<li><p><code>q</code>不保存分区直接离开</p>
</li>
<li><p><code>w</code>保存操作后离开</p>
</li>
</ul>
<h3 id="新增分区"><a href="#新增分区" class="headerlink" title="新增分区"></a>新增分区</h3><p>打开<code>gisk</code>输入<code>p</code>查看磁盘信息，以此信息为主来进行新分区的设置</p>
<p>输入<code>n</code>新增分区</p>
<p><img src="gdisk.png" alt></p>
<p>最后按<code>w</code>保存</p>
<h2 id="删除分区"><a href="#删除分区" class="headerlink" title="删除分区"></a>删除分区</h2><p>输入<code>d</code>删除分区</p>
<p><img src="gdisk2.png" alt></p>
<p>最后按<code>w</code>保存</p>
<hr>
<h1 id="磁盘格式化"><a href="#磁盘格式化" class="headerlink" title="磁盘格式化"></a>磁盘格式化</h1><h2 id="XFS文件系统mkfs-xfs"><a href="#XFS文件系统mkfs-xfs" class="headerlink" title="XFS文件系统mkfs.xfs"></a>XFS文件系统mkfs.xfs</h2><p><code>mkfs.xfs 分区编号</code>对该分区进行格式化</p>
<p><strong>为格式化添加cpu参数，可增加速度</strong></p>
<p><code>grep &#39;processor&#39; /proc/cpionfo</code>查看cpu数量</p>
<p><code>mkfs.xfs -f -d agcount=cpu数量 分区编号</code>为分区设置cpu参数<code>d</code>重要的相关参数<code>f</code>强制格式化</p>
<table>
<thead>
<tr>
<th align="left">-d可以设置的常用参数</th>
</tr>
</thead>
<tbody><tr>
<td align="left">agcount=数值，设置存储群组，与cpu有关</td>
</tr>
<tr>
<td align="left">su=数值，有RAID时，分区区块stripe数值的意思，与sw配合使用</td>
</tr>
<tr>
<td align="left">sw=数值</td>
</tr>
<tr>
<td align="left">swidth=数值，就是su*sw的数值，以几个sector（512b大小）来设置</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">-r指定realtime section相关设置</th>
</tr>
</thead>
<tbody><tr>
<td align="left">extsize=数值，一般不设置，有RAID时最好设置与swidth的数值相同，最小4k最大1G</td>
</tr>
</tbody></table>
<p><strong>XFS for RAID性能优化</strong></p>
<p>文件 -&gt; 分成许多小型的分区区块 -&gt; 存储到磁盘阵列的所有硬盘里</p>
<p><code>RAID</code>磁盘阵列，多块硬盘组成一大块硬盘，利用同步写入技术，可以加快写入速度，并且出现坏盘时整个<br>文件系统还可以继续运行，提高容错率与速度</p>
<p>磁盘阵列就是将文件细分为多个小型的<code>分区区块stripe</code>然后将众多的分区区块放到磁盘阵列里面的所有磁盘，所以<br>一个文件会同时写入到多个磁盘里，为了安全，会保留数个与磁盘阵列的规划有关的校验磁盘，以及一个或以上<br>的备用磁盘</p>
<p><code>数据宽度swidth</code> = <code>分区区块stripe</code> * <code>磁盘数量（需要扣除备份与备用盘）</code></p>
<p><code>extent大小</code> = <code>数据宽度swidth</code></p>
<p><code>sunit</code> = <code>分区区块</code> / 512b * 1024b/k = <code>sector扇区</code></p>
<p><code>swidth数据宽度</code> = <code>磁盘数量（需要扣除备份与备用盘）</code> * <code>sunit</code> = <code>sector扇区</code></p>
<h2 id="ext4文件系统mkfs-ext4"><a href="#ext4文件系统mkfs-ext4" class="headerlink" title="ext4文件系统mkfs.ext4"></a>ext4文件系统mkfs.ext4</h2><p><code>mkfs.ext4 [-bL] 设备名称</code>使用mkfs.ext4<code>b</code>设置区块大小1k，2k，4k<code>L</code>格式化为ext4文件系统</p>
<h2 id="其他文件系统"><a href="#其他文件系统" class="headerlink" title="其他文件系统"></a>其他文件系统</h2><p><code>mkfs 按两下tab</code>查看其他文件系统</p>
<p><code>mkfs [-t] 文件系统格式 分区</code>格式化分区为指定格式</p>
<hr>
<h1 id="文件系统校验"><a href="#文件系统校验" class="headerlink" title="文件系统校验"></a>文件系统校验</h1><p>系统死机导致文件错乱时使用，可以检查和修复系统，修复时该文件系统不能挂载，必须要处于卸载的状态</p>
<h2 id="xfs-repair处理XFS系统"><a href="#xfs-repair处理XFS系统" class="headerlink" title="xfs_repair处理XFS系统"></a>xfs_repair处理XFS系统</h2><p><code>xfs_repair [-fnd] 设备名</code>校验/修复设备<code>f</code>是文件不是设备<code>n</code>检查<code>d</code>单人维护模式下，强制校验，针对<br>根目录进行检查与修复，不要随意用</p>
<h2 id="fsck-ext4处理ext4文件系统"><a href="#fsck-ext4处理ext4文件系统" class="headerlink" title="fsck.ext4处理ext4文件系统"></a>fsck.ext4处理ext4文件系统</h2><p><code>fsck.ext4 [-pf] [-b 超级区块] 设备名</code>检查/修复设置<code>p</code>自动回复y<code>f</code>强制检查</p>
<hr>
<h1 id="文件系统挂载与卸载"><a href="#文件系统挂载与卸载" class="headerlink" title="文件系统挂载与卸载"></a>文件系统挂载与卸载</h1><ul>
<li><p>单一文件系统不应该被重复挂载在不同的挂载点（目录）中</p>
</li>
<li><p>单一目录不应该重复挂载多个系统</p>
</li>
<li><p>作为挂载点的目录，需要为空目录</p>
</li>
</ul>
<h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p><code>mount [-alo] [-t 文件系统 &lt;UUID=&#39;&#39; 挂载点&gt;]</code> <code>a</code>依照配置文件将/etc/fstab的所有未挂载的磁盘都挂载<br><code>l</code>显示目前挂载的信息<code>o</code>额外参数</p>
<p><strong>-o的额外参数</strong></p>
<table>
<thead>
<tr>
<th align="left">写法</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">async</td>
<td align="left">文件系统非同步写入（默认）</td>
</tr>
<tr>
<td align="left">sync</td>
<td align="left">文件系统同步写入</td>
</tr>
<tr>
<td align="left">atime</td>
<td align="left">修改文件读取时间</td>
</tr>
<tr>
<td align="left">noatime</td>
<td align="left">不修改文件读取时间</td>
</tr>
<tr>
<td align="left">ro</td>
<td align="left">挂载系统只读</td>
</tr>
<tr>
<td align="left">rw</td>
<td align="left">挂载系统可读写</td>
</tr>
<tr>
<td align="left">auto</td>
<td align="left">允许系统以mount -a自动挂载</td>
</tr>
<tr>
<td align="left">noauto</td>
<td align="left">不允许系统以mount -a自动挂载</td>
</tr>
<tr>
<td align="left">dev</td>
<td align="left">文件系统可建立设备文件</td>
</tr>
<tr>
<td align="left">nodev</td>
<td align="left">文件系统不可建立设备文件</td>
</tr>
<tr>
<td align="left">remount</td>
<td align="left">重新挂载</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#挂载文件系统</span><br><span class="line">mount UUID=&quot;&quot; 空目录</span><br><span class="line"></span><br><span class="line">#挂载CD或DVD</span><br><span class="line">mount 需要挂载的DVD/CD 空目录</span><br><span class="line"></span><br><span class="line">#挂载vfat中文U盘</span><br><span class="line">#codepage=950：codepage用来处理vfat，950为中文语系代码</span><br><span class="line">#iocharset指定文件Unicode</span><br><span class="line">mount -o codepage=950 iocharset=utf8 UUID=&quot;&quot; 空目录</span><br><span class="line"></span><br><span class="line">#重新挂载根目录</span><br><span class="line">mount -o remount,rw,auto /</span><br><span class="line"></span><br><span class="line">#将某个目录挂载到另一个目录，额外挂载</span><br><span class="line">mount --bind 源目录 目录</span><br></pre></td></tr></table></figure>

<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p><code>umount -[fn] 设备文件或挂载点</code>卸载<code>f</code>强制卸载<code>n</code>不更新/etc/mtab情况下卸载</p>
<p><a href="https://www.runoob.com/linux/linux-comm-mount.html" target="_blank" rel="noopener"><strong>详细</strong></a></p>
<hr>
<h1 id="磁盘-文件系统参数自定义"><a href="#磁盘-文件系统参数自定义" class="headerlink" title="磁盘/文件系统参数自定义"></a>磁盘/文件系统参数自定义</h1><p>通过修改文件的<code>major</code>与<code>minor</code>数值，实现文件代表设备</p>
<p><code>mknod 磁盘/文件 [-b&lt;设备代码,次要设备代码&gt;]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#建立一个FIFO文件</span><br><span class="line">#这个文件的文件类型是p，也就是prw-rw----注意最前面这个p</span><br><span class="line">mknod 文件 p</span><br></pre></td></tr></table></figure>

<h2 id="修改XFS文件系统的UUID与Lable-name"><a href="#修改XFS文件系统的UUID与Lable-name" class="headerlink" title="修改XFS文件系统的UUID与Lable name"></a>修改XFS文件系统的UUID与Lable name</h2><p><code>xfs_admin [-lu] [-L lbale] [-U uuid] 设备名</code>  <code>l</code>列出lable name<code>u</code>这个设备的uuid<code>L</code>设置新的lable<br><code>U</code>设置新的uuid</p>
<h2 id="修改ext4的lable与uuid"><a href="#修改ext4的lable与uuid" class="headerlink" title="修改ext4的lable与uuid"></a>修改ext4的lable与uuid</h2><p><code>tune2fs [-l] [-L lable] [-U uuid]</code> <code>l</code>将超级区块内的数据读出来</p>
<hr>
<h1 id="生成uuid"><a href="#生成uuid" class="headerlink" title="生成uuid"></a>生成uuid</h1><p><code>uuidgen</code></p>
<hr>
<h1 id="设置启动挂载"><a href="#设置启动挂载" class="headerlink" title="设置启动挂载"></a>设置启动挂载</h1><p>系统挂载的限制：</p>
<ul>
<li><p>根目录必须挂载，优先级最高</p>
</li>
<li><p>其他挂载点必须为已建立的目录</p>
</li>
<li><p>所有挂载点在同一时间内只能挂载一次</p>
</li>
<li><p>所有磁盘在同一时间内，只能被挂载一次</p>
</li>
<li><p>如果需要卸载，必须将工作目录移动到挂载点的子目录之外</p>
</li>
</ul>
<p>直接到<code>/etc/fstab</code>进行设置，可以添加启动挂载，文件内容的6个字段非常重要</p>
<p><code>设备/UUID</code> <code>挂载点</code> <code>文件系统</code> <code>文件系统参数</code> <code>dump备份命令</code> <code>fsck校验扇区</code></p>
<h2 id="特殊设备loop挂载"><a href="#特殊设备loop挂载" class="headerlink" title="特殊设备loop挂载"></a>特殊设备loop挂载</h2><p>比如镜像文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount -o loop 源目录 挂载点目录</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="使用物理分区创建内存交换分区（swap）"><a href="#使用物理分区创建内存交换分区（swap）" class="headerlink" title="使用物理分区创建内存交换分区（swap）"></a>使用物理分区创建内存交换分区（swap）</h1><p>创建分区 -&gt; 格式化为swap格式 -&gt; 启动挂载 -&gt; 创建内存交换文件 -&gt; 格式化为内存交换文件格式 -&gt; 启动</p>
<ul>
<li><p>使用gdisk或其他划分出给系统的内存交换分区</p>
</li>
<li><p>创建swap格式</p>
<p>  <code>mkswap 分区名</code></p>
</li>
<li><p>观察与加载</p>
<p>  <code>free</code></p>
<p>  <code>swapon 分区名</code>然后在<code>free</code></p>
</li>
<li><p>创建内存交换文件</p>
<p>  //创建大文件<br>  <code>dd if=分区名 of=交换分区名 bs=1M count=需要创建的大小</code></p>
</li>
<li><p>格式化为交换文件的文件格式</p>
<p>  <code>mkswap 目录 Setting up swapspace version 1, size = 数值 no lable, UUID=你的uuid</code></p>
</li>
<li><p>启动</p>
<p>  <code>swapon 目录</code><br>  <code>swapon -s</code></p>
</li>
</ul>
<ul>
<li><p>关闭</p>
<p>  <code>swapoff 目录 分区</code></p>
</li>
</ul>
<hr>
<h1 id="GNU的parted分区"><a href="#GNU的parted分区" class="headerlink" title="GNU的parted分区"></a>GNU的parted分区</h1><p><code>parted 设备 [命令 [参数] ]</code></p>
<p>详细：<code>man parted</code></p>
<hr>
<h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><p><code>tar -jcv 文件/目录 [-C 文件存放目录]</code>添加压缩文件</p>
<hr>
<h1 id="命令行模式的shell"><a href="#命令行模式的shell" class="headerlink" title="命令行模式的shell"></a>命令行模式的shell</h1><p>shell是所有Linux通用的</p>
<p>由于内核是受保护区域，需要通过shell与内核沟通</p>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p><code>locale -a</code>查看支持的编码</p>
<p>打开<code>/etc/locale.conf</code>可以设置编码格式</p>
<h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p><code>ulimit [选项] [配额]</code></p>
<h2 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h2><p><code>alias 别名=‘命令’</code>设置命令别名</p>
<p><code>alias</code>查看所有被取别名的命令</p>
<p><code>unalias 别名</code>删除命令别名</p>
<h2 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h2><p><code>history [显示数量] [选项]</code></p>
<p><code>! [第几条命令]</code></p>
<p><code>!!</code>执行上一条命令</p>
<p><code>!str</code>执行以str开头的命令</p>
<p>命令记录文件存放在<code>~/.bash_history</code></p>
<h2 id="bash登陆欢迎界面"><a href="#bash登陆欢迎界面" class="headerlink" title="bash登陆欢迎界面"></a>bash登陆欢迎界面</h2><p>在<code>/etc/issue</code></p>
<h2 id="锁定与解锁"><a href="#锁定与解锁" class="headerlink" title="锁定与解锁"></a>锁定与解锁</h2><blockquote>
<p>ctrl+s锁定<br>ctrl+q解锁</p>
</blockquote>
<h1 id="数据流重定向"><a href="#数据流重定向" class="headerlink" title="数据流重定向"></a>数据流重定向</h1><p>标准输入流：<code>0</code>或<code>&lt;</code>或<code>&lt;&lt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#追加输入</span><br><span class="line">cat &gt;&gt; file &lt;&lt; 文件/&quot;&quot;</span><br><span class="line">#输入追加内容，按ctrl+d结束输入</span><br></pre></td></tr></table></figure>

<p>标准输出流：<code>1</code>或<code>&gt;</code>或<code>&gt;&gt;</code><br>多个文件同时输出：<code>&amp;&gt;</code>或<code>&amp;&gt;&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#将ll输出的内容，输出到file里</span><br><span class="line">ll / &gt;&gt; file</span><br><span class="line"></span><br><span class="line">#多个ll同时输入到file里</span><br><span class="line">ll / /home &gt;&gt; file</span><br><span class="line"></span><br><span class="line">#创建一个文件</span><br><span class="line">cat &gt;&gt; 文件名</span><br><span class="line">#输入内容，按ctrl+d结束输入</span><br></pre></td></tr></table></figure>

<p>标准错误输出流：<code>2</code>或<code>2&gt;</code>或<code>2&gt;&gt;</code></p>
<h2 id="命令执行的判断根据"><a href="#命令执行的判断根据" class="headerlink" title="命令执行的判断根据"></a>命令执行的判断根据</h2><p><code>;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#;为语句结束符，执行完ll /后执行ll /home</span><br><span class="line">ll /; ll /home</span><br></pre></td></tr></table></figure>

<p><code>&amp;&amp;</code>与<code>||</code>或，判断符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#两个为true则执行ll /usr</span><br><span class="line">ll / &amp;&amp; ll /home ll /usr</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#其中一个ture就执行ll /usr</span><br><span class="line">ll / || ll /home ll /usr</span><br></pre></td></tr></table></figure>

<h2 id="选取命令"><a href="#选取命令" class="headerlink" title="选取命令"></a>选取命令</h2><p><code>cut [选项]</code></p>
<p><code>grep [选项] 查找字符</code></p>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><code>sort [选项] [file or stdin]</code>排序</p>
<p><code>uniq [选项]</code>排序完后，将重复的数据仅列出一个显示</p>
<p><code>wc [选项]</code>查看文件有多少字，多少行，多少字符</p>
<h2 id="双向重定向"><a href="#双向重定向" class="headerlink" title="双向重定向"></a>双向重定向</h2><p>同时将数据流分送到文件与屏幕（在屏幕输出一次，并写入到文件）</p>
<p><code>tee -a file</code> <code>a</code>追加到file</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#将ll /追加到file，并在屏幕输出追加内容</span><br><span class="line">ll / | tee -a file | more</span><br></pre></td></tr></table></figure>

<h2 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h2><h3 id="tr删除或替换一段文字"><a href="#tr删除或替换一段文字" class="headerlink" title="tr删除或替换一段文字"></a>tr删除或替换一段文字</h3><p><code>tr [ds] SET1 ...</code>将SET1替换成…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#将ll /输出的内容，小写全部替换成大写</span><br><span class="line">ll / | tr &apos;[a-z]&apos; &apos;[A-Z]&apos;</span><br><span class="line"></span><br><span class="line">#将a.txt文件输出的信息中，将root给删除</span><br><span class="line">cat a.txt | tr -d &apos;root&apos;</span><br></pre></td></tr></table></figure>

<h3 id="col将其他按键替换成空格"><a href="#col将其他按键替换成空格" class="headerlink" title="col将其他按键替换成空格"></a>col将其他按键替换成空格</h3><p><code>col [-xb]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#将文件里的[tab]键，也就是^I的符号，替换成空格</span><br><span class="line">cat /etc/man_db.conf | col -x | cat -A | more</span><br></pre></td></tr></table></figure>

<h3 id="join处理多个文件中，相同的数据"><a href="#join处理多个文件中，相同的数据" class="headerlink" title="join处理多个文件中，相同的数据"></a>join处理多个文件中，相同的数据</h3><p>使用前需要排序</p>
<p><code>join [选项] file file2</code></p>
<h3 id="paste将数据相同的行粘在一起，并以-tab-键隔开"><a href="#paste将数据相同的行粘在一起，并以-tab-键隔开" class="headerlink" title="paste将数据相同的行粘在一起，并以[tab]键隔开"></a>paste将数据相同的行粘在一起，并以[tab]键隔开</h3><p><code>paste [-d] file file2</code></p>
<h3 id="expand自动将tab转成空格"><a href="#expand自动将tab转成空格" class="headerlink" title="expand自动将tab转成空格"></a>expand自动将tab转成空格</h3><p><code>expand [-t] file</code></p>
<h2 id="划分split"><a href="#划分split" class="headerlink" title="划分split"></a>划分split</h2><p>将一个大文件，分成多个小文件</p>
<p><code>split [-bl] file PREFIX</code> <code>b</code>划分成的文件大小，可加单位例如b,k,m等<code>l</code>以行数进行划分</p>
<h2 id="参数代换"><a href="#参数代换" class="headerlink" title="参数代换"></a>参数代换</h2><p>为命令提供标准输入</p>
<p>参数某个命令的参数</p>
<p><code>xargs [参数] command</code></p>
<hr>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>条件正确则表达的式子</p>
<p><img src="regx.png" alt></p>
<p><a href="https://www.runoob.com/regexp/regexp-syntax.html" target="_blank" rel="noopener"><strong>详细</strong></a></p>
<h2 id="配合grep使用正则表达式"><a href="#配合grep使用正则表达式" class="headerlink" title="配合grep使用正则表达式"></a>配合grep使用正则表达式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查找所有a为开头的文件</span><br><span class="line">ll / | grep -n &apos;^a.*&apos;</span><br></pre></td></tr></table></figure>

<h2 id="sed将数据增删，替换，选取特点行等功能"><a href="#sed将数据增删，替换，选取特点行等功能" class="headerlink" title="sed将数据增删，替换，选取特点行等功能"></a>sed将数据增删，替换，选取特点行等功能</h2><p><code>seq [选项] [操作]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#列出行号，并删除2-5行</span><br><span class="line">nl /etc/passwd | sed &apos;2,5d&apos;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="文件格式化与相关处理"><a href="#文件格式化与相关处理" class="headerlink" title="文件格式化与相关处理"></a>文件格式化与相关处理</h1><h2 id="格式化打印printf"><a href="#格式化打印printf" class="headerlink" title="格式化打印printf"></a>格式化打印printf</h2><p><code>printf &#39;打印格式&#39; 实际内容</code></p>
<p><a href="https://www.runoob.com/linux/linux-shell-printf.html" target="_blank" rel="noopener"><strong>详细</strong></a></p>
<h2 id="awk数据处理工具"><a href="#awk数据处理工具" class="headerlink" title="awk数据处理工具"></a>awk数据处理工具</h2><p><code>awk &#39;条件类型1{操作1} 条件类型2{操作2}&#39; file</code></p>
<p><a href="https://www.runoob.com/linux/linux-comm-awk.html" target="_blank" rel="noopener"><strong>详细</strong></a></p>
<h2 id="文件比对工具"><a href="#文件比对工具" class="headerlink" title="文件比对工具"></a>文件比对工具</h2><p>用于比较两个不同版本的软件包，比较配置文件与原始文件的差异</p>
<p><code>diff [-bBi] 原始文件 目标文件</code>用于同一文件/目录的新旧版本差异</p>
<p><code>cmp [-l] file1 file2</code>用字节单位或二进制进行对比</p>
<hr>
<h1 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h1><ul>
<li><p>自动化管理</p>
</li>
<li><p>跟踪与管理系统</p>
</li>
<li><p>入侵检测</p>
</li>
<li><p>连续命令单一化</p>
</li>
<li><p>数据处理</p>
</li>
<li><p>跨平台支持</p>
</li>
</ul>
<h2 id="编写格式"><a href="#编写格式" class="headerlink" title="编写格式"></a>编写格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建一个shell脚本</span><br><span class="line">vim xx.sh</span><br><span class="line"></span><br><span class="line">符号#是注释</span><br><span class="line"></span><br><span class="line">#第一行需要备注，使用哪一种shell脚本</span><br><span class="line"></span><br><span class="line">#脚本的内容与功能介绍，版本信息，建立日期，历史记录，作者信息</span><br><span class="line"></span><br><span class="line">#注意环境变量的声明</span><br><span class="line"></span><br><span class="line">#设置重要的环境变量</span><br><span class="line"></span><br><span class="line">#内容</span><br></pre></td></tr></table></figure>

<p><strong>hellow word shell脚本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash #使用到的shell脚本</span><br><span class="line">#Program: #功能介绍</span><br><span class="line">#	this is &quot;hellow word&quot;</span><br><span class="line">#History: #时间</span><br><span class="line">#2019/10/12</span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin </span><br><span class="line">export PATH #主要环境变量声明</span><br><span class="line">echo -e &quot;hellow word \a\n&quot; #向终端输出字符串</span><br><span class="line">read -p &quot;请输入内容： &quot; 变量名 #键盘输入，内容输入到变量</span><br><span class="line">echo -e &quot;\n$&#123;变量名&#125;&quot;	#将键盘输入，将变量里的内容输出到屏幕</span><br><span class="line">exit 0 #结束程序，并返回0</span><br></pre></td></tr></table></figure>

<h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><p><code>sh hellow.sh</code>执行脚本</p>
<p><code>echo $(( 1 + 1 ))</code>进行整数算术运算</p>
<p><code>echo &quot;1.1*2.2&quot; | bc</code>进行小数算术运算</p>
<h2 id="子进程与父进程"><a href="#子进程与父进程" class="headerlink" title="子进程与父进程"></a>子进程与父进程</h2><p>未使用<code>source</code>写入父进程的话，自己写的写的脚本则会是子进程，直接调用<code>echo</code>是无法执行的</p>
<p><code>source xx.sh</code>将自己写的脚本写进父进程</p>
<p><img src="source.jpg" alt></p>
<h2 id="test测试功能"><a href="#test测试功能" class="headerlink" title="test测试功能"></a>test测试功能</h2><p><code>test [选项]</code></p>
<p><strong>判断文件是否存在，如果存在则输出</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/12</span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">判断是否真的有输入字符</span><br><span class="line">read -p &quot;输入文件名: &quot; filename</span><br><span class="line">test -z $&#123;filename&#125; &amp;&amp; echo &quot;请输入文件名&quot; &amp;&amp; exit 0</span><br><span class="line"></span><br><span class="line">#判断文件是否存在</span><br><span class="line">test ! -e $&#123;filename&#125; &amp;&amp; echo &quot;文件 `$&#123;filename&#125;` 不存在&quot; &amp;&amp; exit 0</span><br><span class="line"></span><br><span class="line">#判断文件类型与属性</span><br><span class="line">test -f $&#123;filename&#125; &amp;&amp; filetype=&quot;regulare file&quot; #是否为文件，是否存在</span><br><span class="line">test -d $&#123;filename&#125; &amp;&amp; filetype=&quot;directory&quot; #是否为目录，是否存在</span><br><span class="line">test -r $&#123;filename&#125; &amp;&amp; perm=&quot;readble&quot; #读权限</span><br><span class="line">test -w $&#123;filename&#125; &amp;&amp; perm=&quot;$&#123;perm&#125; writable&quot; #写权限</span><br><span class="line">test -x $&#123;filename&#125; &amp;&amp; perm=&quot;$&#123;perm&#125; executable&quot; #可执行权限</span><br><span class="line"></span><br><span class="line">#输出信息</span><br><span class="line">echo &quot;文件名: $&#123;filename&#125; 的类型是 $&#123;filetype&#125;&quot;</span><br><span class="line">echo &quot;可执行的权限: $&#123;perm&#125;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="使用-进行数据判断"><a href="#使用-进行数据判断" class="headerlink" title="使用 [] 进行数据判断"></a>使用 [] 进行数据判断</h2><p><strong>让用户输入y/n的程序，输入其他则输出一个其他的提示信息</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/13</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">#提示输入</span><br><span class="line">read -p &quot;please input y/n: &quot; yn</span><br><span class="line"></span><br><span class="line">#判断输入</span><br><span class="line">#-o是或者的意思，用来连接两个判断</span><br><span class="line">#y/n不区分大小写</span><br><span class="line">[ &quot;$&#123;yn&#125;&quot; == &quot;Y&quot; -o &quot;$&#123;yn&#125;&quot; == &quot;y&quot; ] &amp;&amp; echo &quot;ok!&quot; &amp;&amp; exit 0</span><br><span class="line">[ &quot;$&#123;yn&#125;&quot; == &quot;N&quot; -o &quot;$&#123;yn&#125;&quot; == &quot;n&quot; ] &amp;&amp; echo &quot;no!&quot; &amp;&amp; exit 0</span><br><span class="line"></span><br><span class="line">#y/n以外的其他字符</span><br><span class="line">echo &quot;???&quot; &amp;&amp; exit 0</span><br></pre></td></tr></table></figure>

<h2 id="shell的默认变量"><a href="#shell的默认变量" class="headerlink" title="shell的默认变量"></a>shell的默认变量</h2><ul>
<li><p><code>$0</code>执行的脚本文件名</p>
</li>
<li><p><code>$#</code>参数个数</p>
</li>
<li><p><code>$@</code>每个变量都是独立的，用””括起来</p>
</li>
<li><p><code>$*</code>每个变量用分隔符分隔，默认是空格</p>
</li>
</ul>
<p><img src="shell%E5%8F%82%E6%95%B0.png" alt></p>
<p><strong>输出程序的文件名，参数数量，参数小于2则输出提示信息，输出全部参数，输出第一个和第二个参数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/13</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">#输出文件名</span><br><span class="line">echo &quot;The script name is        ==&gt; $&#123;0&#125;&quot;</span><br><span class="line"></span><br><span class="line">#输出参数数量</span><br><span class="line">echo &quot;Total parameter number is ==&gt; $#&quot;</span><br><span class="line"></span><br><span class="line">#判断参数数量，-lt 2表示，$#参数个数小于2</span><br><span class="line">[ &quot;$#&quot; -lt 2 ] &amp;&amp; echo &quot;THe number of parameter is lee than 2. Stop here.&quot; &amp;&amp; exit 0</span><br><span class="line"></span><br><span class="line">#输出每个参数</span><br><span class="line">echo &quot;Your whole parameter is   ==&gt; &apos;$@&apos;&quot; </span><br><span class="line"></span><br><span class="line">#输出第一个参数</span><br><span class="line">echo &quot;The 1st parameter         ==&gt; $&#123;1&#125;&quot;</span><br><span class="line"></span><br><span class="line">#输出第二个参数</span><br><span class="line">echo &quot;The 2st parameter         ==&gt; $&#123;2&#125;&quot;</span><br><span class="line"></span><br><span class="line">#如果传入了更多的参数，也只会输出前两个参数，因为这里只输出两个参数</span><br></pre></td></tr></table></figure>

<h2 id="参数号码偏移"><a href="#参数号码偏移" class="headerlink" title="参数号码偏移"></a>参数号码偏移</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/13</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">echo &quot;number    ==&gt; $#&quot;</span><br><span class="line">echo &quot;parameter ==&gt; &apos;$@&apos;&quot;</span><br><span class="line"></span><br><span class="line">#偏移2个参数</span><br><span class="line">shift 2</span><br><span class="line"></span><br><span class="line">echo &quot;number    ==&gt; $#&quot;</span><br><span class="line">echo &quot;parameter ==&gt; &apos;$@&apos;&quot;</span><br></pre></td></tr></table></figure>

<p><img src="%E5%81%8F%E7%A7%BB.png" alt></p>
<h2 id="if-than判断式"><a href="#if-than判断式" class="headerlink" title="if than判断式"></a>if than判断式</h2><p>感觉和判断预处理宏差不多</p>
<p>有成立结果的都要加上then</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ 判断 ]; then</span><br><span class="line"></span><br><span class="line">elif [ 判断 ]; then</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">fi #结束if</span><br></pre></td></tr></table></figure>

<p><strong>提示输入hellow</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#       2019/10/14</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">#第一个参数输入hellow则true</span><br><span class="line">if [ &quot;$&#123;1&#125;&quot; == &quot;hellow&quot; ]; then</span><br><span class="line">        echo &quot;hellow, how are you?&quot;</span><br><span class="line">		</span><br><span class="line">#输入空字符返回错误信息</span><br><span class="line">elif [ &quot;$&#123;1&#125;&quot; == &quot;&quot; ]; then</span><br><span class="line">        echo &quot;$&#123;0&#125; someword&quot;</span><br><span class="line">		</span><br><span class="line">#输入了其他字符，显示错误信息</span><br><span class="line">else</span><br><span class="line">        echo &quot;please input \&quot;hellow \&quot;&quot;</span><br><span class="line">		</span><br><span class="line">#结束if</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="查询主机的网络端口"><a href="#查询主机的网络端口" class="headerlink" title="查询主机的网络端口"></a>查询主机的网络端口</h2><p><code>netstat -tuln</code>获取主机启动的服务，并获取信息</p>
<p><img src="netstat.png" alt></p>
<ul>
<li><p>Proto封包格式</p>
</li>
<li><p>Local Address本地IP:端口</p>
</li>
<li><p>Foreign Address远程IP:端口</p>
</li>
<li><p>State是否监听</p>
</li>
</ul>
<p><strong>常见的端口与相关网络服务</strong></p>
<ul>
<li><p>80: WWW</p>
</li>
<li><p>22: ssh</p>
</li>
<li><p>21： ftp</p>
</li>
<li><p>25： mail</p>
</li>
<li><p>111: RPC(远程过程调用)</p>
</li>
<li><p>631: CUPS(打印服务功能)</p>
</li>
</ul>
<p><strong>通过netstat检测网络服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#       2019/10/14</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">#测试结果存放到文件net.txt（当文件不存在则自动创建），testfile是一个变量名，</span><br><span class="line">testfile=/my_test/shell_script/net.txt</span><br><span class="line"></span><br><span class="line">#将netstat -tuln的结果输入到变量testfile</span><br><span class="line">netstat -tuln &gt;&gt; $&#123;testfile&#125;</span><br><span class="line"></span><br><span class="line">#testing是一个变量名，存储在变量testfile，grep &quot;:80 &quot;的结果</span><br><span class="line">testing=$(grep &quot;:80 &quot; $&#123;testfile&#125;)</span><br><span class="line"></span><br><span class="line">#变量testing不是空字符串</span><br><span class="line">if [ &quot;$&#123;testing&#125;&quot; != &quot;&quot; ];</span><br><span class="line">		#终端输出字符串</span><br><span class="line">        echo &quot;www&quot;</span><br><span class="line">#结束if</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">testing=$(grep &quot;:22 &quot; $&#123;testfile&#125;)</span><br><span class="line">if [ &quot;$&#123;testing&#125;&quot; != &quot;&quot; ]; then</span><br><span class="line">        echo &quot;ssh&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">testing=$(grep &quot;:21 &quot; $&#123;testfile&#125;)</span><br><span class="line">if [ &quot;$&#123;testing&#125;&quot; != &quot;&quot; ]; then</span><br><span class="line">        echo &quot;ftp&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">testing=$(grep &quot;:25 &quot; $&#123;testfile&#125;)</span><br><span class="line">if [ &quot;$&#123;testing&#125;&quot; != &quot;&quot; ]; then</span><br><span class="line">        echo &quot;mail&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="求剩余时间的练习"><a href="#求剩余时间的练习" class="headerlink" title="求剩余时间的练习"></a>求剩余时间的练习</h2><p><code>declare</code>用于声明shell变量</p>
<p><a href="https://www.runoob.com/linux/linux-comm-declare.html" target="_blank" rel="noopener"><strong>详细</strong></a></p>
<p>双小括号 <code>(( ))</code></p>
<blockquote>
<p>1.整数扩展。这种扩展计算是整数型的计算，不支持浮点型。((exp))结构扩展并计算一个算术表达式的值，<br>如果表达式的结果为0，那么返回的退出状态码为1，或者 是”假”，而一个非零值的表达式所返回的退出<br>状态码将为0，或者是”true”。若是逻辑判断，表达式exp为真则为1,假则为0。</p>
<p>2.只要括号中的运算符、表达式符合C语言运算规则，都可用在$((exp))中，甚至是三目运算符。作不同进<br>位(如二进制、八进制、十六进制)运算时，输出结果全都自动转化成了十进制。如：echo $((16#5f)) 结果<br>为95 (16进位转十进制)</p>
<p>3.单纯用 (( )) 也可重定义变量值，比如 a=5; ((a++)) 可将 $a 重定义为6</p>
<p>4.常用于算术运算比较，双括号中的变量可以不使用$符号前缀。括号内支持多个表达式用逗号分开。 只要<br>括号中的表达式符合C语言运算规则,比如可以直接使用for((i=0;i&lt;5;i++)), 如果不使用双括号, 则<br>为for i in `seq 0 4`或者for i in {0..4}。再如可以直接使用if (($i&lt;5)), 如果不使用双括<br>号, 则为if [ $i -lt 5 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/15</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">read -p &quot;YYYMMDD ex&gt;20191015 &quot; date2</span><br><span class="line"></span><br><span class="line">#测试输入内容是否正确，grep &apos;[0-9]\&#123;8\&#125;查看是否有8个数字</span><br><span class="line">date_d=$(echo $&#123;date2&#125; | grep &apos;[0-9]\&#123;8\&#125;&apos;)</span><br><span class="line"></span><br><span class="line">if [ &quot;$&#123;date_d&#125;&quot; == &quot;&quot; ]; then</span><br><span class="line">        echo &quot;input error&quot;</span><br><span class="line">        exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#计算日期</span><br><span class="line">declare -i date_dem=$(date --date=&quot;$&#123;date2&#125;&quot; +%s) #输入未来时间，获取秒数</span><br><span class="line">declare -i date_now=$(date +%s) #现在日期秒数</span><br><span class="line">declare -i date_total_s=$(($&#123;date_dem&#125;-$&#123;date_now&#125;)) #剩余秒数统计</span><br><span class="line">#一天的总秒数（24h*60m*60s）</span><br><span class="line">declare -i date_d=$(($&#123;date_total_s&#125;/60/60/24)) #转为日数</span><br><span class="line"></span><br><span class="line">#判断是否到达时间（已经没有剩余的时间）</span><br><span class="line">if [ &quot;$&#123;date_total_s&#125;&quot; -lt &quot;0&quot; ]; then</span><br><span class="line">        echo &quot;: &quot;$((-1*$&#123;date_d&#125;))&quot; ago &quot;</span><br><span class="line">else	#60/60/24为一天的总秒数（24h*60m*60s）</span><br><span class="line">        declare -i date_h=$(($(($&#123;date_total_s&#125;-$&#123;date_d&#125;*60*60*24))/60/60))</span><br><span class="line">        echo &quot;$&#123;date_d&#125; days and $&#123;date_h&#125; hours&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="case判断"><a href="#case判断" class="headerlink" title="case判断"></a>case判断</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case $变量名 in</span><br><span class="line">	&quot;变量内容&quot;)</span><br><span class="line">	#内容</span><br><span class="line">	;;</span><br><span class="line">	</span><br><span class="line">	&quot;变量内容&quot;)</span><br><span class="line">	#内容</span><br><span class="line">	;;</span><br><span class="line">	</span><br><span class="line">	*) #c++的switch里的default</span><br><span class="line">	#内容</span><br><span class="line">	;;</span><br><span class="line">#结束case</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p><strong>例子</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/15</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">#判断参数2</span><br><span class="line">case $&#123;1&#125; in</span><br><span class="line">        &quot;h&quot;)</span><br><span class="line">                echo &quot;hellow&quot;</span><br><span class="line">                ;;</span><br><span class="line">        &quot;&quot;)</span><br><span class="line">                echo &quot;please input&quot;</span><br><span class="line">                ;;</span><br><span class="line">        *)#通配符</span><br><span class="line">                echo &quot;???&quot;</span><br><span class="line">                ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function 函数名()&#123;</span><br><span class="line">	#功能</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#使用函数</span><br><span class="line">函数名;</span><br></pre></td></tr></table></figure>

<p><strong>例子</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/15</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">function print()&#123;</span><br><span class="line">        echo &quot;hellow word.&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#内置变量版</span><br><span class="line">function print2()&#123;</span><br><span class="line">        echo &quot;$&#123;1&#125;&quot; #输出函数参数，也就是输出1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case $&#123;1&#125; in</span><br><span class="line">        &quot;h&quot;)</span><br><span class="line">				#使用函数</span><br><span class="line">                print;</span><br><span class="line">                ;;</span><br><span class="line">		</span><br><span class="line">		&quot;one&quot;)</span><br><span class="line">				#使用内置变量版函数</span><br><span class="line">				print2 1; #1是这个函数的参数</span><br><span class="line">				;;</span><br><span class="line"></span><br><span class="line">        *)</span><br><span class="line">                echo &quot;no function.&quot;</span><br><span class="line">                ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p><img src="function.png" alt></p>
<h2 id="循环-loop"><a href="#循环-loop" class="headerlink" title="循环(loop)"></a>循环(loop)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while [表达式]</span><br><span class="line">#循环的开始</span><br><span class="line">do</span><br><span class="line">	#功能</span><br><span class="line">#循环的结束</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><strong>当表达式成立则停止循环</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">until [表达式]</span><br><span class="line">do</span><br><span class="line">	#功能</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><strong>求1+到10的数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/15</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">i=0</span><br><span class="line">sum=0</span><br><span class="line">while [ &quot;$&#123;i&#125;&quot; != 10  ]</span><br><span class="line">do</span><br><span class="line">        i=$(( $i+1 ))</span><br><span class="line">        sum=$(( $sum+$i ))</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;sum = $sum&quot;</span><br></pre></td></tr></table></figure>

<h2 id="for-do-done（固定循环）"><a href="#for-do-done（固定循环）" class="headerlink" title="for do done（固定循环）"></a>for do done（固定循环）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#第一次循环$var为c1，第二次循环$var为c2，以此类推</span><br><span class="line">for var in c1 c2 c3 ...</span><br><span class="line">do</span><br><span class="line">	#功能</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><strong>例子</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/15</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">for num in a1 b2 c3</span><br><span class="line">do</span><br><span class="line">	echo -e &quot;$&#123;num&#125;\n&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><strong>输出所有系统账户</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/15</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line">#cut -d &apos;:&apos; -f1，:作为分割符，取出1段字符串</span><br><span class="line">users=$(cut -d &apos;:&apos; -f1 /etc/passwd)</span><br><span class="line">for username in $&#123;users&#125;</span><br><span class="line">do</span><br><span class="line">		#输出所有账户</span><br><span class="line">        id $&#123;username&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h3 id="数值处理版本"><a href="#数值处理版本" class="headerlink" title="数值处理版本"></a>数值处理版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (( 初始值；限制值; 赋值运算 ))</span><br><span class="line">do</span><br><span class="line">	#功能</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><strong>输出1-10</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/15</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">for (( i=0; i != 11; i=i+1 ))</span><br><span class="line">do</span><br><span class="line">        echo -e &quot;$i\n&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h2 id="输出一个范围的数字或字母"><a href="#输出一个范围的数字或字母" class="headerlink" title="输出一个范围的数字或字母"></a>输出一个范围的数字或字母</h2><p><code>$(seq 1 10)</code>输出1-10的数字</p>
<p><code>{1..10}</code>输出1-10的数字</p>
<p><code>{a..z}</code>输出a-z的字母</p>
<h2 id="搭配随机数与数组"><a href="#搭配随机数与数组" class="headerlink" title="搭配随机数与数组"></a>搭配随机数与数组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/15</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">n[1]=&quot;a&quot;</span><br><span class="line">n[2]=&quot;b&quot;</span><br><span class="line">n[3]=&quot;c&quot;</span><br><span class="line">num=3</span><br><span class="line"></span><br><span class="line">#生产随机数索引</span><br><span class="line">c=$(( $&#123;RANDOM&#125;*$&#123;num&#125;/32767+1 ))</span><br><span class="line">echo &quot;: $&#123;n[$&#123;c&#125;]&#125;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="shell脚本的跟踪与调试"><a href="#shell脚本的跟踪与调试" class="headerlink" title="shell脚本的跟踪与调试"></a>shell脚本的跟踪与调试</h2><p><code>sh [-nvx] xx.sh</code> <code>n</code>不执行脚本，仅查询语法的文件<code>v</code>执行脚本前，将脚本内容输出到屏幕<code>x</code>将使用到的脚本<br>输出到屏幕</p>
<hr>
<h1 id="账户管理"><a href="#账户管理" class="headerlink" title="账户管理"></a>账户管理</h1><p>ID与账户保存在<code>/etc/passwd</code></p>
<p>组保存在<code>/etc/group</code></p>
<p><code>/etc/shadow</code>存储用户的密码文件</p>
<p><code>id 账户名</code>查看该账户的UID，GID，groups</p>
<ul>
<li><p>UID：用户ID</p>
</li>
<li><p>GID：用户组ID</p>
</li>
<li><p>groups：组 </p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">ID范围</th>
<th align="left">ID特性</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">root</td>
</tr>
<tr>
<td align="left">1-999</td>
<td align="left">系统账户，1-200 Linux自行建立账户 201-999 若用户有系统账户需求，可以用的账户UID</td>
</tr>
<tr>
<td align="left">1000-60000</td>
<td align="left">可登陆用户</td>
</tr>
</tbody></table>
<ul>
<li>添加用户</li>
</ul>
<p><code>useradd [-u 你的UID] [-g 你的组名] 用户名</code>创建用户</p>
<p><code>passwd [选项] 用户</code>为新用户添加密码</p>
<p><code>passwd 密码</code>修改密码</p>
<ul>
<li>chage拥有详细的显示密码参数的功能</li>
</ul>
<p><code>chage [选项] 用户名</code></p>
<ul>
<li>usermod微调用户参数</li>
</ul>
<p><code>usermod [选项] 用户名</code></p>
<ul>
<li>删除用户</li>
</ul>
<p><code>userdel -r 用户名</code></p>
<ul>
<li>查询UID/GID</li>
</ul>
<p><code>id 用户名</code></p>
<ul>
<li>创建用户组</li>
</ul>
<p><code>groupadd [-g gid] 组名</code></p>
<ul>
<li>修改组参数</li>
</ul>
<p><code>groupmod 组名</code></p>
<ul>
<li>删除组</li>
</ul>
<p><code>groupdel 组名</code></p>
<ul>
<li>组管理员</li>
</ul>
<p><code>gpasswd 组名</code></p>
<hr>
<h1 id="主机的详细权限规划，ACL的使用"><a href="#主机的详细权限规划，ACL的使用" class="headerlink" title="主机的详细权限规划，ACL的使用"></a>主机的详细权限规划，ACL的使用</h1><p>ACL访问控制列表，主要针对用户，组，默认属性</p>
<p>主要使用<code>getfacl</code>与<code>setfacl</code>这两命令</p>
<hr>
<h1 id="用户切换"><a href="#用户切换" class="headerlink" title="用户切换"></a>用户切换</h1><p><code>su</code>切换到root</p>
<p><code>su 用户名</code>切换到指定用户</p>
<p><code>sudo 命令</code>使用管理员权限执行该命令（需要通过管理员的审核，审核文件在/etc/sudoers）</p>
<hr>
<h1 id="PAM用户验证"><a href="#PAM用户验证" class="headerlink" title="PAM用户验证"></a>PAM用户验证</h1><hr>
<h1 id="用户信息传递"><a href="#用户信息传递" class="headerlink" title="用户信息传递"></a>用户信息传递</h1><p><code>w</code>目前在该设备登陆的用户</p>
<p><code>lastlog</code>最近登陆用户的时间</p>
<h2 id="用户对谈"><a href="#用户对谈" class="headerlink" title="用户对谈"></a>用户对谈</h2><p><code>write</code>对话信息发送</p>
<p><code>mesg</code>不接收任何人的信息</p>
<p><code>wall</code>广播</p>
<h2 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h2><p><code>mail</code></p>
<hr>
<h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><p>程序：通常为二进制程序，以物理文件的形式存储</p>
<p>进程：程序被触发，执行者的权限与属性会被加载在内存中，操作系统会给予该内存一个PID</p>
<p><img src="%E8%BF%9B%E7%A8%8B.jpg" alt></p>
<p>父进程与子进程，一般子进程的PPID和父进程的PID是一样的</p>
<p><img src="%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B.png" alt></p>
<p><img src="%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B2.png" alt></p>
<p><code>ctrl+z</code>当目前进程丢进后台【暂停】</p>
<p><code>kill(fg) % n</code>删除（返回）指定暂停的程序,通常配合ps和pstree</p>
<p><code>jobs</code>查看后排任务状态</p>
<p><code>bg % 1</code>程序在后台运行</p>
<p><code>nohup</code>及时设备注销后，程序依然运行</p>
<p><code>ps</code>查看静态进程</p>
<p><code>top</code>查看动态进程</p>
<p><code>pstree</code>子进程砍不掉时，获取其父进程</p>
<table>
<thead>
<tr>
<th align="left">代号</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">启动被终止的程序</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">强制终止程序，未完成部分以一个文件的形式保留下来</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left">正常方式终止程序</td>
</tr>
</tbody></table>
<p><code>killall</code>删除服务</p>
<p><code>nice</code>调整程序优先级</p>
<p><code>renice</code>修改已存在程序优先级</p>
<p><code>free</code>查看内存使用情况</p>
<p><code>uname</code>查看系统与内核信息</p>
<p><code>uptime</code>系统启动时间与任务负载</p>
<p><code>netstat</code>追踪网络或socket文件，被用于网络监控方面</p>
<p><code>dmesg</code>内核产生的信息</p>
<p><code>vmstat</code>系统资源变化</p>
<p><code>fuser</code>找出在使用该文件的进程</p>
<p><code>losf</code>列出被进程使用的文件名</p>
<p><code>pidof</code>找出正在执行程序的PID</p>
<hr>
<h1 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h1><p>安全强化版Linux</p>
<p><code>安全上下文</code></p>
<blockquote>
<p>身份识别（用户是否受限制）<br>类型（判断主程序是否可以读取程序）<br>角色（数据属于进程，文件资源代表用户）</p>
</blockquote>
<p><img src="selinux%E6%B5%81%E7%A8%8B.png" alt></p>
<p><code>getsebool</code>查看系统规则是否开启</p>
<p><code>setsebool [-P] 规则名 [0|1]</code>修改规则</p>
<p><code>chcon</code>手动修改文件的SELinux类型</p>
<p><code>restorecon</code>恢复文件的SELinux</p>
<p><code>semanage</code>默认目录的安全上下文查询与修改</p>
<h2 id="vsftpd默认FTP服务器软件"><a href="#vsftpd默认FTP服务器软件" class="headerlink" title="vsftpd默认FTP服务器软件"></a>vsftpd默认FTP服务器软件</h2><p>终端输入<code>vsftpd</code>下载软件</p>
<p><strong>给用户下载的FTP文件会放在<code>/var/fpt/pub目录</code></strong></p>
<p><code>curl</code>简单的终端浏览器</p>
<hr>
<h1 id="daemon与服务"><a href="#daemon与服务" class="headerlink" title="daemon与服务"></a>daemon与服务</h1><p>daemon与服务可以视为相同的东西</p>
<p>查看进程时，{xxx}d通常是deamon的进程</p>
<p>所有的服务启动脚本放置在<code>/etc/init.d</code>目录</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">start</td>
<td align="left">启动</td>
</tr>
<tr>
<td align="left">stop</td>
<td align="left">关闭</td>
</tr>
<tr>
<td align="left">restart</td>
<td align="left">重启</td>
</tr>
<tr>
<td align="left">status</td>
<td align="left">查看状态</td>
</tr>
</tbody></table>
<p><code>/etc/init.d/deamon 命令</code></p>
<p><strong>服务启动分类</strong></p>
<ul>
<li><p>独立启动，服务常驻在内存，反应快</p>
</li>
<li><p>超级守护进程，由特殊的xinetd或inetd提供socket对应或端口对应的管理</p>
</li>
</ul>
<h2 id="通过systemctl管理服务"><a href="#通过systemctl管理服务" class="headerlink" title="通过systemctl管理服务"></a>通过systemctl管理服务</h2><p><code>systemctl [command] [unit]</code></p>
<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>cent8联网并安装GUI</title>
    <url>/2019/10/02/cent8%E8%81%94%E7%BD%91%E5%B9%B6%E5%AE%89%E8%A3%85GUI/</url>
    <content><![CDATA[<img src="/2019/10/02/cent8联网并安装GUI/封面.jpg">

<p>基于<code>cent8</code>最小化安装</p>
<a id="more"></a>

<h1 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens32</span><br></pre></td></tr></table></figure>

<p><code>ifcfg-ens32</code>文件后面的数字可能会不一样，实际情况按你自己<code>network-scripts</code>目录下<br>的<code>ifcfg-ensXX</code>文件为主</p>
<ul>
<li>修改<code>NOBOOT</code>选项为<code>yes</code></li>
</ul>
<p><img src="ensxx.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmcli c reload	//重启网卡</span><br></pre></td></tr></table></figure>

<h2 id="nmcli命令解释"><a href="#nmcli命令解释" class="headerlink" title="nmcli命令解释"></a>nmcli命令解释</h2><p><code>用法</code>nmcli [选项] 对象</p>
<table>
<thead>
<tr>
<th align="left"><code>选项</code></th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-o[verview]</td>
<td align="left">概览模式（隐藏默认值）</td>
</tr>
<tr>
<td align="left">-t[erse]</td>
<td align="left">简洁输出</td>
</tr>
<tr>
<td align="left">-p[retty]</td>
<td align="left">整齐输出</td>
</tr>
<tr>
<td align="left">-m[ode] tabular</td>
<td align="left">multiline</td>
</tr>
<tr>
<td align="left">-c[olors] auto</td>
<td align="left">yes</td>
</tr>
<tr>
<td align="left">-e[scape] yes</td>
<td align="left">no</td>
</tr>
<tr>
<td align="left">-a[sk]</td>
<td align="left">询问缺少的参数</td>
</tr>
<tr>
<td align="left">-s[how-secrets]</td>
<td align="left">允许显示密码</td>
</tr>
<tr>
<td align="left">-w[ait]</td>
<td align="left">为完成的操作设置超时等待时间</td>
</tr>
<tr>
<td align="left">-v[ersion]</td>
<td align="left">显示程序版本</td>
</tr>
<tr>
<td align="left">-h[elp]</td>
<td align="left">输出此帮助</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left"><code>对象</code></th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">对象：</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">g[eneral]</td>
<td align="left">网络管理器（NetworkManager）的常规状态和操作</td>
</tr>
<tr>
<td align="left">n[etworking]</td>
<td align="left">整体联网控制</td>
</tr>
<tr>
<td align="left">r[adio]</td>
<td align="left">网络管理器无线电开关</td>
</tr>
<tr>
<td align="left">c[onnection]</td>
<td align="left">网络管理器的连接</td>
</tr>
<tr>
<td align="left">d[evice]</td>
<td align="left">由网络管理器管理的设备</td>
</tr>
<tr>
<td align="left">a[gent]</td>
<td align="left">网络管理器的密钥（secret）代理或 polkit 代理</td>
</tr>
<tr>
<td align="left">m[onitor]</td>
<td align="left">监视网络管理器更改</td>
</tr>
</tbody></table>
<hr>
<h1 id="安装GUI"><a href="#安装GUI" class="headerlink" title="安装GUI"></a>安装GUI</h1><ul>
<li><p><strong>科普</strong></p>
<blockquote>
<p>install为安装一个软件<br>groupinstall为安装一组软件</p>
</blockquote>
</li>
<li><p>使用<code>yum group list</code>查看可以安装的软件组</p>
</li>
</ul>
<p><img src="GUI.png" alt></p>
<ul>
<li>安装GUI</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//-y的意义是遇到所有选择y/n的选项，都选择y</span><br><span class="line">yum -y groupinstall &quot;Server with GUI&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动GUI</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">startx</span><br></pre></td></tr></table></figure>

<ul>
<li>GUI与命令行的切换<blockquote>
<p>图形界面到命令行界面：<code>Ctrl+Alt+F2</code><br>命令行界面到图形界面：<code>Ctrl+Alt+F1</code></p>
</blockquote>
</li>
</ul>
<h2 id="可能会出现的异常"><a href="#可能会出现的异常" class="headerlink" title="可能会出现的异常"></a>可能会出现的异常</h2><p>错误：事务测试失败，需要安装两个rpm</p>
<p>解决：更新<code>rpm</code>?反正我是直接把有关rpm的全部安装，然后在安装GUI就成功了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install rpm*</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>在linux搭建c/c++编译环境</title>
    <url>/2019/10/02/%E5%9C%A8linux%E6%90%AD%E5%BB%BAc-c-%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<img src="/2019/10/02/在linux搭建c-c-编译环境/封面.jpg">

<p>基于<code>Cent8</code>虚拟机下，搭建<code>gcc/g++</code>，<code>gdb</code>并使用<code>vs code</code>进行c/c++程序的开发</p>
<a id="more"></a>

<h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><ul>
<li><strong>下载gcc/g++的依赖库（需要按顺序安装）</strong></li>
</ul>
<div class="tabs" id="步骤"><ul class="nav-tabs"><li class="tab active"><a href="#步骤-1">步骤 1</a></li><li class="tab"><a href="#步骤-2">步骤 2</a></li><li class="tab"><a href="#步骤-3">步骤 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="步骤-1"><p><a class="btn" href="https://mirrors.tuna.tsinghua.edu.cn/gnu/gmp/?C=M&O=D" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载gmp</a></p>
</div><div class="tab-pane" id="步骤-2"><p><a class="btn" href="https://mirrors.tuna.tsinghua.edu.cn/gnu/mpfr/" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载mpfr</a></p>
</div><div class="tab-pane" id="步骤-3"><p><a class="btn" href="https://mirrors.tuna.tsinghua.edu.cn/gnu/mpc/" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载mpc</a></p>
</div></div></div>

<ul>
<li><strong>gdb依赖库texinfo</strong></li>
</ul>
<a class="btn" href="https://mirrors.tuna.tsinghua.edu.cn/gnu/texinfo/?C=M&O=D" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载texinfo</a>

<ul>
<li><strong>下载gcc</strong></li>
</ul>
<blockquote>
<a class="btn" href="https://mirrors.tuna.tsinghua.edu.cn/gnu/gcc/?C=M&O=D" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载gcc</a>
</blockquote>
<ul>
<li><strong>下载gdb</strong></li>
</ul>
<blockquote>
<a class="btn" href="https://mirrors.tuna.tsinghua.edu.cn/gnu/gdb/?C=M&O=D" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载gdb</a>
</blockquote>
<ul>
<li><strong>下载vs code</strong></li>
</ul>
<blockquote>
<a class="btn" href="https://code.visualstudio.com/" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载vs code</a>
</blockquote>
<hr>
<h1 id="安装gcc依赖库"><a href="#安装gcc依赖库" class="headerlink" title="安装gcc依赖库"></a>安装gcc依赖库</h1><ul>
<li><p>安装<code>make</code>（有的话就不用安装了，使用<code>make -v</code>查看make版本）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install make</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装<code>m4</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install m4</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><code>安装依赖库之前需要使用yum安装gcc/g++</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure>

<p><img src="yumc-c++.png" alt></p>
<ul>
<li><p>安装<code>gmp</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/目录</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装<code>mpfr</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/目录 --with-gmp=/gmp目录</span><br><span class="line">make </span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装<code>mpc</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/目录 --with-gmp=/gmp目录 with-mpfr=/mpfr目录</span><br><span class="line">make </span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">//在末尾处添加自己的bin目录</span><br><span class="line">export LD_LIBRARY_PATH=/gmp/bin:/mpfr/bin:/mpc/bin:$LD_LIBRARY_PATH</span><br><span class="line">//刷新环境变量</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h1 id="安装gcc与gdb"><a href="#安装gcc与gdb" class="headerlink" title="安装gcc与gdb"></a>安装gcc与gdb</h1><h2 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/目录 --with-gmp=/gmp目录 with-mpfr=/mpfr目录 --with-mpc=/mpc目录</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p><code>在执行configure时，如果遇到错误</code><br>“I suspect your system does not have 32-bit development<br> libraries (libc and headers). If you have them, rerun configure with –enable-multilib.<br> If you do not have them, and want to build a 64-bit-only compiler, rerun configure with –disable-multilib”，<br> <span class="label default"> 表示系统不支持32位程序，这样在执行configure时需为它支持参数“--disable-multilib"</span></p>
<p>改成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/目录 --with-gmp=/gmp目录 with-mpfr=/mpfr目录 --with-mpc=/mpc目录 --disable-multilib</span><br></pre></td></tr></table></figure>

<p><code>在执行make时，如果遇到错误</code><br>“error while loadin g shared libraries: libmpfr.so.6: cannot open shared object<br>file: No such file or directory”</p>
<span class="label default"> /lib64目录缺少一个名为`libmpfr.so.6`的文件，把`mpfr/lib/libmpfr.so.6`复制到`/lib64`目录，</span>
<span class="label default"> 如果更高级的libmpfr则一并复制过去，并用ln链接指向低级的libmpfr</span>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//使用ln软链接</span><br><span class="line">ln -sf 被指向 指向</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<blockquote>
<p>ln -sf A B<br>结果为：B -&gt; A<br>B指向了A</p>
</blockquote>
<ul>
<li>配置环境变量<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">//末尾处添加</span><br><span class="line">export PATH=/gcc/bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH=/gcc/lib64:$LD_LIBRARY_PATH</span><br><span class="line">export MANPATH=/gcc/share/man:$MANPATH</span><br><span class="line">//刷新环境变量</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>编译命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//-std=指定c++版本，生成的编译文件的文件名</span><br><span class="line">g++ -g -std=c++17 xxx.cpp -o a.out</span><br><span class="line">//编译</span><br><span class="line">./a.out</span><br></pre></td></tr></table></figure>

<h2 id="安装gdb"><a href="#安装gdb" class="headerlink" title="安装gdb"></a>安装gdb</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/目录</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p><code>出现错误makeinfo: command not found</code></p>
<p>WARNING: ‘makeinfo’ is missing on your system.<br>You should only need it if you modified a ‘.texi’ file, or<br>any other file indirectly affecting the aspect of the manual.<br>You might want to install the Texinfo package:<br><a href="http://www.gnu.org/software/texinfo/" target="_blank" rel="noopener">http://www.gnu.org/software/texinfo/</a><br>The spurious makeinfo call might also be the consequence of<br>using a buggy ‘make’ (AIX, DU, IRIX), in which case you might<br>want to install GNU make<br>缺少makeinfo文件，需要安装texinfo，详细如上</p>
<hr>
<h1 id="安装并使用vs-code"><a href="#安装并使用vs-code" class="headerlink" title="安装并使用vs code"></a>安装并使用vs code</h1><p>直接解压即可使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar [选项] vscode -C 解压目录</span><br></pre></td></tr></table></figure>

<p>启动vs code</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo /vscode/bin/code --user-data-dir</span><br></pre></td></tr></table></figure>

<p><code>如果出现错误</code><br>error while loading shared libraries: libXss.so.1: cannot open shared object<br>file: No such file or directory<br>安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install libXScrnSaver</span><br></pre></td></tr></table></figure>

<p><strong>vs code安装c++语法</strong><br><img src="vsc.png" alt></p>
<p><strong>设置配置文件：</strong></p>
<blockquote>
<p>按F1输入<code>launch.json</code> -&gt; gdb -&gt; <code>debug配置文件</code><br>按F1输入<code>tasks.json</code> -&gt; <code>configure tasks</code> -&gt; <code>create</code> -&gt; <code>others</code>生成编<code>译配置文件</code></p>
</blockquote>
<p><strong>launch.json</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;(gdb) Launch&quot;,					//名字，随便起</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/a.out&quot;,	//debug当前目录下的a.out文件</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: false,</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;build&quot;,				//生成编译文件，与tasks.json的&quot;label&quot;一样，名字也可以随便取</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;/GNU/gdb/bin/gdb&quot;  	//gdb路径</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>tasks.json</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;build&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;/GNU/gcc/bin/g++&quot;,		//g++目录</span><br><span class="line">            &quot;args&quot;:[							//生成编译文件的命令</span><br><span class="line">                &quot;-g&quot;,</span><br><span class="line">                &quot;-std=c++17&quot;,</span><br><span class="line">                &quot;main.cpp&quot;,</span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;a.out&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;group&quot;: &#123;</span><br><span class="line">                &quot;kind&quot;: &quot;build&quot;,</span><br><span class="line">                &quot;isDefault&quot;: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="include的查找"><a href="#include的查找" class="headerlink" title="#include的查找"></a>#include的查找</h2><p>你会发现每个头文件下面都有个波浪线，找不到这个头文件</p>
<p><img src="include.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//终端输入</span><br><span class="line">gcc -v -E -x c++ -</span><br></pre></td></tr></table></figure>

<p><strong>复制红色框内所有的路径</strong><br><img src="include2.png" alt></p>
<p><strong>生成路径配置文件：</strong></p>
<blockquote>
<p>按F1输入<code>configuration</code> -&gt; <code>edit configurations.json</code><br>将红框内所有路径复制到<code>includePath</code>里，注意添加冒号和逗号</p>
</blockquote>
<h2 id="设置vs-code默认以最新版本的c"><a href="#设置vs-code默认以最新版本的c" class="headerlink" title="设置vs code默认以最新版本的c++"></a>设置vs code默认以最新版本的c++</h2><p><img src="c++new.png" alt></p>
<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>c primer plus笔记</title>
    <url>/2019/10/02/c-primer-plus%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2019/10/02/c-primer-plus笔记/封面.jpg">

<p>c primer plus第六版总结</p>
<a id="more"></a>


<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>unsigned为没符号类型</p>
<table>
<thead>
<tr>
<th align="left">整数类型</th>
<th align="left">存储大小（字节）</th>
</tr>
</thead>
<tbody><tr>
<td align="left">char</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">unsigned</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">signed char</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">2或4</td>
</tr>
<tr>
<td align="left">unsigned int</td>
<td align="left">2或4</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">unsigned short</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">4</td>
</tr>
<tr>
<td align="left">unsigned long</td>
<td align="left">4</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">浮点数类型（小数类型）</th>
<th align="left">存储大小（字节）</th>
</tr>
</thead>
<tbody><tr>
<td align="left">float</td>
<td align="left">4</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">8</td>
</tr>
<tr>
<td align="left">long double</td>
<td align="left">16</td>
</tr>
</tbody></table>
<p><strong>浮点数转整数会导致失去精度</strong><br><code>例子</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">double d = 1.11;</span><br><span class="line"></span><br><span class="line">// 结果为1，后面的0.11丢失了</span><br><span class="line">int i = d; </span><br><span class="line"></span><br><span class="line">// 打印结果到控制台</span><br><span class="line">printf(&quot;%d&quot;, i);</span><br></pre></td></tr></table></figure>

<h2 id="显示8进制和十六进制"><a href="#显示8进制和十六进制" class="headerlink" title="显示8进制和十六进制"></a>显示8进制和十六进制</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 8进制的11</span><br><span class="line">printf(&quot;%o\n&quot;, 11,&apos;\n&apos;);</span><br><span class="line"></span><br><span class="line">// 10进制的11</span><br><span class="line">printf(&quot;%d\n&quot;, 11);</span><br><span class="line"></span><br><span class="line">// 16进制的11</span><br><span class="line">printf(&quot;%x\n&quot;, 11);</span><br><span class="line"></span><br><span class="line">// \n为换行符</span><br></pre></td></tr></table></figure>

<h2 id="整型溢出"><a href="#整型溢出" class="headerlink" title="整型溢出"></a>整型溢出</h2><p>比如int类型，最大值是2147483647,最小值是-2147483648</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i = 2147483647;</span><br><span class="line">//溢出，结果为最小值</span><br><span class="line">i + 1;</span><br><span class="line">//溢出，结果为倒数第二小</span><br><span class="line">i + 1;</span><br></pre></td></tr></table></figure>

<h2 id="printf打印函数"><a href="#printf打印函数" class="headerlink" title="printf打印函数"></a>printf打印函数</h2><p><code>int printf(打印条件字符串, 打印内容的变量)</code></p>
<p><strong>返回值为打印字符的个数，输出有误则返回负数</strong></p>
<table>
<thead>
<tr>
<th align="left">条件写法</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%d</td>
<td align="left">10进制</td>
</tr>
<tr>
<td align="left">%o</td>
<td align="left">8进制</td>
</tr>
<tr>
<td align="left">%x</td>
<td align="left">16进制</td>
</tr>
<tr>
<td align="left">%u</td>
<td align="left">unsigned int或unsigned</td>
</tr>
<tr>
<td align="left">%l</td>
<td align="left">long</td>
</tr>
<tr>
<td align="left">%d</td>
<td align="left">int和long长度一样时</td>
</tr>
<tr>
<td align="left">%h</td>
<td align="left">short</td>
</tr>
<tr>
<td align="left">%ll</td>
<td align="left">long long</td>
</tr>
<tr>
<td align="left">%c</td>
<td align="left">char</td>
</tr>
<tr>
<td align="left">%.nf</td>
<td align="left">表示n个小数位，比如:%.2f，你输入0.123，只会显示0.12</td>
</tr>
<tr>
<td align="left">%m.nf</td>
<td align="left">表示m个字段(也就是字符，多出来的补空格),后面的.nf如上</td>
</tr>
<tr>
<td align="left">%s</td>
<td align="left">字符串</td>
</tr>
<tr>
<td align="left">%p</td>
<td align="left">地址值</td>
</tr>
</tbody></table>
<p>整型可以与进制或unsigned一起使用，<code>%ho</code>表示8进制的short，<code>%hu</code>表示unsigned short</p>
<p><a href="https://www.runoob.com/cprogramming/c-function-printf.html" target="_blank" rel="noopener"><strong>详细</strong></a></p>
<h2 id="ASCII与char"><a href="#ASCII与char" class="headerlink" title="ASCII与char"></a>ASCII与char</h2><p>char类型对应ASCII表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">char c = 65;</span><br><span class="line">//输出A</span><br><span class="line">printf(&quot;%c\n&quot;, c);</span><br><span class="line"></span><br><span class="line">char c2 = &apos;A&apos;;</span><br><span class="line">//输出65</span><br><span class="line">printf(&quot;%d\n&quot;, c2);</span><br></pre></td></tr></table></figure>

<p>详细请参考<a href="https://baike.baidu.com/item/ASCII/309296?fr=aladdin" target="_blank" rel="noopener"><strong>ASCII表</strong></a></p>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>这些字符直接写的话，不会直接被识别需要用到转义符<code>\</code></p>
<table>
<thead>
<tr>
<th align="left">写法</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\n</td>
<td align="left">换行</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">制表符（一大段空格</td>
</tr>
<tr>
<td align="left">\</td>
<td align="left">一个\</td>
</tr>
<tr>
<td align="left">&#39;</td>
<td align="left">一个’</td>
</tr>
<tr>
<td align="left">&quot;</td>
<td align="left">一个”</td>
</tr>
<tr>
<td align="left">\0oo</td>
<td align="left">8进制值，oo必须是0-7中的一个数</td>
</tr>
<tr>
<td align="left">\xhh</td>
<td align="left">16进制值，hh必须是0-9和a-f中的一个数</td>
</tr>
</tbody></table>
<p>\n可以刷新printf的缓冲区</p>
<h2 id="include-lt-limits-h-gt-与-include-lt-float-h-gt"><a href="#include-lt-limits-h-gt-与-include-lt-float-h-gt" class="headerlink" title="#include &lt;limits.h&gt;与#include &lt;float.h&gt;"></a>#include &lt;limits.h&gt;与#include &lt;float.h&gt;</h2><p><code>#include &lt;limits.h&gt;</code>可以查询整型类型的范围</p>
<p><code>#include &lt;float.h&gt;</code>可以查询浮点类型的范围</p>
<h2 id="可移植类型，-include-lt-stdint-h-gt-与-include-lt-inttypes-h-gt"><a href="#可移植类型，-include-lt-stdint-h-gt-与-include-lt-inttypes-h-gt" class="headerlink" title="可移植类型，#include &lt;stdint.h&gt;与#include &lt;inttypes.h&gt;"></a>可移植类型，#include &lt;stdint.h&gt;与#include &lt;inttypes.h&gt;</h2><p><code>就是给类型起了别名</code></p>
<h2 id="记数法"><a href="#记数法" class="headerlink" title="记数法"></a>记数法</h2><p><code>1^9</code>等同于<code>1的9次幂</code>或者是<code>1的9次方</code></p>
<table>
<thead>
<tr>
<th align="left">数字</th>
<th align="left">科学记数法</th>
<th align="left">指数记数法</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1000000000</td>
<td align="left">1.0 * 10^9</td>
<td align="left">1.0e+9</td>
</tr>
<tr>
<td align="left">123000</td>
<td align="left">1.23 * 10^5</td>
<td align="left">1.23e+5</td>
</tr>
<tr>
<td align="left">322.56</td>
<td align="left">3.2256 * 10^2</td>
<td align="left">3.2256e+2</td>
</tr>
<tr>
<td align="left">0.000056</td>
<td align="left">5.6 * 10^-5</td>
<td align="left">5.6e-5</td>
</tr>
</tbody></table>
<p><code>浮点数的printf打印</code><br>|写法|功能<br>|:-|:-<br>|%e|指数记数法<br>|%lf|long double<br>|%f|float或double<br>|%a|16进制的指数</p>
<p>可以与指数记数法配合写</p>
<h2 id="浮点数的上溢出和下溢出"><a href="#浮点数的上溢出和下溢出" class="headerlink" title="浮点数的上溢出和下溢出"></a>浮点数的上溢出和下溢出</h2><p>上溢出表示数字过大，下溢出则表示数字过小</p>
<p>上溢出是未定义的，下溢出则是将尾数部分的位向右移1个二进制位，并丢弃最后一个二进制位</p>
<h2 id="复数与虚数类型"><a href="#复数与虚数类型" class="headerlink" title="复数与虚数类型"></a>复数与虚数类型</h2><p>了解即可</p>
<p>包含在<code>#include &lt;complex.h&gt;</code></p>
<h2 id="类型大小"><a href="#类型大小" class="headerlink" title="类型大小"></a>类型大小</h2><p><code>sizeof(类型);</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// %zd匹配sizeof的返回类型</span><br><span class="line">printf(&quot;%zd&quot;, sizeof(int));</span><br></pre></td></tr></table></figure>

<h2 id="bool类型"><a href="#bool类型" class="headerlink" title="bool类型"></a>bool类型</h2><p>整型0表示假(false)，整型1或其他非0数表示真(true)</p>
<hr>
<h1 id="字符串和格式化输入-输出"><a href="#字符串和格式化输入-输出" class="headerlink" title="字符串和格式化输入/输出"></a>字符串和格式化输入/输出</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>由多个字符组成，并用<code>\0</code>空字符作为结束符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//char 数组</span><br><span class="line">char name[40];</span><br><span class="line"></span><br><span class="line">printf(&quot;输入你的名字：\n&quot;);</span><br><span class="line"></span><br><span class="line">//输入流</span><br><span class="line">//%s表示字符串，你最多输入39个字符，scanf函数会默认为字符串添加`\0`结束符</span><br><span class="line">//注意：\0是空白符（空格），也是字符串的结束符，输入一个空格后，只会输出第一个空格之前的字符串</span><br><span class="line">scanf(&quot;%s&quot;, name);</span><br><span class="line"></span><br><span class="line">printf(&quot;你的名字叫：%s\n&quot;, name);</span><br></pre></td></tr></table></figure>

<h2 id="字符串的操作"><a href="#字符串的操作" class="headerlink" title="字符串的操作"></a>字符串的操作</h2><p><strong>需要<code>#include &lt;string.h&gt;</code></strong></p>
<p>使用<code>strlen()</code>函数查看字符串的长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//基于上面的程序往下面添加</span><br><span class="line"></span><br><span class="line">printf(&quot;%zd\n&quot;, strlen(name));</span><br></pre></td></tr></table></figure>

<h2 id="scanf输入函数"><a href="#scanf输入函数" class="headerlink" title="scanf输入函数"></a>scanf输入函数</h2><p>声明：<code>int scanf(cong char*, ...)</code></p>
<ul>
<li><p>需要读取基本数据类型的值时，需要在变量前加上<code>&amp;</code></p>
</li>
<li><p>读取数组则不需要加，可以参考上面的名字输入程序</p>
</li>
</ul>
<p>返回值为-1时，表示到达了末尾处(EOF)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;, &amp;i);</span><br><span class="line"></span><br><span class="line">printf(&quot;i=%d\n&quot;, i);</span><br></pre></td></tr></table></figure>

<p><a href="https://www.runoob.com/cprogramming/c-function-scanf.html" target="_blank" rel="noopener"><strong>详细</strong></a></p>
<hr>
<h1 id="常量预处理"><a href="#常量预处理" class="headerlink" title="常量预处理"></a>常量预处理</h1><p><code>文件编译前所做的处理，叫做预处理</code></p>
<p><code>程序运行时不能修改的变量，叫做常量</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//这是个宏常量，带#的都是预处理</span><br><span class="line">#define FUN &quot;this is FUN&quot;</span><br><span class="line"></span><br><span class="line">//这也是一种常量，常量必须有值</span><br><span class="line">const int i = 11;</span><br><span class="line"></span><br><span class="line">//错误，值不能修改</span><br><span class="line">i = 99;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.runoob.com/cprogramming/c-preprocessors.html" target="_blank" rel="noopener"><strong>预处理详细</strong></a></p>
<p><a href="https://www.runoob.com/cprogramming/c-constants.html" target="_blank" rel="noopener"><strong>常量详细</strong></a></p>
<hr>
<h1 id="运算符，表达式和语句"><a href="#运算符，表达式和语句" class="headerlink" title="运算符，表达式和语句"></a>运算符，表达式和语句</h1><p><strong><code>算术运算符</code></strong></p>
<table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">=</td>
<td align="left">赋值运算符，赋值从右到左</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">加法运算符</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">剑法运算符</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">乘法运算符</td>
</tr>
<tr>
<td align="left">/</td>
<td align="left">除法运算符</td>
</tr>
<tr>
<td align="left">%</td>
<td align="left">取模运算符</td>
</tr>
<tr>
<td align="left">++</td>
<td align="left">自增1，++i为立刻自增1，i++为碰到<code>;</code>才自增1</td>
</tr>
<tr>
<td align="left">–</td>
<td align="left">自减1，–i为立刻自减1，i–为碰到<code>;</code>才自减1</td>
</tr>
<tr>
<td align="left">符号运算+</td>
<td align="left">+i，表示i为正数</td>
</tr>
<tr>
<td align="left">符号运算-</td>
<td align="left">-i，表示i为负数</td>
</tr>
</tbody></table>
<blockquote>
<p>算术运算符会返回数值</p>
</blockquote>
<p><strong><code>关系运算符</code></strong></p>
<table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&lt;</td>
<td align="left">小于</td>
</tr>
<tr>
<td align="left">&gt;</td>
<td align="left">大于</td>
</tr>
<tr>
<td align="left">==</td>
<td align="left">等于</td>
</tr>
<tr>
<td align="left">!=</td>
<td align="left">不等于</td>
</tr>
<tr>
<td align="left">&lt;=</td>
<td align="left">小于等于</td>
</tr>
<tr>
<td align="left">&gt;=</td>
<td align="left">大于等于</td>
</tr>
</tbody></table>
<blockquote>
<p>关系运算符会返回bool值</p>
</blockquote>
<p><code>一元运算符</code>表示只操作一个对象，比如：-i;</p>
<p><code>二元运算符</code>表示需要操作二个对象，比如：a + b;</p>
<p><code>三元运算符</code>条件 ?  true : false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//三元表达式演示</span><br><span class="line">int a = 11,</span><br><span class="line">	b = 22;</span><br><span class="line"></span><br><span class="line">//这里a小于b，结果为false，返回b</span><br><span class="line">int c = a &gt; b ? a : b;</span><br></pre></td></tr></table></figure>

<p><code>表达式</code></p>
<blockquote>
<p>由运算符和对象组成<br>比如：a + b; //这是一个加法表达式<br>a + (b + c); //b + c为 a的子表达式</p>
</blockquote>
<p><code>语句</code></p>
<blockquote>
<p>语句的结束使用<code>;</code><br>程序里写;表示一个空语句</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;	//空语句</span><br></pre></td></tr></table></figure>

<p><code>复合语句(块)</code>也就是循环语句</p>
<p><strong><code>其他赋值运算符</code></strong></p>
<table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">+=</td>
<td align="left">i = i + i2</td>
</tr>
<tr>
<td align="left">-=</td>
<td align="left">i = i - i2</td>
</tr>
<tr>
<td align="left">*=</td>
<td align="left">i = i * i2</td>
</tr>
<tr>
<td align="left">/=</td>
<td align="left">i = i / i2</td>
</tr>
<tr>
<td align="left">%=</td>
<td align="left">i = i % i2</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i  = 11, </span><br><span class="line">	i2 = 22;</span><br><span class="line"></span><br><span class="line">//此时，i值为33</span><br><span class="line">i += i2;	// i = i + i2;</span><br></pre></td></tr></table></figure>

<p><strong><code>逻辑运算符</code></strong></p>
<table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&amp;&amp;</td>
<td align="left">与</td>
</tr>
<tr>
<td align="left">||</td>
<td align="left">或</td>
</tr>
<tr>
<td align="left">!</td>
<td align="left">非</td>
</tr>
</tbody></table>
<blockquote>
<p>true &amp;&amp; false 结果为 false<br>false &amp;&amp; false 结果为 false<br>true &amp;&amp; true 结果为 true</p>
<p>true || false 结果为 true<br>false || false 结果为 false<br>true || true 结果为 true</p>
<p>!true 结果为 false<br>!false 结果为 true</p>
</blockquote>
<h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><p>用作于对象的分隔</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i = 1, i2 = 2, i3 = 3;</span><br></pre></td></tr></table></figure>

<h2 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h2><p>type name = (type)type2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//int 类型强转为 dougle类型</span><br><span class="line"></span><br><span class="line">int i = 22;</span><br><span class="line">double d = (double)i;</span><br></pre></td></tr></table></figure>

<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(条件)&#123;	//条件为bool类型，true则循环，false则跳出循环，break也可以跳出循环</span><br><span class="line">	//需要循环的语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(变量; 条件; 变量算术处理)&#123;</span><br><span class="line">	//需要循环的语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//必须会执行至少一次的循环</span><br><span class="line">do&#123;</span><br><span class="line">	//会执行一次的语句</span><br><span class="line">&#125; </span><br><span class="line">while(条件)&#123;</span><br><span class="line">	//需要循环的语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分支与跳转语句"><a href="#分支与跳转语句" class="headerlink" title="分支与跳转语句"></a>分支与跳转语句</h2><p><code>分支语句</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(条件)&#123;</span><br><span class="line">	//true则运行这里</span><br><span class="line">&#125;</span><br><span class="line">else if(条件)&#123;</span><br><span class="line">	//上一个if为false，并且这里的条件为true则运行这里</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">	//全部if和else if判断为false则运行这里</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在只有一个if和一个else的语句里，用三元表达式更加的简洁</strong></p>
<p><code>switch分支语句</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch(条件)&#123;</span><br><span class="line">	case 常量名:	//类似if</span><br><span class="line">		//语句</span><br><span class="line">	break;	//可选，没有的话会连同下面的case一直执行，直到没有case或者break为止</span><br><span class="line">	</span><br><span class="line">	default:		//类似else</span><br><span class="line">		//语句</span><br><span class="line">	break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="continue语句与break"><a href="#continue语句与break" class="headerlink" title="continue语句与break"></a>continue语句与break</h2><p><code>continue</code>表示无视这次的循环，直接进入到下一次的循环</p>
<p><code>break</code>表示跳出这个循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(unsigned int i = 0; i != 10; ++i)&#123;</span><br><span class="line">	if(i == 2)	//如果i的值等于2，就无视这次的循环</span><br><span class="line">		contunue;</span><br><span class="line">	else if(i == 8) // 如果i的值等于8，就跳出这个循环</span><br><span class="line">		break;</span><br><span class="line">	printf(&quot;%d\n&quot;, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="单字符IO"><a href="#单字符IO" class="headerlink" title="单字符IO"></a>单字符IO</h1><p>读取和输出一个字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 读取一个字符</span><br><span class="line">char c = getchar();</span><br><span class="line"></span><br><span class="line">// 输出一个字符</span><br><span class="line">putchar(c);</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="操作一个字符的工具-include-lt-ctype-h-gt"><a href="#操作一个字符的工具-include-lt-ctype-h-gt" class="headerlink" title="操作一个字符的工具#include &lt;ctype.h&gt;"></a>操作一个字符的工具#include &lt;ctype.h&gt;</h1><p>里面包含了一系列操作一个字符的函数</p>
<p><a href="https://www.runoob.com/cprogramming/c-standard-library-ctype-h.html" target="_blank" rel="noopener"><strong>详细</strong></a></p>
<hr>
<h1 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h1><p><img src="%E7%BC%93%E5%86%B2%E5%8C%BA.png" alt></p>
<blockquote>
<p>拿文本文件作比喻，你往里面输入内容，其实你输入的内容就是保存在缓冲区里（此时，你的内容可以随意的改变），<br>只有把文件保存了（刷新缓冲区），才能把内容输入到文件里</p>
</blockquote>
<blockquote>
<p>也有程序不需要缓冲区的，比如游戏的按键</p>
</blockquote>
<hr>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>返回值类型 函数名 (参数)</p>
<p><code>return</code>语句，跳出该函数</p>
<p>参数用<code>const</code>修饰则在函数里不能对其参数进行修改</p>
<p>参数分<code>形参</code>和<code>实参</code>两种</p>
<blockquote>
<p>形参：在函数内修改参数值，传入值不会被修改<br>实参：在函数内修改参数值，传入值会被修改</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//输出hellow并跳出该函数</span><br><span class="line">void m()&#123;	//无返回值，无参数函数</span><br><span class="line">	printf(&quot;hellow&quot;);</span><br><span class="line">	return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int m(int i)&#123;	//传入int类型形参，返回值类型为int</span><br><span class="line">	return i;	//这个i为新创建的变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int&amp; m (int &amp;i)&#123;	//传入int类型实参，返回类型为int类型的实参</span><br><span class="line">	return i;		//返回实参i，没有创建新的变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>自己调用自己的函数，而且必须要有结束条件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int m2(int i)&#123;</span><br><span class="line">	if(i == 9)&#123; // 结束条件，i的值为9</span><br><span class="line">		return i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	//递归</span><br><span class="line">	i = m2(++i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：递归函数非常吃资源，但也为某些程序提供了最简单的解决方案</p>
<hr>
<h1 id="数组和指针"><a href="#数组和指针" class="headerlink" title="数组和指针"></a>数组和指针</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>只能使用<code>常量</code>来声名数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 在main函数里定义int数组，值未定义</span><br><span class="line">int i[10];		//这个10为字面值常量</span><br><span class="line"></span><br><span class="line">const int size = 3; //常量</span><br><span class="line">//使用常量size声明和定义数组，并赋值</span><br><span class="line">int i2[size] = &#123;0,1,2&#125;	//i2内存放3个元素</span><br><span class="line"></span><br><span class="line">//输出数组i2内所有的元素</span><br><span class="line">for(unsigned int i = 0; i != size; ++i)</span><br><span class="line">	printf(&quot;%d&quot;, i2[i]);	//“[]”为索引符</span><br></pre></td></tr></table></figure>

<p><code>注意，假如数组在全局里定义，int类型的数组的值默认为0</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">//定义全局数组</span><br><span class="line">int i[3];	//默认值为0</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">	//普通数组</span><br><span class="line">	int i2[3];	//默认值为未定义</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int mian()&#123;</span><br><span class="line">	int i[3] = &#123;11,22&#125;; //如果初始化部分数组，剩余的元素的默认值为0</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">// 不写数组的大小，数组会根据元素个数来进行判断数组的大小</span><br><span class="line">	int i[] = &#123;1,2,3&#125;;		//此时数组大小为3</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//初始化特定元素</span><br><span class="line">//第二个元素值为9，其他元素默认初始化值为0</span><br><span class="line">int arr[3] = &#123;arr[1] = 9&#125;;</span><br></pre></td></tr></table></figure>

<p><code>C不会检查数组下标，假如你写个越界的下标，其作用是未定义的</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int arr[3] = &#123;1,2,3&#125;;</span><br><span class="line">//数组下标越界，其值未定义！！！</span><br><span class="line">printf(&quot;%d&quot;, arr[4]);</span><br></pre></td></tr></table></figure>

<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>也就是嵌套数组，数组里存储数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//声明和定义一个二维数组，并初始化</span><br><span class="line">//arr里存储着2个，int[4]的数组</span><br><span class="line">int arr[2][4] = &#123;</span><br><span class="line">	&#123;1,2,3,4&#125;,</span><br><span class="line">	&#123;5,,6,7,8&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 三维数组，维数以此类推</span><br><span class="line">int arr2[1][1][1];</span><br></pre></td></tr></table></figure>

<h2 id="变长数组"><a href="#变长数组" class="headerlink" title="变长数组"></a>变长数组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int size = 10;</span><br><span class="line">int arr[size];</span><br><span class="line">size += 10;	//数组长度变长了</span><br></pre></td></tr></table></figure>

<h2 id="指针与引用"><a href="#指针与引用" class="headerlink" title="指针与引用"></a>指针与引用</h2><p><code>指针</code>指向内存的地址值</p>
<blockquote>
<p>int *p; //为创建一个指针</p>
<p>*p;    //解引一个指针，获取指针内的值，假如指针没有值，则会出现未定义的操作</p>
<p>p++;    //p指向p的下一个地址值</p>
<p>p + 10; //p指向了p的后10个位置的地址值</p>
<p>p–;    //p指向了p之前1位的地址值</p>
<p>p - 10; //p指向了p之前10位的地址值</p>
<p>p == p2;    //地址值一样则true</p>
<p>p != p2    //地址值不一样则true</p>
<p>操作空指针的风险非常大！</p>
<p>int a = 2;</p>
<p>//注意：在=之前的&amp;叫做取别名，在=之后的&amp;叫做取地址值</p>
<p>int &amp;b = a; //&amp;b为a的别名，修改b的值，a的值也会被修改</p>
<p>int *p2 = &a;    //指针p2指向了a的地址值</p>
<p>*p2 = 33;        //解引指针获取指针内的值，修改值，其值改为33，此时a的值为33</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int *p;	//创建一个指针，指针并未指向任何位置，此时为空指针</span><br><span class="line"></span><br><span class="line">int a = 11;</span><br><span class="line"></span><br><span class="line">// &amp;a，获取a的地址值</span><br><span class="line">p = &amp;a; // 指针p指向了a的地址值</span><br></pre></td></tr></table></figure>

<p><code>注意：数组的名称是一个指针，它指向了数组里的第一个元素</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int arr[] = &#123;112,2,3&#125;;</span><br><span class="line"></span><br><span class="line">//输出：112</span><br><span class="line">printf(&quot;%d\n&quot;, *arr); // *为解引用符，获取指针内存放的值</span><br><span class="line"></span><br><span class="line">//指针自增，获取到数组的下一个元素</span><br><span class="line">++arr;</span><br><span class="line"></span><br><span class="line">//输出: 2</span><br><span class="line">printf(&quot;%d\n&quot;, *arr);</span><br></pre></td></tr></table></figure>

<h2 id="多级指针"><a href="#多级指针" class="headerlink" title="多级指针"></a>多级指针</h2><p>指向指针的指针</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int *p; //一级指针</span><br><span class="line">int **p2;	//二级指针</span><br><span class="line">int *** p3;		//三级指针</span><br><span class="line">// 多级指针以此类推</span><br><span class="line"></span><br><span class="line">p2 = &amp;p; // 二级指针指向一级指针</span><br><span class="line"></span><br><span class="line">p3 = &amp;p2; // 三级指针指向二级指针</span><br></pre></td></tr></table></figure>

<p>一维数组的名称就是一个一级指针</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int arr[9];</span><br><span class="line">int *p = arr;</span><br></pre></td></tr></table></figure>

<p>使用指针指向多维数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int arr[1][2];</span><br><span class="line">//指向二维数组的指针</span><br><span class="line">int (*p)[2] = arr;</span><br><span class="line"></span><br><span class="line">int a[1][2][3];</span><br><span class="line">//指向三维数组的指针，以此类推</span><br><span class="line">int (*p2)[2][3] = a;</span><br></pre></td></tr></table></figure>

<h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>使用指针指向函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//函数</span><br><span class="line">void m()&#123;&#125;	</span><br><span class="line"></span><br><span class="line">//创建一个函数指针，只能指向void返回类型，无参数的函数</span><br><span class="line">void (*p) ();</span><br><span class="line"></span><br><span class="line">//指针指向了函数m</span><br><span class="line">p = m;</span><br><span class="line"></span><br><span class="line">//解引指针，使用函数m，其作用与调用函数m一样</span><br><span class="line">(*p)();</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="字符串和字符串函数"><a href="#字符串和字符串函数" class="headerlink" title="字符串和字符串函数"></a>字符串和字符串函数</h1><p><code>字符串字面值</code>“xxx”直接用两双引号括着的字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//字符串的写法</span><br><span class="line">char c[4] = &quot;xxxx&quot;; //写多了字符会报错，写少了剩下的元素的默认值为`\0`</span><br><span class="line">const char *p = &quot;xxx&quot;;</span><br></pre></td></tr></table></figure>

<h2 id="多维字符数组与指针"><a href="#多维字符数组与指针" class="headerlink" title="多维字符数组与指针"></a>多维字符数组与指针</h2><p><img src="%E5%AD%97%E7%AC%A6%E4%B8%B2.jpg" alt></p>
<h2 id="字符串输入"><a href="#字符串输入" class="headerlink" title="字符串输入"></a>字符串输入</h2><p><code>puts</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 只显示字符串，而且自动加上换行符</span><br><span class="line">puts(&quot;xxx&quot;);</span><br><span class="line">//遇到\0就会停止</span><br></pre></td></tr></table></figure>

<p><code>fputs</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//stdout标准输出</span><br><span class="line">//c为字符串</span><br><span class="line">//n为输出数量</span><br><span class="line">fputs(c, n, 指定输出文件)</span><br><span class="line"></span><br><span class="line">//不会在末尾处添加\n</span><br><span class="line">//读取到结尾会返回空指针</span><br></pre></td></tr></table></figure>

<h2 id="字符串读取函数"><a href="#字符串读取函数" class="headerlink" title="字符串读取函数"></a>字符串读取函数</h2><p><code>fgets</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char c[100];</span><br><span class="line"></span><br><span class="line">//c字符串（参数1）</span><br><span class="line">//n为读取字符的最大数量</span><br><span class="line">//从文件读取n个字符，存储到c，不写n的话，默认值为c字符串长度-1的长度（参数2）</span><br><span class="line">//stdin为标准输入（参数3）</span><br><span class="line">fgets(c, n, 指定读取的文件);</span><br><span class="line"></span><br><span class="line">//会在字符串后面自动添加\n\0</span><br><span class="line">//读取文件结尾或读取错误则返回NULL</span><br></pre></td></tr></table></figure>

<p><code>gets_s</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//只从stdin获取数据</span><br><span class="line">//读取到\n会丢弃</span><br><span class="line">//读取到最大字符都还没读取到\n则返回空指针</span><br><span class="line">get_s(c, n);</span><br></pre></td></tr></table></figure>

<h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><p><a href="https://www.runoob.com/cprogramming/c-standard-library-string-h.html" target="_blank" rel="noopener">详细</a></p>
<h2 id="字符串转为整型"><a href="#字符串转为整型" class="headerlink" title="字符串转为整型"></a>字符串转为整型</h2><p>基于<code>#include &lt;stdlib.h&gt;</code>的功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i = atoi(&quot;99&quot;);</span><br><span class="line"></span><br><span class="line">long l = atol(&quot;99&quot;);</span><br><span class="line"></span><br><span class="line">double d = atof(&quot;9.99&quot;);</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//i的生命周期就是这个&#123;&#125;里，出去后就不存在了</span><br><span class="line">&#123;</span><br><span class="line">	int i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//错误，i不存在</span><br><span class="line">i = 11;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="寄存器变量"><a href="#寄存器变量" class="headerlink" title="寄存器变量"></a>寄存器变量</h1><p>存储在最快的可用内存里，访问和处理这些变量的速快很快，寄存器变量存放在cpu的<code>寄存器</code>里，导致无法<br>获取寄存器的地址值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//使用register修饰的变量，表示寄存器变量</span><br><span class="line">register int i;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="static静态修饰符"><a href="#static静态修饰符" class="headerlink" title="static静态修饰符"></a>static静态修饰符</h1><p>被static修饰的对象都会被存储到<code>静态池</code>，程序结束的时候，这些对象才会被释放</p>
<p>所以，用static修饰的对象它的生命周期都很长，</p>
<hr>
<h1 id="extern声明"><a href="#extern声明" class="headerlink" title="extern声明"></a>extern声明</h1><p>一个对象只能被定义一次，但可以有多次声明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//声明</span><br><span class="line">extern int i;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">	//定义</span><br><span class="line">	int i = 11;</span><br><span class="line">	</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="分配内存"><a href="#分配内存" class="headerlink" title="分配内存"></a>分配内存</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 分配n个int类型大小的内存，p指向了这个内存</span><br><span class="line">int *p = (int*) malloc(n * sizeof(int));</span><br><span class="line"></span><br><span class="line">//释放内存，与malloc搭配使用</span><br><span class="line">free();</span><br><span class="line"></span><br><span class="line">//类似malloc</span><br><span class="line">int *p = (int*) calloc(n * sizeof(int));</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="const-指针"><a href="#const-指针" class="headerlink" title="const 指针"></a>const 指针</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 顶层const，p指向的地址值不能改变，但p2的值可以改变</span><br><span class="line">int *const p = p2 ;</span><br><span class="line"></span><br><span class="line">// 底层const，p指向的值不能改变，但p2自己可以改变</span><br><span class="line">const int *p = p2;</span><br><span class="line"></span><br><span class="line">// 双层const，p指向的地址值和值不能改变</span><br><span class="line">const int *const p = p2;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="volatile限定符"><a href="#volatile限定符" class="headerlink" title="volatile限定符"></a>volatile限定符</h1><p>语法和const一样，但值可以改变</p>
<p>被用作于硬件地址以及在其他程序或多线程的共享数据</p>
<p><code>一旦使用该修饰符，对象则不会被编译器优化</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 易变位置</span><br><span class="line">volatile int i;</span><br><span class="line"></span><br><span class="line">// 易变位置指针</span><br><span class="line">volatile int *p;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="restrict限定符"><a href="#restrict限定符" class="headerlink" title="restrict限定符"></a>restrict限定符</h1><p>允许编译器优化，只能用于指针（只能被一个指针指向的对象）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 创建10个int空间的内存</span><br><span class="line">int * restrict p = (int*)malloc(10 * sizeof(int));</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h1><p>数据的输入与输出</p>
<p><a href="https://www.runoob.com/cprogramming/c-standard-library-stdio-h.html" target="_blank" rel="noopener"><strong>详细</strong></a></p>
<h2 id="标准I-O"><a href="#标准I-O" class="headerlink" title="标准I/O"></a>标准I/O</h2><p>拥有标准的输入输出与错误输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FILE* fp;</span><br><span class="line"></span><br><span class="line">//从fp获取一个字符</span><br><span class="line">getc(fp);</span><br><span class="line"></span><br><span class="line">//把字符c放到fp</span><br><span class="line">putc(c, fp);</span><br></pre></td></tr></table></figure>

<h2 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I/O"></a>文件I/O</h2><p><code>FILE* fopen(路径, 打开模式)</code>打开失败返回空指针</p>
<p><code>int fclose(FILE*)</code>文件关闭失败则返回EOF</p>
<p><a href="https://www.runoob.com/cprogramming/c-function-fopen.html" target="_blank" rel="noopener"><strong>fopen详细</strong></a></p>
<p><code>简单的文本读取程序</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 文件路径</span><br><span class="line">const char *path = &quot;/my_test/main.cpp&quot;;</span><br><span class="line">//以只读方式，打开该文件</span><br><span class="line">    FILE *fs = fopen(path, &quot;r&quot;);</span><br><span class="line">	if(fs == 0) //文件打开失败</span><br><span class="line">		exit(1);</span><br><span class="line">    for(int ch; (ch = getc(fs)) != EOF;) //获取文件里每一个字符</span><br><span class="line">        putchar(ch); // 输出每一个字符</span><br><span class="line">		</span><br><span class="line">	//关闭指定文件，必要时会刷新缓冲区</span><br><span class="line">	if(fclose(fs) != 0) // 关闭失败</span><br><span class="line">		exit(1);</span><br></pre></td></tr></table></figure>

<p><strong>指向标准文件的指针</strong></p>
<table>
<thead>
<tr>
<th align="left">写法</th>
<th align="left">功能</th>
<th align="left">设备</th>
</tr>
</thead>
<tbody><tr>
<td align="left">stdin</td>
<td align="left">标准输入</td>
<td align="left">键盘</td>
</tr>
<tr>
<td align="left">stdout</td>
<td align="left">标准输出</td>
<td align="left">屏幕</td>
</tr>
<tr>
<td align="left">stderr</td>
<td align="left">标准错误</td>
<td align="left">屏幕</td>
</tr>
</tbody></table>
<p><code>fprintf与fscanf类似printf与scanf只不过前者的第一个参数为FILE指针</code></p>
<p><code>fgets(字符串, n, FILE*)</code></p>
<p><code>fputs(字符串，FILE*)</code></p>
<p><strong>文件定位功能</strong></p>
<p><code>int fseek(FILE*, 偏移量, 模式)</code></p>
<p>返回值为0则一切正常，-1为出现错误</p>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">偏移量起始点</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SEEK_SET</td>
<td align="left">文件开始处</td>
</tr>
<tr>
<td align="left">SEEK_CUR</td>
<td align="left">当前文件</td>
</tr>
<tr>
<td align="left">SEEK_END</td>
<td align="left">文件末尾</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//定位到文件开始处</span><br><span class="line">fseek(fp, 0L, SEEK_SET);</span><br><span class="line"></span><br><span class="line">//定位到文件中的第10个字节</span><br><span class="line">fseek(fp, 10L, SEEK_SET);</span><br><span class="line"></span><br><span class="line">//当前位置偏移2个字节</span><br><span class="line">fseek(fp, 2L, SEEK_CUR);</span><br><span class="line"></span><br><span class="line">//定位到文件尾</span><br><span class="line">fseek(fp, 0, SEEK_END);</span><br><span class="line"></span><br><span class="line">//从文件尾，退回10个字节</span><br><span class="line">fseek(fp, -10L, SEEK_END);</span><br></pre></td></tr></table></figure>

<p><code>long ftell(FILE*)</code>该函数返回位置标识符的当前值。如果发生错误，则返回 -1L</p>
<p><strong>fpos_t类型</strong></p>
<blockquote>
<p>不是基本类型，它根据其他类型来定义，不能是数组类型<br>变量或对象可以在文件中指定一个位置</p>
</blockquote>
<p><code>int fgetops(FILE *restrict stream, fpos_t *restrict pos)</code>返回文件中当前位置距离文件开头的字节数<br>成功返回0，失败返回非0</p>
<p><code>int fsetpos(FILE *, const fpos_t*)</code>设置文件指针，指向偏移该值后指定的位置<br>成功返回0，失败返回非0</p>
<hr>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>如名字一样，将不同类型的数据封装到一个类型里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct name&#123; //结构声明</span><br><span class="line">	//成员数据</span><br><span class="line">	const char *n;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>成员数据</code>可以是函数，数组，可以是变量，也可以是struct数据结构</p>
<p><code>注意，结构体用字符串的话，需要用数组的，用指针的话可能会导致严重的问题</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 无结构标记</span><br><span class="line">struct &#123;</span><br><span class="line">	itn i;</span><br><span class="line">&#125;name;</span><br></pre></td></tr></table></figure>

<p><strong>初始化数据结构</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//数据结构a</span><br><span class="line">struct a&#123;</span><br><span class="line">        int i;</span><br><span class="line">        const char *c;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // 创建a类型的对象，并初始化对象</span><br><span class="line">    struct a dx = &#123;</span><br><span class="line">        11,</span><br><span class="line">        &quot;xx&quot;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p><strong><code>.</code>结构成员访问符</strong></p>
<p><strong><code>-&gt;</code>指针使用的结构成员访问符</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 访问成员变量i</span><br><span class="line">dx.i;</span><br><span class="line"></span><br><span class="line">// a类型的指针</span><br><span class="line">a *p;</span><br><span class="line"></span><br><span class="line">// 赋值</span><br><span class="line">p-&gt;i = 22;</span><br></pre></td></tr></table></figure>

<p><strong>伸缩性成员数组</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct a&#123;</span><br><span class="line">    int a;</span><br><span class="line">    int i[];	//伸缩数组</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct a *p = (struct a*)malloc(sizeof(struct a) + //a类型的大小加上额外添加的伸缩数组大小</span><br><span class="line">	5 * sizeof(int)); // 伸缩数组内含有5个元素</span><br><span class="line">    p-&gt;a = 11;</span><br><span class="line">    p-&gt;i[0] = 22;</span><br><span class="line">    p-&gt;i[4] = 99;</span><br></pre></td></tr></table></figure>

<h3 id="匿名数据结构"><a href="#匿名数据结构" class="headerlink" title="匿名数据结构"></a>匿名数据结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct a&#123;</span><br><span class="line">	int i;</span><br><span class="line">	double b;</span><br><span class="line">	struct&#123;1,1.1&#125;;	// 匿名数据结构</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="union联合数据类型"><a href="#union联合数据类型" class="headerlink" title="union联合数据类型"></a>union联合数据类型</h1><p>也是一种数据结构，只能存在一个有值的对象，一旦为另一个对象赋值，前一个被赋值的对象的值会消失</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union u&#123;</span><br><span class="line">	int i;</span><br><span class="line">	int i2;</span><br><span class="line">	int i3;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">union u dx;</span><br><span class="line"></span><br><span class="line">//此时i为1</span><br><span class="line">dx.i = 1;</span><br><span class="line"></span><br><span class="line">//此时i2为2，i没有值，只能存在一个有值的对象</span><br><span class="line">dx.i2 = 2;</span><br></pre></td></tr></table></figure>

<p><strong>匿名联合</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct a&#123;</span><br><span class="line">	union&#123;</span><br><span class="line">		int i;</span><br><span class="line">		double d;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>声明符号名称来表示常量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum e&#123;one = 1, twe = 2&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h1><p>用作于给类型取别名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef xxx int;</span><br><span class="line"></span><br><span class="line">xxx i =1;	//xxx是int类型的别名</span><br></pre></td></tr></table></figure>

<p><strong>用在struct</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct a&#123;</span><br><span class="line">	int i;</span><br><span class="line">	double b;</span><br><span class="line">&#125;name;</span><br><span class="line"></span><br><span class="line">// name是a类型的别名</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h1><p>二进制操作</p>
<table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">~</td>
<td align="left">1变0，0变1</td>
</tr>
<tr>
<td align="left">&amp;</td>
<td align="left">1与1的情况才是1，否则都为0</td>
</tr>
<tr>
<td align="left">|</td>
<td align="left">1与1和1与0都为1，0与0为0</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">1与0结果为1，其他都为0</td>
</tr>
</tbody></table>
<h2 id="掩码"><a href="#掩码" class="headerlink" title="掩码"></a>掩码</h2><p>通常使用<code>&amp;</code>按位与运算符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//a = a &amp; b</span><br><span class="line">a &amp;= b;</span><br></pre></td></tr></table></figure>

<p><img src="%E6%8E%A9%E7%A0%81.jpg" alt></p>
<h2 id="打开位（设置位）"><a href="#打开位（设置位）" class="headerlink" title="打开位（设置位）"></a>打开位（设置位）</h2><p>必须打开<code>1位</code>但其他位不变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//a = a | b</span><br><span class="line">a |= b;</span><br></pre></td></tr></table></figure>

<h2 id="关闭位（清空位）"><a href="#关闭位（清空位）" class="headerlink" title="关闭位（清空位）"></a>关闭位（清空位）</h2><p>关闭a里的<code>1位</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//a = a &amp; ~b</span><br><span class="line">a &amp;= ~b;</span><br></pre></td></tr></table></figure>

<h2 id="切换位"><a href="#切换位" class="headerlink" title="切换位"></a>切换位</h2><p>打开已关闭的位或关闭已打开的位</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//a = a ^ b;</span><br><span class="line">a ^= b;</span><br></pre></td></tr></table></figure>

<h2 id="检测位的值"><a href="#检测位的值" class="headerlink" title="检测位的值"></a>检测位的值</h2><p>a中的1位是否被设置位1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if((a &amp; b) == b)</span><br></pre></td></tr></table></figure>

<h2 id="移位运算符"><a href="#移位运算符" class="headerlink" title="移位运算符"></a>移位运算符</h2><p>针对2的次冥提供的乘法<code>&lt;&lt;</code>与除法<code>&gt;&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 二进制左移2位</span><br><span class="line">(10010) &lt;&lt; 2; //把前两个位丢弃，最后面补0，丢弃多少个位补多少个0</span><br><span class="line">结果：01000</span><br><span class="line"></span><br><span class="line">// 二进制右移2位</span><br><span class="line">(10010) &gt;&gt; 2; //把后两个位丢弃，最前面补0，丢弃多少个位补多少个0</span><br><span class="line">结果：00100</span><br></pre></td></tr></table></figure>

<h2 id="位字段（位域）"><a href="#位字段（位域）" class="headerlink" title="位字段（位域）"></a>位字段（位域）</h2><p>用作于紧凑存储数据的方式</p>
<p>signed int 或 unsigned组成的一组相邻位</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct&#123;</span><br><span class="line">	unsigned int a : 1;</span><br><span class="line">	unsigned int b : 1;</span><br><span class="line">	unsigned int c : 1;</span><br><span class="line">	unsigned int d : 1;</span><br><span class="line">&#125;prnt;</span><br></pre></td></tr></table></figure>

<p>可以通过<code>.</code>成员运算符给这些字段进行赋值</p>
<p><a href="https://www.runoob.com/cprogramming/c-bit-fields.html" target="_blank" rel="noopener"><strong>详细</strong></a></p>
<hr>
<h1 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h1><p>明示常量<code>#define</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//常量A表示10</span><br><span class="line">#define A 10</span><br><span class="line"></span><br><span class="line">//常量B表示字符串</span><br><span class="line">#define B &quot;aaaa \  // \反斜杠可以进行延续</span><br><span class="line">bbbb&quot;			   //延续到下一行</span><br></pre></td></tr></table></figure>

<p><code>宏函数</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define F(x,y) ((x)+(y))</span><br></pre></td></tr></table></figure>

<p><code>#include</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//系统目录</span><br><span class="line">#include &lt;&gt;</span><br><span class="line"></span><br><span class="line">//相对路径</span><br><span class="line">#include &quot;&quot;</span><br><span class="line"></span><br><span class="line">//绝对路径</span><br><span class="line">#include &quot;/a/b&quot;</span><br></pre></td></tr></table></figure>

<p><code>#undef</code>取消宏指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define A 1</span><br><span class="line"></span><br><span class="line">#undef A</span><br></pre></td></tr></table></figure>

<h2 id="条件宏"><a href="#条件宏" class="headerlink" title="条件宏"></a>条件宏</h2><p><code>#ifdef</code>表示宏存在则执行<code>#else</code>和else一样，<code>endif</code>是结束当前宏</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ifdef A</span><br><span class="line">	// 语句</span><br><span class="line">#else</span><br><span class="line">	//语句</span><br><span class="line">endif// A</span><br></pre></td></tr></table></figure>

<p><code>#ifndef</code>表示宏不存在则执行</p>
<p><code>#if</code>和if一样<code>#elif</code>和else if一样</p>
<hr>
<h1 id="内敛函数"><a href="#内敛函数" class="headerlink" title="内敛函数"></a>内敛函数</h1><p>可以避免不需要的开销，而且通常被定义在头文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 一般是inline和static配合使用</span><br><span class="line">inline static void m()&#123;&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>c/c++</category>
      </categories>
      <tags>
        <tag>c语言</tag>
      </tags>
  </entry>
  <entry>
    <title>参考</title>
    <url>/2019/10/01/%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<img src="/2019/10/01/参考/封面.jpg">

<a id="more"></a>

<h1 id="博客的美化参考"><a href="#博客的美化参考" class="headerlink" title="博客的美化参考"></a>博客的美化参考</h1><div class="tabs" id="参考"><ul class="nav-tabs"><li class="tab active"><a href="#参考-1">参考 1</a></li><li class="tab"><a href="#参考-2">参考 2</a></li><li class="tab"><a href="#参考-3">参考 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="参考-1"><p><a href="http://xyua.top/Hexo/hexo_next_blog.html#写在前面" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
</div><div class="tab-pane" id="参考-2"><p><a href="https://leafjame.github.io/posts/2114475547.html" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
</div><div class="tab-pane" id="参考-3"><p><a href="https://io-oi.me/tech/hexo-next-optimization/" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
</div></div></div>


<hr>
<h1 id="文章写法的参考"><a href="#文章写法的参考" class="headerlink" title="文章写法的参考"></a>文章写法的参考</h1><p><a href="https://blog.csdn.net/wsmrzx/article/details/81478945" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
<hr>
<h1 id="docker搭建wordpress参考"><a href="#docker搭建wordpress参考" class="headerlink" title="docker搭建wordpress参考"></a>docker搭建wordpress参考</h1><p><a href="https://www.jianshu.com/p/2faca4e1f6fb" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
<hr>
<h1 id="Linux系统C语言分段错误-Segmentation-fault"><a href="#Linux系统C语言分段错误-Segmentation-fault" class="headerlink" title="Linux系统C语言分段错误(Segmentation fault)"></a>Linux系统C语言分段错误(Segmentation fault)</h1><p><a href="https://blog.csdn.net/cs_polebear/article/details/38904783" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
]]></content>
  </entry>
  <entry>
    <title>相关下载</title>
    <url>/2019/10/01/%E7%9B%B8%E5%85%B3%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<img src="/2019/10/01/相关下载/封面.jpg">

<a id="more"></a>

<h1 id="我的整个next主题"><a href="#我的整个next主题" class="headerlink" title="我的整个next主题"></a>我的整个next主题</h1><a class="btn" href="https://pan.baidu.com/s/1-ZNihHTC0HeQk1O_e25clA" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>我的next主题</a>

<h1 id="黑群晖6-17与安装所需工具"><a href="#黑群晖6-17与安装所需工具" class="headerlink" title="黑群晖6.17与安装所需工具"></a>黑群晖6.17与安装所需工具</h1><a class="btn" href="https://pan.baidu.com/s/1D-biTMeb8zf33qrzb34uew" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>下载黑群晖6.17与安装所需的工具</a>]]></content>
  </entry>
  <entry>
    <title>学习路线</title>
    <url>/2019/10/01/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<img src="/2019/10/01/学习路线/封面.jpg">

<p>基于<code>c/c++</code>服务器开发的学习路线</p>
<p><code>学习要求：这是什么？用在什么地方？怎么用？</code></p>
<p><code>实践要求：运行代码 -&gt; 研究源码 -&gt; 定制修改</code></p>
<a id="more"></a>

<h1 id="基础语言"><a href="#基础语言" class="headerlink" title="基础语言"></a>基础语言</h1><h2 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h2><h3 id="C-primer-plus"><a href="#C-primer-plus" class="headerlink" title="C primer plus"></a>C primer plus</h3><blockquote>
<p>C语言基础</p>
</blockquote>
<h3 id="c-primer"><a href="#c-primer" class="headerlink" title="c++ primer"></a>c++ primer</h3><blockquote>
<p>C++基础</p>
</blockquote>
<h3 id="effective-c"><a href="#effective-c" class="headerlink" title="effective c++"></a>effective c++</h3><blockquote>
<p>为了能写出高效的C++代码</p>
</blockquote>
<h3 id="STL源码解剖"><a href="#STL源码解剖" class="headerlink" title="STL源码解剖"></a>STL源码解剖</h3><blockquote>
<p>了解STL的原理</p>
</blockquote>
<h3 id="深度探索C-对象模型"><a href="#深度探索C-对象模型" class="headerlink" title="深度探索C++对象模型"></a>深度探索C++对象模型</h3><blockquote>
<p>如其名</p>
</blockquote>
<hr>
<h1 id="linux基础"><a href="#linux基础" class="headerlink" title="linux基础"></a>linux基础</h1><h2 id="鸟哥linux私房菜"><a href="#鸟哥linux私房菜" class="headerlink" title="鸟哥linux私房菜"></a>鸟哥linux私房菜</h2><blockquote>
<p>学会linux的操作</p>
</blockquote>
<hr>
<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><blockquote>
<p>为了写出更好的程序</p>
</blockquote>
<h2 id="大话数据结构"><a href="#大话数据结构" class="headerlink" title="大话数据结构"></a>大话数据结构</h2><h2 id="数据结构与算法分析"><a href="#数据结构与算法分析" class="headerlink" title="数据结构与算法分析"></a>数据结构与算法分析</h2><h2 id="大话设计模式"><a href="#大话设计模式" class="headerlink" title="大话设计模式"></a>大话设计模式</h2><hr>
<h1 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h1><blockquote>
<p>开发的时候会和脚本语言混合使用</p>
</blockquote>
<h2 id="lua程序设计"><a href="#lua程序设计" class="headerlink" title="lua程序设计"></a>lua程序设计</h2><h2 id="lua设计与实现"><a href="#lua设计与实现" class="headerlink" title="lua设计与实现"></a>lua设计与实现</h2><hr>
<h1 id="linux系统编程"><a href="#linux系统编程" class="headerlink" title="linux系统编程"></a>linux系统编程</h1><blockquote>
<p>深入计算机的原理</p>
</blockquote>
<h2 id="unix环境高级编程"><a href="#unix环境高级编程" class="headerlink" title="unix环境高级编程"></a>unix环境高级编程</h2><hr>
<h1 id="linux网络编程"><a href="#linux网络编程" class="headerlink" title="linux网络编程"></a>linux网络编程</h1><blockquote>
<p>了解网络通讯</p>
</blockquote>
<h2 id="unix网络编程（一共两卷）"><a href="#unix网络编程（一共两卷）" class="headerlink" title="unix网络编程（一共两卷）"></a>unix网络编程（一共两卷）</h2><hr>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><blockquote>
<p>数据的存储</p>
</blockquote>
<h2 id="mysql必知必会"><a href="#mysql必知必会" class="headerlink" title="mysql必知必会"></a>mysql必知必会</h2><h2 id="mysql技术内幕"><a href="#mysql技术内幕" class="headerlink" title="mysql技术内幕"></a>mysql技术内幕</h2><h2 id="高性能mysql"><a href="#高性能mysql" class="headerlink" title="高性能mysql"></a>高性能mysql</h2><hr>
<h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><blockquote>
<p>将大问题划分为多个小问题处理</p>
</blockquote>
<h2 id="redis设计与实现"><a href="#redis设计与实现" class="headerlink" title="redis设计与实现"></a>redis设计与实现</h2><h2 id="redis实战"><a href="#redis实战" class="headerlink" title="redis实战"></a>redis实战</h2><hr>
<h1 id="网络库"><a href="#网络库" class="headerlink" title="网络库"></a>网络库</h1><blockquote>
<p>网络编程</p>
</blockquote>
<h2 id="muduo-c-网络库"><a href="#muduo-c-网络库" class="headerlink" title="muduo c++网络库"></a>muduo c++网络库</h2><hr>
]]></content>
  </entry>
  <entry>
    <title>使用vmare创建CentOS虚拟机</title>
    <url>/2019/09/30/%E4%BD%BF%E7%94%A8vmare%E5%88%9B%E5%BB%BACentOS%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<img src="/2019/09/30/使用vmare创建CentOS虚拟机/封面.jpg">

<p>使用<code>VMware Workstation Pro 15.5.0</code>创建<code>Cent8</code>虚拟机</p>
<a id="more"></a>

<h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><ul>
<li><p>安装<code>VMware Workstation</code><br>  <a href="https://my.vmware.com/en/web/vmware/info/slug/desktop_end_user_computing/vmware_workstation_pro/15_0?wd=&eqid=b6b2275d002558e3000000065d8cd9de" target="_blank" rel="noopener"><strong><font color="green">下载地址</font></strong></a></p>
</li>
<li><p>下载CentOS镜像<br>  <a href="https://www.centos.org/" target="_blank" rel="noopener"><strong><font color="green">CentOS官网</font></strong></a></p>
</li>
</ul>
<hr>
<h1 id="使用vmare创建虚拟机"><a href="#使用vmare创建虚拟机" class="headerlink" title="使用vmare创建虚拟机"></a>使用vmare创建虚拟机</h1><ol>
<li><p>创建虚拟机，选择<code>自定义</code></p>
</li>
<li><p>硬件兼容（我选的是最新的版本Workstaion）</p>
</li>
<li><p>选择稍后安装操作系统（这样做的原因是，你的镜像可能版本过高，vmare不能识别）</p>
</li>
<li><p><code>客户机操作系统</code>选<code>其他</code></p>
</li>
<li><p>自定义虚拟机名称，和选择虚拟机存储位置</p>
</li>
<li><p>自定义cpu性能</p>
</li>
<li><p>自定义内存大小</p>
</li>
<li><p>选择网络类型（我选的是<code>NAT</code>）</p>
</li>
<li><p>选择IO控制器类型（我选推荐的）</p>
</li>
<li><p>选择磁盘类型（我选择推荐）</p>
</li>
<li><p>虚拟机磁盘类型（看个人爱好，我选择创建虚拟硬盘）</p>
</li>
<li><p>设置容量，和选择虚拟磁盘（虚拟磁盘我选择单文件）</p>
</li>
<li><p>设置虚拟硬盘名称</p>
</li>
<li><p>虚拟机设置好后，选择”编辑虚拟机设置”，找到<code>CD/DVD</code>选项，选择<code>使用ISO镜像</code>，设置为：你的虚拟机镜像</p>
</li>
<li><p>打开虚拟机，进入到安装界面，<code>软件选择</code>选项，设置为：最小化安装</p>
</li>
<li><p>进入<code>磁盘分区</code>选项，选择”自定义分区“，按<code>+</code>号进行添加分区，分区如下：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">设置大小</th>
</tr>
</thead>
<tbody><tr>
<td align="left">biosboot</td>
<td align="left">2M左右</td>
</tr>
<tr>
<td align="left">/boot</td>
<td align="left">1G</td>
</tr>
<tr>
<td align="left">swap</td>
<td align="left">虚拟机内存的两倍大小</td>
</tr>
<tr>
<td align="left">/home</td>
<td align="left">1G以上，文件常规为:LVM</td>
</tr>
<tr>
<td align="left">/</td>
<td align="left">10G以上，文件常规为:LVM</td>
</tr>
</tbody></table>
<p>注意：为了开发和调试，一般选择<code>Performance Tools</code>和<code>Development Tools</code>即可</p>
<ol start="17">
<li>安装时可以设置<code>root</code>（超级用户）密码，和设置普通用户</li>
</ol>
<hr>
<h1 id="优化虚拟机速度"><a href="#优化虚拟机速度" class="headerlink" title="优化虚拟机速度"></a>优化虚拟机速度</h1><ol>
<li><p><code>vamre</code>里，<code>编辑</code> -&gt; <code>首选项</code> -&gt; <code>内存</code> -&gt; <code>额外内存</code>设置为：<code>调整所有虚拟机内存使其适应预留主机RAM</code></p>
</li>
<li><p><code>vamre</code>里，<code>编辑</code> -&gt; <code>首选项</code> -&gt; <code>优先级</code> -&gt; <code>默认进程优先级</code> -&gt; <code>捉取的输入内容</code>设置为：<code>高</code></p>
</li>
<li><p><code>编辑虚拟机设置</code> -&gt; <code>选项</code>，<code>高级</code> -&gt; <code>进程优先级</code> -&gt; <code>捉取的输入内容</code>设置为：<code>高</code></p>
</li>
<li><p><code>编辑虚拟机设置</code> -&gt; <code>选项</code>，<code>高级</code> -&gt; <code>收集调试信息</code> -&gt; <code>禁用内存页面修正</code> -&gt; <code>打勾</code></p>
</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>基于next主题，美化hexo博客</title>
    <url>/2019/09/27/%E5%9F%BA%E4%BA%8Enext%E4%B8%BB%E9%A2%98%EF%BC%8C%E7%BE%8E%E5%8C%96hexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<img src="/2019/09/27/基于next主题，美化hexo博客/封面.jpg">

<p>美化<code>hexo</code>博客</p>
<a id="more"></a> 

<h1 id="next使用文档"><a href="#next使用文档" class="headerlink" title="next使用文档"></a>next使用文档</h1><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener"><font color="green"><strong>官方文档</strong></font></a></p>
<hr>
<h1 id="设置next主题"><a href="#设置next主题" class="headerlink" title="设置next主题"></a>设置next主题</h1><p><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener"><font color="green"><strong>下载主题</strong></font></a></p>
<blockquote>
<p>将主题解压到<font color="red">blog</font>下的<strong>themes</strong>目录</p>
</blockquote>
<ul>
<li><p>修改<font color="red">_config.yml</font>配置文件</p>
<p>  theme: <strong>你主题的目录名</strong></p>
</li>
</ul>
<p><img src="%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE.png" alt></p>
<hr>
<h1 id="更改主题布局"><a href="#更改主题布局" class="headerlink" title="更改主题布局"></a>更改主题布局</h1><ul>
<li>next目录下的<font color="red">_config.yml</font>配置文件</li>
</ul>
<p>把<font color="red">#</font>去掉即可使用该布局</p>
<p><code><strong>Schemes:</strong></code><strong>选项</strong></p>
<blockquote>
<p>#scheme: Muse</p>
<p>#scheme: Mist</p>
<p>#scheme: Pisces</p>
<p>#scheme: Gemini</p>
</blockquote>
<p><img src="%E4%B8%BB%E9%A2%98%E6%A0%B7%E5%BC%8F.png" alt></p>
<hr>
<h1 id="添加标签与分类菜单"><a href="#添加标签与分类菜单" class="headerlink" title="添加标签与分类菜单"></a>添加标签与分类菜单</h1><ul>
<li>next目录下的_config.yml配置文件</li>
</ul>
<p>把<font color="red">#</font>去掉即可使用该菜单</p>
<p><code><strong>menu:</strong></code><strong>选项</strong></p>
<blockquote>
<p>home: / || home</p>
<p>#about: /about/ || user<br>tags: /tags/ || tags<br>categories: /categories/ || th<br>archives: /archives/ || archive</p>
<p>#schedule: /schedule/ || calendar</p>
<p>#sitemap: /sitemap.xml || sitemap</p>
<p>#commonweal: /404/ || heartbeat</p>
</blockquote>
<p><img src="%E8%8F%9C%E5%8D%95.png" alt></p>
<p><strong>git终端输入：</strong></p>
<blockquote>
<p>hexo n page tags<br>hexo n page categories</p>
</blockquote>
<ul>
<li>执行完后会在<font color="red">blog</font>下的<strong>source</strong>，会自动生成<strong>tags</strong>与<strong>categories</strong>目录</li>
</ul>
<p>打开<font color="red">blog/source/categories</font>下的<strong>index.md</strong>文件</p>
<blockquote>
<p>title: 分类<br>type: categories    //需要自己添加</p>
</blockquote>
<p><img src="%E5%88%86%E7%B1%BB.png" alt></p>
<p>打开<font color="red">blog/source/tags</font>下的<strong>index.md</strong>文件</p>
<blockquote>
<p>title: 标签<br>type: tags    //需要自己添加</p>
</blockquote>
<p><img src="%E6%A0%87%E7%AD%BE.png" alt></p>
<p>使用方法：<strong>在文章的最顶端</strong></p>
<blockquote>
<p>tags:<br>- A<br>categories:<br>- B</p>
</blockquote>
<p><img src="%E5%88%86%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8.png" alt></p>
<hr>
<h1 id="设置默认为简体中文显示"><a href="#设置默认为简体中文显示" class="headerlink" title="设置默认为简体中文显示"></a>设置默认为简体中文显示</h1><p><font color="red">blog</font>下的<font color="red">_config.yml</font>配置文件</p>
<p><code><strong>language:</strong></code><strong>选项</strong></p>
<blockquote>
<p>zh-Hans</p>
</blockquote>
<p><img src="%E8%AE%BE%E7%BD%AE%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87.png" alt></p>
<hr>
<h1 id="修改网页样式"><a href="#修改网页样式" class="headerlink" title="修改网页样式"></a>修改网页样式</h1><h3 id="修改展开侧栏后的文章页宽"><a href="#修改展开侧栏后的文章页宽" class="headerlink" title="修改展开侧栏后的文章页宽"></a>修改展开侧栏后的文章页宽</h3><ul>
<li>打开<font color="red">blog/themes/next/source/css/_variables/base.sty</font>文件</li>
</ul>
<p><strong><code>$content-desktop-large</code></strong>选项</p>
<p>我这里使用的是700px，按个人需求调整</p>
<p><img src="%E6%96%87%E7%AB%A0%E9%A1%B5%E5%AE%BD.png" alt></p>
<h3 id="修改小型代码块颜色"><a href="#修改小型代码块颜色" class="headerlink" title="修改小型代码块颜色"></a>修改小型代码块颜色</h3><ul>
<li>打开<font color="red">blog/themes/next/source/css/_variables/base.sty</font>文件</li>
</ul>
<p><strong>找到位置：</strong></p>
<blockquote>
<p>// Colors<br>// colors for use across theme.<br>// ————————————————–</p>
<p><strong>加入自定义颜色：</strong></p>
<p>$my-code-foreground = #dd0055          // 用 <font color="red">``</font> 围出的代码块字体颜色<br>$my-code-background = #eee          // 用 <font color="red">``</font> 围出的代码块背景颜色</p>
</blockquote>
<p><img src="%E5%B0%8F%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%9D%97%E9%A2%9C%E8%89%B2.png" alt></p>
<ul>
<li>打开<code>blog/themes/next/source\css/_custom/custom.styl</code>文件</li>
</ul>
<p><strong>加入自定义样式：</strong></p>
<blockquote>
<p>// 文章 <font color="red">``</font> 代码块<strong>(等同于 <font color="red">&lt;code&gt;&lt;/code&gt;</font> 代码块)</strong>的自定义样式<br>code {<br>   margin: 0px 3px;<br>   // 外围边框的大小与颜色<br>   border: 1px solid #999;<br>}</p>
</blockquote>
<p><img src="%E5%B0%8F%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%9D%97%E9%A2%9C%E8%89%B22.png" alt></p>
<table>
<thead>
<tr>
<th align="left">代码块</th>
<th align="left">预览</th>
</tr>
</thead>
<tbody><tr>
<td align="left">`预览`</td>
<td align="left"><code>预览</code></td>
</tr>
<tr>
<td align="left">&lt;code&gt;预览&lt;/code&gt;</td>
<td align="left"><code>预览</code></td>
</tr>
</tbody></table>
<h3 id="修改-Read-More-按钮样式（-阅读全文-按钮样式）"><a href="#修改-Read-More-按钮样式（-阅读全文-按钮样式）" class="headerlink" title="修改[Read More]按钮样式（[阅读全文]按钮样式）"></a>修改[Read More]按钮样式（[阅读全文]按钮样式）</h3><ul>
<li>打开<code>blog\themes\next\source\css\_custom\custom.styl</code>文件</li>
</ul>
<p><strong>加入自定义样式：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// [Read More]按钮样式</span><br><span class="line">.post-button .btn &#123;</span><br><span class="line">	color: #555 !important;</span><br><span class="line">	background-color: rgb(255, 255, 255);</span><br><span class="line">	border-radius: 3px;</span><br><span class="line">	font-size: 15px;</span><br><span class="line">	box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35);</span><br><span class="line">	border: none !important;</span><br><span class="line">	transition-property: unset;</span><br><span class="line">	padding: 0px 15px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-button .btn:hover &#123;</span><br><span class="line">	color: rgb(255, 255, 255) !important;</span><br><span class="line">	border-radius: 3px;</span><br><span class="line">	font-size: 15px;</span><br><span class="line">	box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35);</span><br><span class="line">	background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87%E6%8C%89%E9%92%AE.png" alt></p>
<p><strong>预览：</strong></p>
<p><img src="%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87%E6%8C%89%E9%92%AE%E9%A2%84%E8%A7%88.png" alt></p>
<h3 id="标签云样式"><a href="#标签云样式" class="headerlink" title="标签云样式"></a>标签云样式</h3><p>搜索<strong><code>&lt;div class=&quot;tag-cloud-tags&quot;&gt;</code></strong></p>
<pre><code>// 修改这里
默认： {{ tagcloud({min_font: 12, max_font: 30, amount: 300, color: true, start_color: '#ccc', end_color: '#111'}) }}    
&lt;/div&gt;</code></pre><p><strong>将内容修改为：</strong></p>
<pre><code>自定义：{{ tagcloud({min_font: 13, max_font: 31, amount: 1000, color: true, start_color: '#9733EE', end_color: '#FF512F'}) }}</code></pre><p><img src="%E6%A0%87%E7%AD%BE%E9%A2%9C%E8%89%B2code.png" alt></p>
<p><strong>预览：</strong></p>
<p><img src="%E6%A0%87%E7%AD%BE%E4%BA%91%E9%A2%84%E8%A7%88.png" alt></p>
<p>详细参数请参考：<a href="https://hexo.io/zh-cn/docs/helpers.html#tagcloud" target="_blank" rel="noopener"><strong><font color="green">Hexo官方文档-tagcloud样式</font></strong></a></p>
<h3 id="修改文章底部-号标签，改为图标"><a href="#修改文章底部-号标签，改为图标" class="headerlink" title="修改文章底部 # 号标签，改为图标"></a>修改文章底部 # 号标签，改为图标</h3><p>打开<code>blog/themes/next/layout/_macro/post.swig</code>文件</p>
<p>搜索<strong><code>rel=&quot;tag&quot;&gt;#</code></strong></p>
<blockquote>
<p>将<code>#</code>换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>
</blockquote>
<p><img src="%E6%96%87%E7%AB%A0%E6%9C%80%E5%BA%95%E4%B8%8B%E7%9A%84%E6%A0%87%E7%AD%BEcode.png" alt></p>
<p><strong>预览：</strong></p>
<p><img src="%E6%96%87%E7%AB%A0%E6%9C%80%E5%BA%95%E4%B8%8B%E7%9A%84%E6%A0%87%E7%AD%BE.png" alt></p>
<h3 id="设置头像为圆形，头像旋转"><a href="#设置头像为圆形，头像旋转" class="headerlink" title="设置头像为圆形，头像旋转"></a>设置头像为圆形，头像旋转</h3><p>打开<code>blog\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code></p>
<p><strong>添加样式：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 自定义头像样式</span><br><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">//设置圆形</span><br><span class="line">  border-radius: 80%;</span><br><span class="line">  transition: 2s all;</span><br><span class="line">&#125;</span><br><span class="line">//头像旋转</span><br><span class="line"> .site-author-image:hover&#123;</span><br><span class="line">   transform: rotate(360deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="%E5%A4%B4%E5%83%8F%E6%A0%B7%E5%BC%8Fcode.png" alt></p>
<p><strong>效果预览：</strong></p>
<video width="100%" height="400" src="/v/旋转头像.mp4" controls="controls">
</video>

<h3 id="隐藏底部”强力驱动”内容"><a href="#隐藏底部”强力驱动”内容" class="headerlink" title="隐藏底部”强力驱动”内容"></a>隐藏底部”强力驱动”内容</h3><ul>
<li><p>打开<code>blog/themes/next/_config.yml</code></p>
</li>
<li><p>将<code>powered</code>与<code>enable</code>设置为：<code>false</code></p>
</li>
</ul>
<p><img src="%E9%9A%90%E8%97%8F%E5%BC%BA%E5%8A%9B%E9%A9%B1%E5%8A%A8.png" alt></p>
<p><strong>预览：</strong></p>
<p><img src="%E9%9A%90%E8%97%8F%E5%BC%BA%E5%8A%9B%E9%A9%B1%E5%8A%A82.png" alt></p>
<h3 id="文章末尾添加”本文结束”标记"><a href="#文章末尾添加”本文结束”标记" class="headerlink" title="文章末尾添加”本文结束”标记"></a>文章末尾添加”本文结束”标记</h3><ul>
<li>打开blog/themes/next/layout/_macro/post.swig文件</li>
</ul>
<p>在<strong><code>{% if theme.wechat_subscriber.enabled and not is_index %}</code></strong>上一行添加：</p>
<pre><code>&lt;div style=&quot;text-align:center;color: #DC143C;font-size:25px;&quot;&gt; 自定义结束标记 &lt;/div&gt;</code></pre><p><img src="%E6%96%87%E6%9C%AC%E7%BB%93%E6%9D%9F%E6%A0%87%E8%AE%B0.png" alt></p>
<h3 id="添加背景图片"><a href="#添加背景图片" class="headerlink" title="添加背景图片"></a>添加背景图片</h3><p>打开<code>blog\themes\next\source\css\_custom\custom.styl</code>文件</p>
<p><strong>添加：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//背景</span><br><span class="line">body &#123;</span><br><span class="line">	background:url(/路径/图片);</span><br><span class="line">	background-repeat: no-repeat;</span><br><span class="line">	background-attachment:fixed;</span><br><span class="line">	background-position:50% 50%;</span><br><span class="line">	background-size: cover;</span><br><span class="line">	-webkit-background-size: cover;</span><br><span class="line">	-o-background-size: cover;</span><br><span class="line">	-moz-background-size: cover;</span><br><span class="line">	-ms-background-size: cover;</span><br><span class="line"></span><br><span class="line">	/*这是设置底部文字, 看个人需要修改*/</span><br><span class="line">	#footer &gt; div &gt; div &#123;</span><br><span class="line">		color:#eee;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//background-size:cover为可能有助于大分辨率下背景图的显示</span><br><span class="line">//修改不透明度（可加可不加，看实际效果）</span><br><span class="line">//因为next主题的背景是纯透明的，这样子就造成背景图片的影响看不见文字。</span><br><span class="line">//调整背景的不透明度可以更加美观，参数opacity:建议调整0.8至0.95之间。</span><br><span class="line">.main-inner &#123; </span><br><span class="line">	margin-top: 60px;</span><br><span class="line">	padding: 60px 60px 60px 60px;</span><br><span class="line">	background: #fff;</span><br><span class="line">	opacity: 0.9;</span><br><span class="line">	min-height: 500px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文章与右侧栏的设置"><a href="#文章与右侧栏的设置" class="headerlink" title="文章与右侧栏的设置"></a>文章与右侧栏的设置</h3><p>打开<code>blog\themes\next\source\css\_custom\custom.styl</code>文件</p>
<p><strong>选择性添加：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// Custom styles.</span><br><span class="line">/*******************文章样式*****************************/</span><br><span class="line">// 文章</span><br><span class="line">.post &#123;</span><br><span class="line">	margin-bottom: 50px;</span><br><span class="line">	padding: 45px 36px 36px 36px;</span><br><span class="line">	box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5);</span><br><span class="line">	background-color: rgb(255, 255, 255);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 文章标题字体</span><br><span class="line">.posts-expand .post-title &#123;</span><br><span class="line">	font-size: 26px;</span><br><span class="line">	font-weight: 700;</span><br><span class="line">&#125;</span><br><span class="line">// 文章标题动态效果</span><br><span class="line">.posts-expand .post-title-link::before &#123;</span><br><span class="line">	background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);</span><br><span class="line">&#125;</span><br><span class="line">// 文章元数据（meta）留白更改</span><br><span class="line">.posts-expand .post-meta &#123;</span><br><span class="line">	margin: 10px 0px 20px 0px;</span><br><span class="line">&#125;</span><br><span class="line">// 文章的描述description</span><br><span class="line">.posts-expand .post-meta .post-description &#123;</span><br><span class="line">	font-style: italic;</span><br><span class="line">	font-size: 14px;</span><br><span class="line">	margin-top: 30px;</span><br><span class="line">	margin-bottom: 0px;</span><br><span class="line">	color: #666;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 去除在页面文章之间的分割线</span><br><span class="line">.posts-expand .post-eof &#123;</span><br><span class="line">	margin: 0px;</span><br><span class="line">	background-color: rgba(255, 255, 255, 0);</span><br><span class="line">&#125;</span><br><span class="line">// 去除页面底部页码上面的横线</span><br><span class="line">.pagination &#123;</span><br><span class="line">	border: none;</span><br><span class="line">	margin: 0px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 文章内标题样式（左边的竖线）</span><br><span class="line">.post-body h2, h3, h4, h5, h6 &#123;</span><br><span class="line">	border-left: 4px solid rgb(161, 102, 171);</span><br><span class="line">	margin-left: -36px;</span><br><span class="line">	padding-left: 32px;</span><br><span class="line">&#125;</span><br><span class="line">// 去掉图片边框</span><br><span class="line">.posts-expand .post-body img &#123;</span><br><span class="line">	border: none;</span><br><span class="line">	padding: 0px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//文章内链接文本样式</span><br><span class="line">.post-body p a&#123;</span><br><span class="line">color: #0593d3;</span><br><span class="line">border-bottom: none;</span><br><span class="line">border-bottom: 1px solid #0593d3;</span><br><span class="line">&amp;:hover &#123;</span><br><span class="line">	color: #fc6423;</span><br><span class="line">	border-bottom: none;</span><br><span class="line">	border-bottom: 1px solid #fc6423;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 自定义的文章摘要图片样式</span><br><span class="line">img.img-topic &#123;</span><br><span class="line">	width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*************************侧栏样式****************************/</span><br><span class="line"></span><br><span class="line">// 右下角侧栏按钮样式（正方形里面有3个横杠的按钮）</span><br><span class="line">.sidebar-toggle &#123;</span><br><span class="line">	right: 10px;</span><br><span class="line">	bottom: 43px;</span><br><span class="line">	background-color: rgba(255, 127, 80, 0.75);	// 正方形的颜色</span><br><span class="line">	border-radius: 5px;</span><br><span class="line">	box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.35);</span><br><span class="line">&#125;</span><br><span class="line">.page-post-detail .sidebar-toggle-line &#123;</span><br><span class="line">	background: rgb(220,220,220); // 三条横杠的颜色</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 右下角返回顶部按钮样式（有个↑的按钮）</span><br><span class="line">.back-to-top &#123;</span><br><span class="line">	line-height: 1.5;</span><br><span class="line">	right: 10px;</span><br><span class="line">	padding-right: 5px;</span><br><span class="line">	padding-left: 5px;</span><br><span class="line">	padding-top: 2.5px;</span><br><span class="line">	padding-bottom: 2.5px;</span><br><span class="line">	background-color: rgba(255, 127, 80, 0.75, 0.75); //正方形颜色</span><br><span class="line">	border-radius: 5px;</span><br><span class="line">	box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.35); // ↑颜色</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侧栏（侧栏的背景色）</span><br><span class="line">.sidebar &#123;</span><br><span class="line">	box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.5);</span><br><span class="line">	background-color: rgba(0,0,0, 0.75); // 背景颜色</span><br><span class="line">&#125;</span><br><span class="line">.sidebar-inner &#123;</span><br><span class="line">	margin-top: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侧栏顶部文字（文章目录，站点概览的颜色）</span><br><span class="line">.sidebar-nav li &#123;</span><br><span class="line">	font-size: 15px;</span><br><span class="line">	font-weight: bold;</span><br><span class="line">	color: rgb(255, 127, 80);</span><br><span class="line">&#125;</span><br><span class="line">.sidebar-nav li:hover &#123;</span><br><span class="line">	color: rgb(161, 102, 171);</span><br><span class="line">&#125;</span><br><span class="line">.sidebar-nav .sidebar-nav-active &#123;</span><br><span class="line">	color: rgb(153,50,204); </span><br><span class="line">	border-bottom-color: rgb(161, 102, 171);</span><br><span class="line">	border-bottom-width: 1.5px;</span><br><span class="line">&#125;</span><br><span class="line">.sidebar-nav .sidebar-nav-active:hover &#123;</span><br><span class="line">	color: rgb(100,149,237); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">// 侧栏站点作者名</span><br><span class="line">.site-author-name &#123;</span><br><span class="line">	// display: none; //这个选项为不显示作者名</span><br><span class="line">	color: rgb(220,220,220); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侧栏站点文章、分类、标签</span><br><span class="line">.site-state &#123;</span><br><span class="line">	line-height: 1.3;</span><br><span class="line">	margin-left: 12px;</span><br><span class="line">&#125;</span><br><span class="line">.site-state-item &#123;</span><br><span class="line">	padding: 0px 15px;</span><br><span class="line">	border-left: 1.5px solid rgb(161, 102, 171);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侧栏目录链接样式</span><br><span class="line">.post-toc ol a &#123;</span><br><span class="line">	color: rgb(0,255,255); // 未被选中时的颜色</span><br><span class="line">	border-bottom: 1px solid rgb(96, 125, 139);</span><br><span class="line">&#125;</span><br><span class="line">.post-toc ol a:hover &#123;</span><br><span class="line">	color: rgb(250,235,215); // 被鼠标选中但不点击时的颜色</span><br><span class="line">	border-bottom-color: rgb(161, 102, 171);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侧栏目录链接样式之当前目录</span><br><span class="line">.post-toc .nav .active &gt; a &#123;</span><br><span class="line">	color: rgb(161, 102, 171);</span><br><span class="line">	border-bottom-color: rgb(205,92,92); //被选中时下划线的颜色</span><br><span class="line">&#125;</span><br><span class="line">.post-toc .nav .active &gt; a:hover &#123;</span><br><span class="line">	color: rgb(161, 102, 171);</span><br><span class="line">	border-bottom-color: rgb(30,144,255); //鼠标指针指向但未点击，下划线的颜色</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 修侧栏目录bug，如果主题配置文件_config.yml的toc是wrap: true */</span><br><span class="line">.post-toc ol &#123;</span><br><span class="line">	padding: 0px 10px 5px 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 侧栏目录默认全展开，已注释</span><br><span class="line">.post-toc .nav .nav-child &#123;</span><br><span class="line">	display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/************************移动端样式*******************************/</span><br><span class="line">@media (max-width: 1023px) &#123;</span><br><span class="line">	.container &#123;</span><br><span class="line">		background-color: rgba(0, 0, 0, 0);</span><br><span class="line">	&#125;</span><br><span class="line">	.sidebar &#123;</span><br><span class="line">		// box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5);</span><br><span class="line">		border-top-left-radius: 5px;</span><br><span class="line">		border-bottom-left-radius: 5px;</span><br><span class="line">	&#125;</span><br><span class="line">	.feed-link &#123;</span><br><span class="line">		display: none !important;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">@media (max-width: 767px) &#123;</span><br><span class="line">	.main &#123;</span><br><span class="line">		padding-bottom: 120px;</span><br><span class="line">	&#125;</span><br><span class="line">	.posts-expand &#123;</span><br><span class="line">		margin: 0px;</span><br><span class="line">		padding-top: 10px;</span><br><span class="line">	&#125;</span><br><span class="line">	.posts-expand .post-title &#123;</span><br><span class="line">		font-size: 22px;</span><br><span class="line">	&#125;</span><br><span class="line">	.posts-expand .post-meta &#123;</span><br><span class="line">		font-size: 10px;</span><br><span class="line">	&#125;</span><br><span class="line">	.post &#123;</span><br><span class="line">		margin-bottom: 30px !important;</span><br><span class="line">		padding: 20px 15px 15px 15px !important;</span><br><span class="line">	&#125;</span><br><span class="line">	.post-body h2, h3, h4, h5, h6 &#123;</span><br><span class="line">		margin-left: -15px;</span><br><span class="line">		padding-left: 11px;</span><br><span class="line">	&#125;</span><br><span class="line">	.posts-expand .post-tags &#123;</span><br><span class="line">		margin-top: 10px;</span><br><span class="line">	&#125;</span><br><span class="line">	.post-widgets &#123;</span><br><span class="line">		margin-top: 10px;</span><br><span class="line">	&#125;</span><br><span class="line">	.comments &#123;</span><br><span class="line">		margin: 40px 0px 40px 0px !important;</span><br><span class="line">	&#125;</span><br><span class="line">	.footer &#123;</span><br><span class="line">		// box-shadow: 0px -5px 10px 0px rgba(0, 0, 0, 0.5);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">.sidebar-active #sidebar-dimmer &#123;</span><br><span class="line">	opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 移动端左上角菜单按钮</span><br><span class="line">.site-nav-toggle &#123;</span><br><span class="line">	top: 35px;</span><br><span class="line">	left: 91px;</span><br><span class="line">	// background-color: #222;</span><br><span class="line">&#125;</span><br><span class="line">.btn-bar &#123;</span><br><span class="line">	background-color: rgb(0, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 移动端菜单</span><br><span class="line">@media (max-width: 767px) &#123;</span><br><span class="line">	.menu &#123;</span><br><span class="line">		text-align: center;</span><br><span class="line">		// box-shadow: 0px 5px 10px 0px rgba(0, 0, 0, 0.5);</span><br><span class="line">	&#125;</span><br><span class="line">	.site-nav &#123;</span><br><span class="line">		top: initial;</span><br><span class="line">		background-color: rgba(255, 255, 255, 0.75);</span><br><span class="line">		border-top: none;</span><br><span class="line">		border-bottom: none;</span><br><span class="line">		position: relative;</span><br><span class="line">		z-index: 1024;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//移动端顶部</span><br><span class="line">@media (max-width: 767px) &#123;</span><br><span class="line">	.site-title &#123;</span><br><span class="line">		font-size: 28px !important;</span><br><span class="line">		letter-spacing: 0px !important;</span><br><span class="line">	&#125;</span><br><span class="line">	.site-subtitle&#123;</span><br><span class="line">		letter-spacing: 0px !important;</span><br><span class="line">		padding-bottom: 0px !important;</span><br><span class="line">	&#125;</span><br><span class="line">	.site-meta &#123;</span><br><span class="line">		// box-shadow: 0px 5px 10px 0px rgba(0, 0, 0, 0.5);</span><br><span class="line">	&#125;</span><br><span class="line">	.menu .menu-item &#123;</span><br><span class="line">		margin: 0px 10px !important;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="往文章添加视频"><a href="#往文章添加视频" class="headerlink" title="往文章添加视频"></a>往文章添加视频</h1><p><strong>代码块：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;video width=&quot;100%&quot; height=&quot;400&quot; src=路径/视频.后缀 controls=&quot;controls&quot;&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="功能设置"><a href="#功能设置" class="headerlink" title="功能设置"></a>功能设置</h1><h3 id="侧栏添加建站时间"><a href="#侧栏添加建站时间" class="headerlink" title="侧栏添加建站时间"></a>侧栏添加建站时间</h3><p>打开<code>blog/themes/next/layout/_custom/sidebar.swig</code>文件</p>
<p><strong>添加：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 网站运行时间的设置 --&gt;</span><br><span class="line">&lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt; </span><br><span class="line">&lt;script&gt;   </span><br><span class="line"> var now = new Date();    function createtime() &#123;       </span><br><span class="line"> var grt= new Date(&quot;09/26/2019 13:14:21&quot;);//此处修改你的建站时间或者网站上线时间       </span><br><span class="line"> now.setTime(now.getTime()+250);        </span><br><span class="line">days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);</span><br><span class="line">  hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);       </span><br><span class="line"> if(String(hnum).length ==1 )&#123;hnum = &quot;0&quot; + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);        </span><br><span class="line">mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = &quot;0&quot; + mnum;&#125;        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);        </span><br><span class="line">snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = &quot;0&quot; + snum;&#125;        document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;已运行 &quot;+dnum+&quot; 天 &quot;;        </span><br><span class="line">document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;;    &#125;setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>网站侧栏即可预览</strong></p>
<h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3><p><strong>安装插件：</strong></p>
<blockquote>
<p>cnpm install hexo-generator-searchdb –save</p>
</blockquote>
<p>打开<code>blog/themes/next/_config_yml</code>文件</p>
<p><code>local_search:</code>选项里，<code>enable:</code>设置为<code>true</code>，<code>top_n_per_article:</code>设置为<code>-1</code></p>
<p><img src="%E6%90%9C%E7%B4%A2.png" alt></p>
<p><strong>网站最上方点击<code>搜索</code>即可预览</strong></p>
<h3 id="文章字数统计及阅读时常功能"><a href="#文章字数统计及阅读时常功能" class="headerlink" title="文章字数统计及阅读时常功能"></a>文章字数统计及阅读时常功能</h3><p><strong>安装插件：</strong></p>
<blockquote>
<p>cnpm install hexo-wordcount –save</p>
</blockquote>
<p>打开<code>blog/themes/next/_config_yml</code>文件</p>
<p><code>post_wordcount:</code>选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">item_text: true</span><br><span class="line">wordcount: true #单篇文章字数</span><br><span class="line">min2read: true #单篇阅读时长</span><br><span class="line">totalcount: true #站点总字数</span><br><span class="line">separated_meta: true</span><br></pre></td></tr></table></figure>

<p><img src="%E6%96%87%E5%AD%97%E7%BB%9F%E8%AE%A1.png" alt></p>
<h3 id="站点访问统计功能"><a href="#站点访问统计功能" class="headerlink" title="站点访问统计功能"></a>站点访问统计功能</h3><p>打开<code>blog/themes/next/_config_yml</code>文件</p>
<p><code>busuanzi_count</code>选项里的<code>enable:</code>设置为<code>true</code>，<code>page_pv:</code>设置为<code>false</code></p>
<p>打开<code>blog/themes/next/layout/_third-party/analytics/busuanzi-counter.swig</code>文件</p>
<p><strong>将<code>script async src=</code>的网站修改为：</strong></p>
<blockquote>
<p>//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</p>
</blockquote>
<p><img src="busuanzi.png" alt></p>
<p><strong>在网站最底部即可预览</strong></p>
<h3 id="文章阅读数统计"><a href="#文章阅读数统计" class="headerlink" title="文章阅读数统计"></a>文章阅读数统计</h3><ul>
<li><p>注册LeanCloud账号</p>
<p>  <a href="https://leancloud.cn/" target="_blank" rel="noopener"><strong><font color="green">LeanCloud官网</font></strong></a></p>
</li>
<li><p>进入<code>控制台</code>，<code>创建一个新应用</code></p>
</li>
<li><p>点击应用，进入到<code>存储</code>分页，创建一个名为<code>Counter</code>的<code>class</code>，<code>限制写入</code>挂钩</p>
</li>
</ul>
<p>打开<code>blog/theme/next/_config.yml</code>文件</p>
<p><strong><code>leancloud_visitors:</code>选项</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">enable: true</span><br><span class="line">app_id: # your app_id</span><br><span class="line">app_key: # your app_key</span><br></pre></td></tr></table></figure>

<p><strong>AppID和AppKey可以通过：</strong><br>LeanCloud应用的<code>设置</code>页面下的<code>自定义 API 服务域名</code>下的<code>应用keys</code>找到</p>
<p><code>设置安全域名</code><br>有时候我们的会在本地通过locahost:4000浏览并编辑我们的页面，在这种情况下，<br>LeanClound会记录很多没有意义的浏览次数。为了让统计的浏览次数有意义，<br>我们可以在应用-&gt;设置-&gt;安全中心-&gt;Web安全域名中设置自己博客的域名，<br>只有该域名可以访问LeanCloud系统，因此只会记录在这个域名下的访客数据。</p>
<p>LeanCloud应用的<code>设置</code>页面下的<code>安全中心</code>，<code>Web 安全域名</code>里填写你的网站</p>
<hr>
<h1 id="选项卡功能"><a href="#选项卡功能" class="headerlink" title="选项卡功能"></a>选项卡功能</h1><p>打开<code>blog/themes/next/_config_yml</code>文件</p>
<p><strong><code>tabs:</code>选项</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enable: true</span><br><span class="line">transition:</span><br><span class="line">  tabs: true</span><br><span class="line">  labels: true</span><br><span class="line">border_radius: 0</span><br></pre></td></tr></table></figure>

<div class="tabs" id="选项"><ul class="nav-tabs"><li class="tab active"><a href="#选项-1">选项 1</a></li><li class="tab"><a href="#选项-2">选项 2</a></li><li class="tab"><a href="#选项-3">选项 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="选项-1"><p>** A **</p>
</div><div class="tab-pane" id="选项-2"><p>** AA **</p>
</div><div class="tab-pane" id="选项-3"><p>** AAA **</p>
</div></div></div>

<p><strong>写法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs 选项 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">** A **</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">** AA **</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">** AAA **</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="侧栏添加网易云音乐播放器"><a href="#侧栏添加网易云音乐播放器" class="headerlink" title="侧栏添加网易云音乐播放器"></a>侧栏添加网易云音乐播放器</h1><ul>
<li><p>从网易云官网获取外部链接</p>
<p>  <img src="%E7%BD%91%E6%98%93%E4%BA%911.png" alt></p>
</li>
</ul>
<p>打开<code>blog/themes/next/layout/_custom/sidebar.swig</code>文件</p>
<p><strong>写入:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=&quot;变量名&quot;&gt;</span><br><span class="line">网易云音乐的外部链接</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="修改网站图标"><a href="#修改网站图标" class="headerlink" title="修改网站图标"></a>修改网站图标</h1><p>打开<code>blog/themes/next/_config_yml</code>文件</p>
<p><strong><code>favicon</code>选项</strong></p>
<blockquote>
<p>medium: 图标</p>
</blockquote>
<p><img src="%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.png" alt></p>
<hr>
<h1 id="设置主页文章的数量"><a href="#设置主页文章的数量" class="headerlink" title="设置主页文章的数量"></a>设置主页文章的数量</h1><p>打开<code>blog/_config.yml</code>配置文件</p>
<p><strong><code>index_generator:</code>选项</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path: &apos;&apos;</span><br><span class="line">per_page: 2 # 主页显示的文章数量</span><br><span class="line">order_by: -date # 文章排序的方式，默认以时间进行排序（最新的在前面）</span><br></pre></td></tr></table></figure>

<p><img src="%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%95%B0%E9%87%8F.png" alt></p>
<hr>
<h1 id="点击下载按钮"><a href="#点击下载按钮" class="headerlink" title="点击下载按钮"></a>点击下载按钮</h1><p><strong>预览：</strong></p>
<a class="btn" href="https://www.baidu.com" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击进入百度</a>

<p> <strong>源码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% btn https://www.baidu.com, 点进入载百度, download fa-lg fa-fw %&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="label-标签"><a href="#label-标签" class="headerlink" title="label 标签"></a>label 标签</h1><p>打开<code>blog/themes/next/_config_yml</code>文件</p>
<p><strong><code>label:</code>选项</strong></p>
<blockquote>
<p>label: true</p>
</blockquote>
<p><strong>写法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label default@内容 %&#125;</span><br></pre></td></tr></table></figure>


<table>
<thead>
<tr>
<th align="left">样式</th>
</tr>
</thead>
<tbody><tr>
<td align="left">default</td>
</tr>
<tr>
<td align="left">primary</td>
</tr>
<tr>
<td align="left">success</td>
</tr>
<tr>
<td align="left">info</td>
</tr>
<tr>
<td align="left">warning</td>
</tr>
<tr>
<td align="left">danger</td>
</tr>
</tbody></table>
<p><img src="lable.png" alt></p>
<p><strong>效果预览：</strong></p>
<ul>
<li><p>default</p>
  <span class="label default">内容</span>    
</li>
<li><p>primary</p>
  <span class="label primary">内容</span>
</li>
<li><p>success</p>
  <span class="label success">内容</span>
</li>
<li><p>info</p>
  <span class="label info">内容</span>
</li>
<li><p>warning</p>
  <span class="label warning">内容</span>
</li>
<li><p>danger</p>
  <span class="label danger">内容</span>

</li>
</ul>
<hr>
<h1 id="主页播图"><a href="#主页播图" class="headerlink" title="主页播图"></a>主页播图</h1><p>在<code>blog/themes/next/layout/_macro</code>目录下，创建<code>carousel.swig</code>文件</p>
<p><strong>carousel.swig文件内容:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% if theme.carousel.enable %&#125;</span><br><span class="line">&lt;script src=&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"></span><br><span class="line">.glyphicon-chevron-left:before&#123;</span><br><span class="line">	/* content: &quot;《&quot; */</span><br><span class="line">&#125;</span><br><span class="line">.glyphicon-chevron-right:before&#123;</span><br><span class="line">	/* content: &quot;》&quot; */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.right-siders&#123;</span><br><span class="line">   border-radius: 10px;</span><br><span class="line">   /*margin-top: 5px;*/</span><br><span class="line">   margin-bottom: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.my-carousel:hover&#123;</span><br><span class="line">  margin-left: 5px;</span><br><span class="line">  //padding: 5px 1px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  transform: scale(1.1);</span><br><span class="line">  box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media (max-width: 767px)&#123;</span><br><span class="line">	.rights&#123;</span><br><span class="line">		display: none;</span><br><span class="line">	&#125;</span><br><span class="line">	.carousel&#123;</span><br><span class="line">		width: 100% !important;</span><br><span class="line">		height: 100% !important;</span><br><span class="line">	&#125;</span><br><span class="line">	.slide&#123;</span><br><span class="line">		width: 100% !important;</span><br><span class="line">		height: 100% !important;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.carousel&#123;		/* 设置播图框 */</span><br><span class="line">	width: 65%;			</span><br><span class="line">	height: 100%;</span><br><span class="line">	position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.carousel-inner &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .item &#123;</span><br><span class="line">  display: none;</span><br><span class="line">  position: relative;</span><br><span class="line">  -webkit-transition: 0.6s ease-in-out left;</span><br><span class="line">  -o-transition: 0.6s ease-in-out left;</span><br><span class="line">  transition: 0.6s ease-in-out left;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .item &gt; img,</span><br><span class="line">.carousel-inner &gt; .item &gt; a &gt; img &#123;</span><br><span class="line">  line-height: 1;</span><br><span class="line">&#125;</span><br><span class="line">@media all and (transform-3d), (-webkit-transform-3d) &#123;</span><br><span class="line">  .carousel-inner &gt; .item &#123;</span><br><span class="line">    -webkit-transition: -webkit-transform 0.6s ease-in-out;</span><br><span class="line">    -moz-transition: -moz-transform 0.6s ease-in-out;</span><br><span class="line">    -o-transition: -o-transform 0.6s ease-in-out;</span><br><span class="line">    transition: transform 0.6s ease-in-out;</span><br><span class="line">    -webkit-backface-visibility: hidden;</span><br><span class="line">    -moz-backface-visibility: hidden;</span><br><span class="line">    backface-visibility: hidden;</span><br><span class="line">    -webkit-perspective: 1000px;</span><br><span class="line">    -moz-perspective: 1000px;</span><br><span class="line">    perspective: 1000px;</span><br><span class="line">  &#125;</span><br><span class="line">  .carousel-inner &gt; .item.next,</span><br><span class="line">  .carousel-inner &gt; .item.active.right &#123;</span><br><span class="line">    -webkit-transform: translate3d(100%, 0, 0);</span><br><span class="line">    transform: translate3d(100%, 0, 0);</span><br><span class="line">    left: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  .carousel-inner &gt; .item.prev,</span><br><span class="line">  .carousel-inner &gt; .item.active.left &#123;</span><br><span class="line">    -webkit-transform: translate3d(-100%, 0, 0);</span><br><span class="line">    transform: translate3d(-100%, 0, 0);</span><br><span class="line">    left: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  .carousel-inner &gt; .item.next.left,</span><br><span class="line">  .carousel-inner &gt; .item.prev.right,</span><br><span class="line">  .carousel-inner &gt; .item.active &#123;</span><br><span class="line">    -webkit-transform: translate3d(0, 0, 0);</span><br><span class="line">    transform: translate3d(0, 0, 0);</span><br><span class="line">    left: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .active,</span><br><span class="line">.carousel-inner &gt; .next,</span><br><span class="line">.carousel-inner &gt; .prev &#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .active &#123;</span><br><span class="line">  left: 0;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .next,</span><br><span class="line">.carousel-inner &gt; .prev &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .next &#123;</span><br><span class="line">  left: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .prev &#123;</span><br><span class="line">  left: -100%;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .next.left,</span><br><span class="line">.carousel-inner &gt; .prev.right &#123;</span><br><span class="line">  left: 0;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .active.left &#123;</span><br><span class="line">  left: -100%;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .active.right &#123;</span><br><span class="line">  left: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-control &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  /*width: 5%;*/</span><br><span class="line">  opacity: 0.5;</span><br><span class="line">  filter: alpha(opacity=50);</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  color: #fff;</span><br><span class="line">  text-align: center;</span><br><span class="line">  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.6);</span><br><span class="line">  background-color: rgba(0, 0, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line">.carousel-control.left &#123;</span><br><span class="line">  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.0001) 100%);</span><br><span class="line">  background-image: -o-linear-gradient(left, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.0001) 100%);</span><br><span class="line">  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.0001) 100%);</span><br><span class="line">  background-repeat: repeat-x;</span><br><span class="line">  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#80000000, endColorstr=#00000000, GradientType=1);</span><br><span class="line">&#125;</span><br><span class="line">.carousel-control.right &#123;</span><br><span class="line">  left: auto;</span><br><span class="line">  right: 0;</span><br><span class="line">  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, 0.0001) 0%, rgba(0, 0, 0, 0.5) 100%);</span><br><span class="line">  background-image: -o-linear-gradient(left, rgba(0, 0, 0, 0.0001) 0%, rgba(0, 0, 0, 0.5) 100%);</span><br><span class="line">  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.0001) 0%, rgba(0, 0, 0, 0.5) 100%);</span><br><span class="line">  background-repeat: repeat-x;</span><br><span class="line">  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#00000000, endColorstr=#80000000, GradientType=1);</span><br><span class="line">&#125;</span><br><span class="line">.carousel-control:hover,</span><br><span class="line">.carousel-control:focus &#123;</span><br><span class="line">  outline: 0;</span><br><span class="line">  color: #fff;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  opacity: 0.9;</span><br><span class="line">  filter: alpha(opacity=90);</span><br><span class="line">&#125;</span><br><span class="line">.carousel-control .icon-prev,</span><br><span class="line">.carousel-control .icon-next,</span><br><span class="line">.carousel-control .glyphicon-chevron-left,</span><br><span class="line">.carousel-control .glyphicon-chevron-right &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  margin-top: -10px;</span><br><span class="line">  z-index: 5;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">.carousel-control .icon-prev,</span><br><span class="line">.carousel-control .glyphicon-chevron-left &#123;</span><br><span class="line">  left: 50%;</span><br><span class="line">  margin-left: -10px;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">.carousel-control .icon-prev,</span><br><span class="line">.carousel-control .glyphicon-chevron-left &#123;</span><br><span class="line">  background: url(&apos;/images/icon-slides.png&apos;);</span><br><span class="line">  background-position-y: -20px;</span><br><span class="line">  left: 9px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">.carousel-control .icon-next,</span><br><span class="line">.carousel-control .glyphicon-chevron-right &#123;</span><br><span class="line">  right: 50%;</span><br><span class="line">  margin-right: -10px;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">.carousel-control .icon-next,</span><br><span class="line">.carousel-control .glyphicon-chevron-right &#123;</span><br><span class="line">  background: url(&apos;/images/icon-slides.png&apos;);</span><br><span class="line">  background-position-x: -50px;</span><br><span class="line">  background-position-y: -20px;</span><br><span class="line">  right: 0px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.carousel-control .icon-prev,</span><br><span class="line">.carousel-control .icon-next &#123;</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  line-height: 1;</span><br><span class="line">  font-family: serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.carousel-control .icon-prev:before &#123;</span><br><span class="line">  content: 2039;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-control .icon-next:before &#123;</span><br><span class="line">  content: 203a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.carousel-indicators &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  bottom: 2px;</span><br><span class="line">  left: 50%;</span><br><span class="line">  z-index: 15;</span><br><span class="line">  width: 60%;</span><br><span class="line">  margin-left: -30%;</span><br><span class="line">  padding-left: 0;</span><br><span class="line">  list-style: none;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-indicators li &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 30px;</span><br><span class="line">  height: 3px;</span><br><span class="line">  margin: 5px;</span><br><span class="line">  text-indent: -999px;</span><br><span class="line">  border: 1px solid #bbb;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  background-color: rgba(0, 0, 0, .24);</span><br><span class="line">&#125;</span><br><span class="line">.carousel-indicators .active &#123;</span><br><span class="line">  width: 30px;</span><br><span class="line">  height: 3px;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-caption &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 15%;</span><br><span class="line">  right: 15%;</span><br><span class="line">  bottom: 20px;</span><br><span class="line">  z-index: 10;</span><br><span class="line">  padding-top: 20px;</span><br><span class="line">  padding-bottom: 20px;</span><br><span class="line">  color: #fff;</span><br><span class="line">  text-align: center;</span><br><span class="line">  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.6);</span><br><span class="line">&#125;</span><br><span class="line">.carousel-caption .btn &#123;</span><br><span class="line">  text-shadow: none;</span><br><span class="line">&#125;</span><br><span class="line">@media screen and (min-width: 768px) &#123;</span><br><span class="line">  .carousel-control .glyphicon-chevron-left,</span><br><span class="line">  .carousel-control .glyphicon-chevron-right,</span><br><span class="line">  .carousel-control .icon-prev,</span><br><span class="line">  .carousel-control .icon-next &#123;</span><br><span class="line">    width: 30px;</span><br><span class="line">    height: 30px;</span><br><span class="line">    margin-top: -10px;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">  &#125;</span><br><span class="line">  .carousel-control .glyphicon-chevron-left,</span><br><span class="line">  .carousel-control .icon-prev &#123;</span><br><span class="line">    margin-left: -10px;</span><br><span class="line">  &#125;</span><br><span class="line">  .carousel-control .glyphicon-chevron-right,</span><br><span class="line">  .carousel-control .icon-next &#123;</span><br><span class="line">   /* margin-right: -10px; */</span><br><span class="line">  &#125;</span><br><span class="line">  .carousel-caption &#123;</span><br><span class="line">    left: 20%;</span><br><span class="line">    right: 20%;</span><br><span class="line">    padding-bottom: 30px;</span><br><span class="line">  &#125;</span><br><span class="line">  .carousel-indicators &#123;</span><br><span class="line">    bottom: -10px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div width=&quot;100%&quot; height=&quot;320px&quot; style=&quot;border: 0px; overflow: hidden; border-radius: 10px; margin-bottom: 25px;&quot; scrolling=&quot;no&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id=&quot;myCarousel&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot; data-interval=&quot;3500&quot; style=&quot;float:left&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 轮播（Carousel）指标 --&gt;</span><br><span class="line">      &lt;ol class=&quot;carousel-indicators&quot;&gt;</span><br><span class="line">      &#123;% set index = 0 %&#125;</span><br><span class="line">      &#123;% for item in theme.carousel.item %&#125;</span><br><span class="line">        &lt;li data-target=&quot;#myCarousel&quot; data-slide-to=&quot;&#123;&#123;index&#125;&#125;&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &#123;% set index = index+1 %&#125;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">      &lt;/ol&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 轮播（Carousel）项目 --&gt;</span><br><span class="line">      &lt;div class=&quot;carousel-inner&quot; style=&quot;height: 280px; border-radius: 10px; width: 100%;&quot;&gt;</span><br><span class="line">       &#123;% set act = 0 %&#125;</span><br><span class="line">       &#123;% for item in theme.carousel.item %&#125;</span><br><span class="line">          &#123;% if act===0 %&#125;</span><br><span class="line">          &lt;a class=&quot;item active&quot; href=&quot;&#123;&#123; url_for(item.link) &#125;&#125;&quot; target=&quot;_blank&quot; style=&quot;height: 100%;&quot;&gt;</span><br><span class="line">            &#123;# 添加 class=&quot;nofancybox&quot; 解决fancybox和图片链接冲突 #&#125;</span><br><span class="line">            &lt;img src=&quot;&#123;&#123;item.img&#125;&#125;&quot; class=&quot;nofancybox&quot;  style=&quot;width: 100%; height: 100%&quot; &gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">          &#123;% set act = 1 %&#125;</span><br><span class="line">          &#123;% elseif act===1 %&#125;</span><br><span class="line">            &lt;a class=&quot;item&quot; href=&quot;&#123;&#123; url_for(item.link) &#125;&#125;&quot; target=&quot;_blank&quot; style=&quot;height: 100%;&quot;&gt;</span><br><span class="line">              &lt;img src=&quot;&#123;&#123;item.img&#125;&#125;&quot; class=&quot;nofancybox&quot;  style=&quot;width: 100%; height: 100%;&quot; &gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 轮播（Carousel）导航 --&gt;</span><br><span class="line">      &lt;a class=&quot;left carousel-control&quot; data-target=&quot;#myCarousel&quot; href=&quot;javascript:void(0);&quot; role=&quot;button&quot; data-slide=&quot;prev&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;glyphicon glyphicon-chevron-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">      &lt;a class=&quot;right carousel-control&quot; data-target=&quot;#myCarousel&quot; href=&quot;javascript:void(0);&quot; role=&quot;button&quot; data-slide=&quot;next&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;glyphicon glyphicon-chevron-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">	&lt;div  class=&quot;rights&quot; style=&quot;width: 30%; height: 280px; margin-right: 0px;margin-left: 20px;float: left;&quot;&gt;</span><br><span class="line">       &lt;!-- 天气插件，地区在后面可以进行修改 --&gt;</span><br><span class="line">       &lt;iframe width=&quot;300px&quot; scrolling=&quot;no&quot; height=&quot;50px&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot; src=&quot;//i.tianqi.com/index.php?c=code&amp;id=12&amp;color=%23&amp;bdc=%23&amp;icon=1&amp;py=guangzhou&amp;num=2&amp;site=12&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">    </span><br><span class="line">       &lt;!-- 学习路线 --&gt;</span><br><span class="line">       &lt;div class=&quot;my-carousel&quot;&gt;</span><br><span class="line">         &lt;a href=&quot;/2019/10/01/学习路线/&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">            &lt;img class=&quot;right-siders nofancybox&quot; src=&quot;/images/lx.png&quot; width=&quot;100%&quot;/&gt;</span><br><span class="line">         &lt;/a&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">       &lt;!-- ss/ssr --&gt;</span><br><span class="line">       &lt;div class=&quot;my-carousel&quot;&gt;</span><br><span class="line">         &lt;a href=&quot;https://github.com/selierlin/Share-SSR-V2ray&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">           &lt;img class=&quot;right-siders nofancybox&quot; src=&quot;/images/ss.png&quot;/&gt;</span><br><span class="line">         &lt;/a&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 相关下载 --&gt;</span><br><span class="line">      &lt;div class=&quot;my-carousel&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;/2019/10/01/相关下载/&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">          &lt;img class=&quot;right-siders nofancybox&quot; src=&quot;/images/dw.png&quot;/&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 参考 --&gt;</span><br><span class="line">      &lt;div class=&quot;my-carousel&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;/2019/10/01/参考/&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">          &lt;img class=&quot;right-siders nofancybox&quot; src=&quot;/images/ck.png&quot;/&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：需要自己修改的东西：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">.carousel-control .icon-prev,里的图片位置</span><br><span class="line"></span><br><span class="line">.carousel-control .icon-next,里的图片位置</span><br><span class="line"></span><br><span class="line">**以上两个为播图框里的左右箭头**</span><br><span class="line"></span><br><span class="line">文件最后被注释的地方，里面href修改自己需要指向的网页，图片也要自己修改（需要条形图）</span><br></pre></td></tr></table></figure>

<p>打开<strong><code>/themes/next/layout/index.swig</code></strong>文件</p>
<ul>
<li><strong>找到</strong> <span class="label default">{% block content</span>%}</li>
</ul>
<ul>
<li><p><strong>往它的下一行添加：</strong></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--轮播图--&gt;</span><br><span class="line">&#123;% include &apos;_macro/carousel.swig&apos; %&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>可能会出现的问题</strong></p>
<p><img src="%E6%92%AD%E5%9B%BE%E9%97%AE%E9%A2%98.png" alt></p>
<p><strong>解决方法：</strong></p>
<ul>
<li>打开<code>/themes/next/source/js/src/utils.js</code>文件，搜索<code>wrapImageWithFancyBox</code>往<code>var $image = $(this);</code>下一行添加：<blockquote>
<p>if ($(this).hasClass(‘nofancybox’)) return;</p>
</blockquote>
</li>
</ul>
<p><img src="%E6%92%AD%E5%9B%BE%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3.png" alt></p>
<p>打开<code>blog/themes/next/layout/_macro/carousel.swig</code>文件（也就是刚刚创建的文件）</p>
<p>找到<code>img</code>代码块，往代码块里面添加<code>class=&quot;nofancybox&quot;</code></p>
<p><img src="img%E4%BB%A3%E7%A0%81%E5%9D%97.png" alt></p>
<hr>
<h1 id="代码复制功能"><a href="#代码复制功能" class="headerlink" title="代码复制功能"></a>代码复制功能</h1><p>在<code>blog/theme/next/source/js/src</code>目录创建名为<code>clipboard.min.js</code>的文件</p>
<p><strong>写入：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/*!</span><br><span class="line"> * clipboard.js v2.0.4</span><br><span class="line"> * https://zenorocha.github.io/clipboard.js</span><br><span class="line"> * </span><br><span class="line"> * Licensed MIT © Zeno Rocha</span><br><span class="line"> */</span><br><span class="line">!function(t,e)&#123;&quot;object&quot;==typeof exports&amp;&amp;&quot;object&quot;==typeof module?module.exports=e():&quot;function&quot;==typeof define&amp;&amp;define.amd?define([],e):&quot;object&quot;==typeof exports?exports.ClipboardJS=e():t.ClipboardJS=e()&#125;(this,function()&#123;return function(n)&#123;var o=&#123;&#125;;function r(t)&#123;if(o[t])return o[t].exports;var e=o[t]=&#123;i:t,l:!1,exports:&#123;&#125;&#125;;return n[t].call(e.exports,e,e.exports,r),e.l=!0,e.exports&#125;return r.m=n,r.c=o,r.d=function(t,e,n)&#123;r.o(t,e)||Object.defineProperty(t,e,&#123;enumerable:!0,get:n&#125;)&#125;,r.r=function(t)&#123;&quot;undefined&quot;!=typeof Symbol&amp;&amp;Symbol.toStringTag&amp;&amp;Object.defineProperty(t,Symbol.toStringTag,&#123;value:&quot;Module&quot;&#125;),Object.defineProperty(t,&quot;__esModule&quot;,&#123;value:!0&#125;)&#125;,r.t=function(e,t)&#123;if(1&amp;t&amp;&amp;(e=r(e)),8&amp;t)return e;if(4&amp;t&amp;&amp;&quot;object&quot;==typeof e&amp;&amp;e&amp;&amp;e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,&quot;default&quot;,&#123;enumerable:!0,value:e&#125;),2&amp;t&amp;&amp;&quot;string&quot;!=typeof e)for(var o in e)r.d(n,o,function(t)&#123;return e[t]&#125;.bind(null,o));return n&#125;,r.n=function(t)&#123;var e=t&amp;&amp;t.__esModule?function()&#123;return t.default&#125;:function()&#123;return t&#125;;return r.d(e,&quot;a&quot;,e),e&#125;,r.o=function(t,e)&#123;return Object.prototype.hasOwnProperty.call(t,e)&#125;,r.p=&quot;&quot;,r(r.s=0)&#125;([function(t,e,n)&#123;&quot;use strict&quot;;var r=&quot;function&quot;==typeof Symbol&amp;&amp;&quot;symbol&quot;==typeof Symbol.iterator?function(t)&#123;return typeof t&#125;:function(t)&#123;return t&amp;&amp;&quot;function&quot;==typeof Symbol&amp;&amp;t.constructor===Symbol&amp;&amp;t!==Symbol.prototype?&quot;symbol&quot;:typeof t&#125;,i=function()&#123;function o(t,e)&#123;for(var n=0;n&lt;e.length;n++)&#123;var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,&quot;value&quot;in o&amp;&amp;(o.writable=!0),Object.defineProperty(t,o.key,o)&#125;&#125;return function(t,e,n)&#123;return e&amp;&amp;o(t.prototype,e),n&amp;&amp;o(t,n),t&#125;&#125;(),a=o(n(1)),c=o(n(3)),u=o(n(4));function o(t)&#123;return t&amp;&amp;t.__esModule?t:&#123;default:t&#125;&#125;var l=function(t)&#123;function o(t,e)&#123;!function(t,e)&#123;if(!(t instanceof e))throw new TypeError(&quot;Cannot call a class as a function&quot;)&#125;(this,o);var n=function(t,e)&#123;if(!t)throw new ReferenceError(&quot;this hasn&apos;t been initialised - super() hasn&apos;t been called&quot;);return!e||&quot;object&quot;!=typeof e&amp;&amp;&quot;function&quot;!=typeof e?t:e&#125;(this,(o.__proto__||Object.getPrototypeOf(o)).call(this));return n.resolveOptions(e),n.listenClick(t),n&#125;return function(t,e)&#123;if(&quot;function&quot;!=typeof e&amp;&amp;null!==e)throw new TypeError(&quot;Super expression must either be null or a function, not &quot;+typeof e);t.prototype=Object.create(e&amp;&amp;e.prototype,&#123;constructor:&#123;value:t,enumerable:!1,writable:!0,configurable:!0&#125;&#125;),e&amp;&amp;(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)&#125;(o,c.default),i(o,[&#123;key:&quot;resolveOptions&quot;,value:function()&#123;var t=0&lt;arguments.length&amp;&amp;void 0!==arguments[0]?arguments[0]:&#123;&#125;;this.action=&quot;function&quot;==typeof t.action?t.action:this.defaultAction,this.target=&quot;function&quot;==typeof t.target?t.target:this.defaultTarget,this.text=&quot;function&quot;==typeof t.text?t.text:this.defaultText,this.container=&quot;object&quot;===r(t.container)?t.container:document.body&#125;&#125;,&#123;key:&quot;listenClick&quot;,value:function(t)&#123;var e=this;this.listener=(0,u.default)(t,&quot;click&quot;,function(t)&#123;return e.onClick(t)&#125;)&#125;&#125;,&#123;key:&quot;onClick&quot;,value:function(t)&#123;var e=t.delegateTarget||t.currentTarget;this.clipboardAction&amp;&amp;(this.clipboardAction=null),this.clipboardAction=new a.default(&#123;action:this.action(e),target:this.target(e),text:this.text(e),container:this.container,trigger:e,emitter:this&#125;)&#125;&#125;,&#123;key:&quot;defaultAction&quot;,value:function(t)&#123;return s(&quot;action&quot;,t)&#125;&#125;,&#123;key:&quot;defaultTarget&quot;,value:function(t)&#123;var e=s(&quot;target&quot;,t);if(e)return document.querySelector(e)&#125;&#125;,&#123;key:&quot;defaultText&quot;,value:function(t)&#123;return s(&quot;text&quot;,t)&#125;&#125;,&#123;key:&quot;destroy&quot;,value:function()&#123;this.listener.destroy(),this.clipboardAction&amp;&amp;(this.clipboardAction.destroy(),this.clipboardAction=null)&#125;&#125;],[&#123;key:&quot;isSupported&quot;,value:function()&#123;var t=0&lt;arguments.length&amp;&amp;void 0!==arguments[0]?arguments[0]:[&quot;copy&quot;,&quot;cut&quot;],e=&quot;string&quot;==typeof t?[t]:t,n=!!document.queryCommandSupported;return e.forEach(function(t)&#123;n=n&amp;&amp;!!document.queryCommandSupported(t)&#125;),n&#125;&#125;]),o&#125;();function s(t,e)&#123;var n=&quot;data-clipboard-&quot;+t;if(e.hasAttribute(n))return e.getAttribute(n)&#125;t.exports=l&#125;,function(t,e,n)&#123;&quot;use strict&quot;;var o,r=&quot;function&quot;==typeof Symbol&amp;&amp;&quot;symbol&quot;==typeof Symbol.iterator?function(t)&#123;return typeof t&#125;:function(t)&#123;return t&amp;&amp;&quot;function&quot;==typeof Symbol&amp;&amp;t.constructor===Symbol&amp;&amp;t!==Symbol.prototype?&quot;symbol&quot;:typeof t&#125;,i=function()&#123;function o(t,e)&#123;for(var n=0;n&lt;e.length;n++)&#123;var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,&quot;value&quot;in o&amp;&amp;(o.writable=!0),Object.defineProperty(t,o.key,o)&#125;&#125;return function(t,e,n)&#123;return e&amp;&amp;o(t.prototype,e),n&amp;&amp;o(t,n),t&#125;&#125;(),a=n(2),c=(o=a)&amp;&amp;o.__esModule?o:&#123;default:o&#125;;var u=function()&#123;function e(t)&#123;!function(t,e)&#123;if(!(t instanceof e))throw new TypeError(&quot;Cannot call a class as a function&quot;)&#125;(this,e),this.resolveOptions(t),this.initSelection()&#125;return i(e,[&#123;key:&quot;resolveOptions&quot;,value:function()&#123;var t=0&lt;arguments.length&amp;&amp;void 0!==arguments[0]?arguments[0]:&#123;&#125;;this.action=t.action,this.container=t.container,this.emitter=t.emitter,this.target=t.target,this.text=t.text,this.trigger=t.trigger,this.selectedText=&quot;&quot;&#125;&#125;,&#123;key:&quot;initSelection&quot;,value:function()&#123;this.text?this.selectFake():this.target&amp;&amp;this.selectTarget()&#125;&#125;,&#123;key:&quot;selectFake&quot;,value:function()&#123;var t=this,e=&quot;rtl&quot;==document.documentElement.getAttribute(&quot;dir&quot;);this.removeFake(),this.fakeHandlerCallback=function()&#123;return t.removeFake()&#125;,this.fakeHandler=this.container.addEventListener(&quot;click&quot;,this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement(&quot;textarea&quot;),this.fakeElem.style.fontSize=&quot;12pt&quot;,this.fakeElem.style.border=&quot;0&quot;,this.fakeElem.style.padding=&quot;0&quot;,this.fakeElem.style.margin=&quot;0&quot;,this.fakeElem.style.position=&quot;absolute&quot;,this.fakeElem.style[e?&quot;right&quot;:&quot;left&quot;]=&quot;-9999px&quot;;var n=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=n+&quot;px&quot;,this.fakeElem.setAttribute(&quot;readonly&quot;,&quot;&quot;),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,c.default)(this.fakeElem),this.copyText()&#125;&#125;,&#123;key:&quot;removeFake&quot;,value:function()&#123;this.fakeHandler&amp;&amp;(this.container.removeEventListener(&quot;click&quot;,this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&amp;&amp;(this.container.removeChild(this.fakeElem),this.fakeElem=null)&#125;&#125;,&#123;key:&quot;selectTarget&quot;,value:function()&#123;this.selectedText=(0,c.default)(this.target),this.copyText()&#125;&#125;,&#123;key:&quot;copyText&quot;,value:function()&#123;var e=void 0;try&#123;e=document.execCommand(this.action)&#125;catch(t)&#123;e=!1&#125;this.handleResult(e)&#125;&#125;,&#123;key:&quot;handleResult&quot;,value:function(t)&#123;this.emitter.emit(t?&quot;success&quot;:&quot;error&quot;,&#123;action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)&#125;)&#125;&#125;,&#123;key:&quot;clearSelection&quot;,value:function()&#123;this.trigger&amp;&amp;this.trigger.focus(),window.getSelection().removeAllRanges()&#125;&#125;,&#123;key:&quot;destroy&quot;,value:function()&#123;this.removeFake()&#125;&#125;,&#123;key:&quot;action&quot;,set:function()&#123;var t=0&lt;arguments.length&amp;&amp;void 0!==arguments[0]?arguments[0]:&quot;copy&quot;;if(this._action=t,&quot;copy&quot;!==this._action&amp;&amp;&quot;cut&quot;!==this._action)throw new Error(&apos;Invalid &quot;action&quot; value, use either &quot;copy&quot; or &quot;cut&quot;&apos;)&#125;,get:function()&#123;return this._action&#125;&#125;,&#123;key:&quot;target&quot;,set:function(t)&#123;if(void 0!==t)&#123;if(!t||&quot;object&quot;!==(void 0===t?&quot;undefined&quot;:r(t))||1!==t.nodeType)throw new Error(&apos;Invalid &quot;target&quot; value, use a valid Element&apos;);if(&quot;copy&quot;===this.action&amp;&amp;t.hasAttribute(&quot;disabled&quot;))throw new Error(&apos;Invalid &quot;target&quot; attribute. Please use &quot;readonly&quot; instead of &quot;disabled&quot; attribute&apos;);if(&quot;cut&quot;===this.action&amp;&amp;(t.hasAttribute(&quot;readonly&quot;)||t.hasAttribute(&quot;disabled&quot;)))throw new Error(&apos;Invalid &quot;target&quot; attribute. You can\&apos;t cut text from elements with &quot;readonly&quot; or &quot;disabled&quot; attributes&apos;);this._target=t&#125;&#125;,get:function()&#123;return this._target&#125;&#125;]),e&#125;();t.exports=u&#125;,function(t,e)&#123;t.exports=function(t)&#123;var e;if(&quot;SELECT&quot;===t.nodeName)t.focus(),e=t.value;else if(&quot;INPUT&quot;===t.nodeName||&quot;TEXTAREA&quot;===t.nodeName)&#123;var n=t.hasAttribute(&quot;readonly&quot;);n||t.setAttribute(&quot;readonly&quot;,&quot;&quot;),t.select(),t.setSelectionRange(0,t.value.length),n||t.removeAttribute(&quot;readonly&quot;),e=t.value&#125;else&#123;t.hasAttribute(&quot;contenteditable&quot;)&amp;&amp;t.focus();var o=window.getSelection(),r=document.createRange();r.selectNodeContents(t),o.removeAllRanges(),o.addRange(r),e=o.toString()&#125;return e&#125;&#125;,function(t,e)&#123;function n()&#123;&#125;n.prototype=&#123;on:function(t,e,n)&#123;var o=this.e||(this.e=&#123;&#125;);return(o[t]||(o[t]=[])).push(&#123;fn:e,ctx:n&#125;),this&#125;,once:function(t,e,n)&#123;var o=this;function r()&#123;o.off(t,r),e.apply(n,arguments)&#125;return r._=e,this.on(t,r,n)&#125;,emit:function(t)&#123;for(var e=[].slice.call(arguments,1),n=((this.e||(this.e=&#123;&#125;))[t]||[]).slice(),o=0,r=n.length;o&lt;r;o++)n[o].fn.apply(n[o].ctx,e);return this&#125;,off:function(t,e)&#123;var n=this.e||(this.e=&#123;&#125;),o=n[t],r=[];if(o&amp;&amp;e)for(var i=0,a=o.length;i&lt;a;i++)o[i].fn!==e&amp;&amp;o[i].fn._!==e&amp;&amp;r.push(o[i]);return r.length?n[t]=r:delete n[t],this&#125;&#125;,t.exports=n&#125;,function(t,e,n)&#123;var d=n(5),h=n(6);t.exports=function(t,e,n)&#123;if(!t&amp;&amp;!e&amp;&amp;!n)throw new Error(&quot;Missing required arguments&quot;);if(!d.string(e))throw new TypeError(&quot;Second argument must be a String&quot;);if(!d.fn(n))throw new TypeError(&quot;Third argument must be a Function&quot;);if(d.node(t))return s=e,f=n,(l=t).addEventListener(s,f),&#123;destroy:function()&#123;l.removeEventListener(s,f)&#125;&#125;;if(d.nodeList(t))return a=t,c=e,u=n,Array.prototype.forEach.call(a,function(t)&#123;t.addEventListener(c,u)&#125;),&#123;destroy:function()&#123;Array.prototype.forEach.call(a,function(t)&#123;t.removeEventListener(c,u)&#125;)&#125;&#125;;if(d.string(t))return o=t,r=e,i=n,h(document.body,o,r,i);throw new TypeError(&quot;First argument must be a String, HTMLElement, HTMLCollection, or NodeList&quot;);var o,r,i,a,c,u,l,s,f&#125;&#125;,function(t,n)&#123;n.node=function(t)&#123;return void 0!==t&amp;&amp;t instanceof HTMLElement&amp;&amp;1===t.nodeType&#125;,n.nodeList=function(t)&#123;var e=Object.prototype.toString.call(t);return void 0!==t&amp;&amp;(&quot;[object NodeList]&quot;===e||&quot;[object HTMLCollection]&quot;===e)&amp;&amp;&quot;length&quot;in t&amp;&amp;(0===t.length||n.node(t[0]))&#125;,n.string=function(t)&#123;return&quot;string&quot;==typeof t||t instanceof String&#125;,n.fn=function(t)&#123;return&quot;[object Function]&quot;===Object.prototype.toString.call(t)&#125;&#125;,function(t,e,n)&#123;var a=n(7);function i(t,e,n,o,r)&#123;var i=function(e,n,t,o)&#123;return function(t)&#123;t.delegateTarget=a(t.target,n),t.delegateTarget&amp;&amp;o.call(e,t)&#125;&#125;.apply(this,arguments);return t.addEventListener(n,i,r),&#123;destroy:function()&#123;t.removeEventListener(n,i,r)&#125;&#125;&#125;t.exports=function(t,e,n,o,r)&#123;return&quot;function&quot;==typeof t.addEventListener?i.apply(null,arguments):&quot;function&quot;==typeof n?i.bind(null,document).apply(null,arguments):(&quot;string&quot;==typeof t&amp;&amp;(t=document.querySelectorAll(t)),Array.prototype.map.call(t,function(t)&#123;return i(t,e,n,o,r)&#125;))&#125;&#125;,function(t,e)&#123;if(&quot;undefined&quot;!=typeof Element&amp;&amp;!Element.prototype.matches)&#123;var n=Element.prototype;n.matches=n.matchesSelector||n.mozMatchesSelector||n.msMatchesSelector||n.oMatchesSelector||n.webkitMatchesSelector&#125;t.exports=function(t,e)&#123;for(;t&amp;&amp;9!==t.nodeType;)&#123;if(&quot;function&quot;==typeof t.matches&amp;&amp;t.matches(e))return t;t=t.parentNode&#125;&#125;&#125;])&#125;);</span><br></pre></td></tr></table></figure>

<p>在<code>blog/theme/next/source/js/src</code>目录创建名为<code>clipboard-use.js</code>的文件</p>
<p><strong>写入：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">!function (e, t, a) &#123; </span><br><span class="line">  /* code */</span><br><span class="line">  var initCopyCode = function()&#123;</span><br><span class="line">    var copyHtml = &apos;&apos;;</span><br><span class="line">    copyHtml += &apos;&lt;button class=&quot;btn-copy&quot; data-clipboard-snippet=&quot;&quot;&gt;&apos;;</span><br><span class="line">    copyHtml += &apos;&lt;span&gt;复制&lt;/span&gt;&apos;;</span><br><span class="line">    copyHtml += &apos;&lt;/button&gt;&apos;;</span><br><span class="line">    $(&quot;.highlight .code pre&quot;).before(copyHtml);</span><br><span class="line">    new ClipboardJS(&apos;.btn-copy&apos;, &#123;</span><br><span class="line">        target: function(trigger) &#123;</span><br><span class="line">            return trigger.nextElementSibling;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  initCopyCode();</span><br><span class="line">&#125;(window, document);</span><br></pre></td></tr></table></figure>

<p><strong>添加样式：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//代码块复制按钮</span><br><span class="line">.highlight&#123;</span><br><span class="line">  //方便copy代码按钮（btn-copy）的定位</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.btn-copy &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    background-color: #eee;</span><br><span class="line">    background-image: linear-gradient(#fcfcfc,#eee);</span><br><span class="line">    border: 1px solid #d5d5d5;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">    font-size: 13px;</span><br><span class="line">    font-weight: 700;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">    color: #333;</span><br><span class="line">    -webkit-transition: opacity .3s ease-in-out;</span><br><span class="line">    -o-transition: opacity .3s ease-in-out;</span><br><span class="line">    transition: opacity .3s ease-in-out;</span><br><span class="line">    padding: 2px 6px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 5px;</span><br><span class="line">    top: 5px;</span><br><span class="line">    opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">.btn-copy span &#123;</span><br><span class="line">    margin-left: 5px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight:hover .btn-copy&#123;</span><br><span class="line">  opacity: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开<code>blog/themes/next/layout/_layout.swig</code>文件</p>
<p><strong>在最下方，<code>/body</code>之前添加：</strong></p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 代码块复制功能 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clipboard.min.js&quot;&gt;&lt;/script&gt;  </span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clipboard-use.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></code></pre><hr>
<h1 id="往侧栏添加颗粒时钟"><a href="#往侧栏添加颗粒时钟" class="headerlink" title="往侧栏添加颗粒时钟"></a>往侧栏添加颗粒时钟</h1><p>往<code>themes/next/layout/_custom</code>创建名为<code>clock.swig</code>的文件</p>
<p><strong>往文件写入：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div style=&quot;&quot;&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; style=&quot;width:60%;&quot;&gt;当前浏览器不支持canvas，请更换浏览器后再试&lt;/canvas&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">(function()&#123;</span><br><span class="line"></span><br><span class="line">   var digit=</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,1,1,0,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,0,1,1,0],</span><br><span class="line">            [0,0,1,1,1,0,0]</span><br><span class="line">        ],//0</span><br><span class="line">        [</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,1,1,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [1,1,1,1,1,1,1]</span><br><span class="line">        ],//1</span><br><span class="line">        [</span><br><span class="line">            [0,1,1,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,1,1,0,0,0,0],</span><br><span class="line">            [1,1,0,0,0,0,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,1,1,1,1,1]</span><br><span class="line">        ],//2</span><br><span class="line">        [</span><br><span class="line">            [1,1,1,1,1,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0]</span><br><span class="line">        ],//3</span><br><span class="line">        [</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,1,0],</span><br><span class="line">            [0,0,1,1,1,1,0],</span><br><span class="line">            [0,1,1,0,1,1,0],</span><br><span class="line">            [1,1,0,0,1,1,0],</span><br><span class="line">            [1,1,1,1,1,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,1,1]</span><br><span class="line">        ],//4</span><br><span class="line">        [</span><br><span class="line">            [1,1,1,1,1,1,1],</span><br><span class="line">            [1,1,0,0,0,0,0],</span><br><span class="line">            [1,1,0,0,0,0,0],</span><br><span class="line">            [1,1,1,1,1,1,0],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0]</span><br><span class="line">        ],//5</span><br><span class="line">        [</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,1,1,0,0,0,0],</span><br><span class="line">            [1,1,0,0,0,0,0],</span><br><span class="line">            [1,1,0,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0]</span><br><span class="line">        ],//6</span><br><span class="line">        [</span><br><span class="line">            [1,1,1,1,1,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0]</span><br><span class="line">        ],//7</span><br><span class="line">        [</span><br><span class="line">            [0,1,1,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0]</span><br><span class="line">        ],//8</span><br><span class="line">        [</span><br><span class="line">            [0,1,1,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,1,1,0,0,0,0]</span><br><span class="line">        ],//9</span><br><span class="line">        [</span><br><span class="line">            [0,0,0,0,0,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,0,0,0,0,0],</span><br><span class="line">            [0,0,0,0,0,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,0,0,0,0,0]</span><br><span class="line">        ]//:</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">var canvas = document.getElementById(&apos;canvas&apos;);</span><br><span class="line"></span><br><span class="line">if(canvas.getContext)&#123;</span><br><span class="line">    var cxt = canvas.getContext(&apos;2d&apos;);</span><br><span class="line">    //声明canvas的宽高</span><br><span class="line">    var H = 100,W = 700;</span><br><span class="line">    canvas.height = H;</span><br><span class="line">    canvas.width = W;</span><br><span class="line">    cxt.fillStyle = &apos;#f00&apos;;</span><br><span class="line">    cxt.fillRect(10,10,50,50);</span><br><span class="line"></span><br><span class="line">    //存储时间数据</span><br><span class="line">    var data = [];</span><br><span class="line">    //存储运动的小球</span><br><span class="line">    var balls = [];</span><br><span class="line">    //设置粒子半径</span><br><span class="line">    var R = canvas.height/20-1;</span><br><span class="line">    (function()&#123;</span><br><span class="line">        var temp = /(\d)(\d):(\d)(\d):(\d)(\d)/.exec(new Date());</span><br><span class="line">        //存储时间数字，由十位小时、个位小时、冒号、十位分钟、个位分钟、冒号、十位秒钟、个位秒钟这7个数字组成</span><br><span class="line">        data.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    /*生成点阵数字*/</span><br><span class="line">    function renderDigit(index,num)&#123;</span><br><span class="line">        for(var i = 0; i &lt; digit[num].length; i++)&#123;</span><br><span class="line">            for(var j = 0; j &lt; digit[num][i].length; j++)&#123;</span><br><span class="line">                if(digit[num][i][j] == 1)&#123;</span><br><span class="line">                    cxt.beginPath();</span><br><span class="line">                    cxt.arc(14*(R+2)*index + j*2*(R+1)+(R+1),i*2*(R+1)+(R+1),R,0,2*Math.PI);</span><br><span class="line">                    cxt.closePath();</span><br><span class="line">                    cxt.fill();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*更新时钟*/</span><br><span class="line">    function updateDigitTime()&#123;</span><br><span class="line">        var changeNumArray = [];</span><br><span class="line">        var temp = /(\d)(\d):(\d)(\d):(\d)(\d)/.exec(new Date());</span><br><span class="line">        var NewData = [];</span><br><span class="line">        NewData.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);</span><br><span class="line">        for(var i = data.length-1; i &gt;=0 ; i--)&#123;</span><br><span class="line">            //时间发生变化</span><br><span class="line">            if(NewData[i] !== data[i])&#123;</span><br><span class="line">                //将变化的数字值和在data数组中的索引存储在changeNumArray数组中</span><br><span class="line">                changeNumArray.push(i+&apos;_&apos;+(Number(data[i])+1)%10);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //增加小球</span><br><span class="line">        for(var i = 0; i&lt; changeNumArray.length; i++)&#123;</span><br><span class="line">            addBalls.apply(this,changeNumArray[i].split(&apos;_&apos;));</span><br><span class="line">        &#125;</span><br><span class="line">        data = NewData.concat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*更新小球状态*/</span><br><span class="line">    function updateBalls()&#123;</span><br><span class="line">        for(var i = 0; i &lt; balls.length; i++)&#123;</span><br><span class="line">            balls[i].stepY += balls[i].disY;</span><br><span class="line">            balls[i].x += balls[i].stepX;</span><br><span class="line">            balls[i].y += balls[i].stepY;</span><br><span class="line">            if(balls[i].x &gt; W + R || balls[i].y &gt; H + R)&#123;</span><br><span class="line">                balls.splice(i,1);</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*增加要运动的小球*/</span><br><span class="line">    function addBalls(index,num)&#123;</span><br><span class="line">        var numArray = [1,2,3];</span><br><span class="line">        var colorArray =  [&quot;#3BE&quot;,&quot;#09C&quot;,&quot;#A6C&quot;,&quot;#93C&quot;,&quot;#9C0&quot;,&quot;#690&quot;,&quot;#FB3&quot;,&quot;#F80&quot;,&quot;#F44&quot;,&quot;#C00&quot;];</span><br><span class="line">        for(var i = 0; i &lt; digit[num].length; i++)&#123;</span><br><span class="line">            for(var j = 0; j &lt; digit[num][i].length; j++)&#123;</span><br><span class="line">                if(digit[num][i][j] == 1)&#123;</span><br><span class="line">                    var ball = &#123;</span><br><span class="line">                        x:14*(R+2)*index + j*2*(R+1)+(R+1),</span><br><span class="line">                        y:i*2*(R+1)+(R+1),</span><br><span class="line">                        stepX:Math.floor(Math.random() * 4 -2),</span><br><span class="line">                        stepY:-2*numArray[Math.floor(Math.random()*numArray.length)],</span><br><span class="line">                        color:colorArray[Math.floor(Math.random()*colorArray.length)],</span><br><span class="line">                        disY:1</span><br><span class="line">                    &#125;;</span><br><span class="line">                    balls.push(ball);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*渲染*/</span><br><span class="line">    function render()&#123;</span><br><span class="line">        //重置画布宽度，达到清空画布的效果</span><br><span class="line">        canvas.height = 100;</span><br><span class="line">        //渲染时钟</span><br><span class="line">        for(var i = 0; i &lt; data.length; i++)&#123;</span><br><span class="line">            renderDigit(i,data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        //渲染小球</span><br><span class="line">        for(var i = 0; i &lt; balls.length; i++)&#123;</span><br><span class="line">            cxt.beginPath();</span><br><span class="line">            cxt.arc(balls[i].x,balls[i].y,R,0,2*Math.PI);</span><br><span class="line">            cxt.fillStyle = balls[i].color;</span><br><span class="line">            cxt.closePath();</span><br><span class="line">            cxt.fill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clearInterval(oTimer);</span><br><span class="line">    var oTimer = setInterval(function()&#123;</span><br><span class="line">        //更新时钟</span><br><span class="line">        updateDigitTime();</span><br><span class="line">        //更新小球状态</span><br><span class="line">        updateBalls();</span><br><span class="line">        //渲染</span><br><span class="line">        render();</span><br><span class="line">    &#125;,50);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>打开<code>themes/next/layout/_custom/sidebar.swig</code></p>
<p><strong>找个位置加入：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;lock&quot;&gt;</span><br><span class="line">&#123;% include &apos;../_custom/clock.swig&apos; %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="归档美化"><a href="#归档美化" class="headerlink" title="归档美化"></a>归档美化</h1><p>打开<code>/themes/next/layout/_macro/post-collapse.swig</code>文件,将<code>post-meta</code>这个div<br>移到前面<code>header</code>标签下</p>
<p>在<code>/themes/next/source/css/_custom/custom.styl</code>新增如下样式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 归档页样式 began */</span><br><span class="line">.page-archive .archive-page-counter &#123;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">  background-color: #49b1f5;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">  padding-right: 10px;</span><br><span class="line">  border-radius: 8px;</span><br><span class="line">  color: #fff;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.post-time&#123;</span><br><span class="line">  font-size: 11px;</span><br><span class="line">  position: absolute;</span><br><span class="line">  color: #fff;</span><br><span class="line">  background-color: #49b1f5;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  padding-left: 5px;</span><br><span class="line">  padding-right: 10px;</span><br><span class="line">  margin-left: 15px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  margin-bottom: 1rem;</span><br><span class="line">  -webkit-transition: all .2s ease-in-out;</span><br><span class="line">  -moz-transition: all .2s ease-in-out;</span><br><span class="line">  -o-transition: all .2s ease-in-out;</span><br><span class="line">  -ms-transition: all .2s ease-in-out;</span><br><span class="line">  transition: all .2s ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line">a.post-title-link:before&#123;</span><br><span class="line">  top: 10px;</span><br><span class="line">  width: 18px;</span><br><span class="line">  height: 18px;</span><br><span class="line">  content: &quot;*&quot;;</span><br><span class="line">  margin-right: 5px;</span><br><span class="line">  font: normal normal normal 14px/1 FontAwesome;</span><br><span class="line">  font-size: 15px;</span><br><span class="line">  line-height: 18px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post:hover&#123;</span><br><span class="line"> //transform: scale(1.1);</span><br><span class="line"> box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1);</span><br><span class="line"> border-radius: 30px;</span><br><span class="line"> //width: 90%; // 用鼠标指针选中文章页面时，会产生动态页面</span><br><span class="line"> padding: 1px 10px;</span><br><span class="line"> margin-left: 25px;</span><br><span class="line"> font-size: 16px;</span><br><span class="line"> transition-duration: 0.15s;</span><br><span class="line"> +mobile()&#123;</span><br><span class="line">   //width: 260px;</span><br><span class="line">   margin-left: 18px;</span><br><span class="line"> &#125;</span><br><span class="line">  display:false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.post-title-link&#123;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  font-size: 15px;</span><br><span class="line">  font-weight: 400;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-title&#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin-left: 4.5rem;</span><br><span class="line">  color: #4c4948;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  font-size: .8rem;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    margin-left: 4rem;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-header&#123;</span><br><span class="line">  position: top;</span><br><span class="line">  margin-bottom: 1rem;</span><br><span class="line">  -webkit-transition: all .2s ease-in-out;</span><br><span class="line">  -moz-transition: all .2s ease-in-out;</span><br><span class="line">  -o-transition: all .2s ease-in-out;</span><br><span class="line">  -ms-transition: all .2s ease-in-out;</span><br><span class="line">  transition: all .2s ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> .post-title-link&#123;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  font-weight: 100;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">// .post-meta&#123;</span><br><span class="line">//  position: absolute;</span><br><span class="line">//  color: #99a9bf;</span><br><span class="line">//  width: 80px;</span><br><span class="line">//  color: #114142;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">div.post-block.tag .collection-title h2 &#123;</span><br><span class="line">  border-width: 1px;</span><br><span class="line">  border-style: solid;</span><br><span class="line">  border-color: #3f3f3f;</span><br><span class="line">  border-radius: 20px;</span><br><span class="line">  font-size: 22px;</span><br><span class="line">  background-color: #b4e8fa;</span><br><span class="line">  padding: 2px 15px;</span><br><span class="line">  letter-spacing: 1.5px;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  color: #3f3f3f;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin: 10px 0 10px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  +mobile()&#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.category-list-link:hover&#123;</span><br><span class="line">  transform: scale(1.1);</span><br><span class="line">  box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1);</span><br><span class="line">  border-radius: 8px;</span><br><span class="line">  padding: 1px 1px;</span><br><span class="line">  margin-left: 5px;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  transition-duration: 0.15s;</span><br><span class="line">  //display:flex;</span><br><span class="line">&#125;</span><br><span class="line">/* 归档页样式 end */</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="标签页美化"><a href="#标签页美化" class="headerlink" title="标签页美化"></a>标签页美化</h1><p>在<code>/themes/next/layout/</code>目录下，新增tag-color.swig文件，填入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">     var alltags = document.getElementsByClassName(&apos;tag-cloud-tags&apos;);</span><br><span class="line">     var tags = alltags[0].getElementsByTagName(&apos;a&apos;);</span><br><span class="line">     for (var i = tags.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">       var r=Math.floor(Math.random()*75+130);</span><br><span class="line">       var g=Math.floor(Math.random()*75+100);</span><br><span class="line">       var b=Math.floor(Math.random()*75+80);</span><br><span class="line">       tags[i].style.background = &quot;rgb(&quot;+r+&quot;,&quot;+g+&quot;,&quot;+b+&quot;)&quot;;</span><br><span class="line">     &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .tag-cloud-tags&#123;</span><br><span class="line">    /*font-family: Helvetica, Tahoma, Arial;*/</span><br><span class="line">    /*font-weight: 100;*/</span><br><span class="line">    text-align: center;</span><br><span class="line">    counter-reset: tags;</span><br><span class="line">  &#125;</span><br><span class="line">  .tag-cloud-tags a&#123;</span><br><span class="line">    border-radius: 6px;</span><br><span class="line">    padding-right: 5px;</span><br><span class="line">    padding-left: 5px;</span><br><span class="line">    margin: 8px 5px 0px 0px;</span><br><span class="line">  &#125;</span><br><span class="line">  .tag-cloud-tags a:before&#123;</span><br><span class="line">    content: &quot;🔖&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .tag-cloud-tags a:hover&#123;</span><br><span class="line">     box-shadow: 0px 5px 15px 0px rgba(0,0,0,.4);</span><br><span class="line">     transform: scale(1.1);</span><br><span class="line">     /*box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1);*/</span><br><span class="line">     transition-duration: 0.15s;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>在同级目录的<code>page.swig</code>文件，搜索:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% elif page.type === &apos;categories&apos; %&#125;</span><br></pre></td></tr></table></figure>

<p>在上面添加:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include &apos;tag-color.swig&apos; %&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客的搭建与使用</title>
    <url>/2019/09/27/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<img src="/2019/09/27/hexo博客的搭建与使用/封面.jpg">

<p>将<code>hexo</code>博客搭建到<code>github</code></p>
<a id="more"></a> 

<h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><p>(以windows平台进行搭建)</p>
<ul>
<li><p>安装<strong>Git</strong><br>  <a href="https://git-scm.com/" target="_blank" rel="noopener"><font color="green"><strong>git官网</strong></font></a></p>
</li>
<li><p>安装<strong>node.js</strong><br>  <a href="https://nodejs.org/en/" target="_blank" rel="noopener"><font color="green"><strong>node.js官网</strong></font></a></p>
</li>
</ul>
<p>在桌面空白位置，右键选择<strong>git bash here</strong>打开git终端</p>
<img src="/2019/09/27/hexo博客的搭建与使用/打开git终端.png">

<ul>
<li>查看node.js版本：<blockquote>
<p>node -v</p>
</blockquote>
</li>
</ul>
<p>因为用npm下载太慢，所有要用cnpm</p>
<ul>
<li><p>安装cnpm</p>
<blockquote>
<p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p>
</blockquote>
</li>
<li><p>查看cnpm版本：</p>
<blockquote>
<p>cnpm -v</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li><p>安装hexo</p>
<blockquote>
<p>cnpm install -g hexo-cli</p>
</blockquote>
</li>
<li><p>查看hexo版本：</p>
<blockquote>
<p>hexo -v</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="生成hexo博客的文件"><a href="#生成hexo博客的文件" class="headerlink" title="生成hexo博客的文件"></a>生成hexo博客的文件</h2><ul>
<li>在任意位置，创建一个名为<font color="red">blog</font>的目录，并且用git终端进入到这个目录</li>
</ul>
<p><strong>使用git终端查看当前目录</strong></p>
<blockquote>
<p>pwd</p>
</blockquote>
<p><strong>DOS命令</strong>：</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">dir</td>
<td align="left">查看该目录下所有文件和目录</td>
</tr>
<tr>
<td align="left">cd 目录名</td>
<td align="left">进入该目录</td>
</tr>
<tr>
<td align="left">cd ..</td>
<td align="left">返回上一层目录</td>
</tr>
</tbody></table>
<img src="/2019/09/27/hexo博客的搭建与使用/进入blog目录.png">

<ul>
<li>初始化一个博客<blockquote>
<p>hexo init</p>
</blockquote>
</li>
</ul>
<hr>
<h1 id="创建一篇文章"><a href="#创建一篇文章" class="headerlink" title="创建一篇文章"></a>创建一篇文章</h1><ul>
<li>创建文章:<blockquote>
<p>hexo n “文章名”</p>
</blockquote>
</li>
</ul>
<p><font color="red">.md</font>后缀的文件为你的文章，打开后开始编写你的文章</p>
<img src="/2019/09/27/hexo博客的搭建与使用/new文章.png">

<p><strong>文章保存在<font color="red">blog/source/_posts</font>目录下</strong></p>
<h3 id="删除文章："><a href="#删除文章：" class="headerlink" title="删除文章："></a>删除文章：</h3><blockquote>
<p>直接到目录下删除</p>
</blockquote>
<p><img src="%E5%88%A0%E9%99%A4%E6%96%87%E7%AB%A0.png" alt></p>
<hr>
<h1 id="启动博客（本地）"><a href="#启动博客（本地）" class="headerlink" title="启动博客（本地）"></a>启动博客（本地）</h1><ul>
<li>启动本地博客</li>
</ul>
<blockquote>
<p>hexo s<br>这个为本地博客： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p>
</blockquote>
<p><img src="%E5%90%AF%E5%8A%A8%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2.png" alt></p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ctrl+z</td>
<td align="left">进程挂起</td>
</tr>
<tr>
<td align="left">fg % n</td>
<td align="left">查看当前第n个挂起的进程</td>
</tr>
<tr>
<td align="left">jobs</td>
<td align="left">查看当前有多少进程在后台运行</td>
</tr>
<tr>
<td align="left">kill % n</td>
<td align="left">删除第n个进程</td>
</tr>
</tbody></table>
<hr>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">hexo s</td>
<td align="left">启动本地博客</td>
</tr>
<tr>
<td align="left">hexo clean</td>
<td align="left">删除本地博客生成的文件</td>
</tr>
<tr>
<td align="left">hexo g</td>
<td align="left">生成本地博客的文件</td>
</tr>
<tr>
<td align="left">hexo d</td>
<td align="left">部署博客</td>
</tr>
</tbody></table>
<hr>
<h1 id="将博客部署到github"><a href="#将博客部署到github" class="headerlink" title="将博客部署到github"></a>将博客部署到github</h1><p>github创建一个仓库，仓库名的格式为<font color="red">xxx.github.io</font></p>
<ul>
<li>安装部署插件<blockquote>
<p>cnpm install –save hexo-deployer-git</p>
</blockquote>
</li>
</ul>
<p>从<font color="red">blog</font>目录下打开<font color="red">_config.yml</font>文件</p>
<blockquote>
<p>deploy:<br>   type: git<br>   //以下两个需要自己输入<br>   repo: 你仓库的链接<br>   branch: master</p>
</blockquote>
<p><img src="%E9%83%A8%E7%BD%B2%E8%AE%BE%E7%BD%AE.png" alt></p>
<ul>
<li>开始部署<blockquote>
<p>hexo d</p>
</blockquote>
</li>
</ul>
<p>输入你的github账号就行了，<strong>你的仓库名就是你博客的链接</strong></p>
<ul>
<li>如果没有出现github账号的输入窗口<blockquote>
<p>hexo clean<br>hexo d</p>
</blockquote>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
</search>
