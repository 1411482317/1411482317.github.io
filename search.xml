<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据结构与算法笔记</title>
    <url>/2020/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2020/04/16/数据结构与算法笔记/fm.jpg">

<a id="more"></a>

<hr>
<p>算法定义：</p>
<ul>
<li><p><code>输入输出</code>： 算法具有0个或多个输入，至少有1一个或多个输出。</p>
</li>
<li><p><code>有穷性</code>： 执行完有效嘅步骤后，会自动结束。</p>
</li>
<li><p><code>确定性</code>： 每个步骤都有具体含义，唔会出现二义性。</p>
</li>
<li><p><code>可行性</code>： 每一步都能通过。</p>
</li>
</ul>
<hr>
<p>算法设计要求：</p>
<ul>
<li><p><code>正确性</code>： 能够得到问题嘅正确答案。</p>
</li>
<li><p><code>可读性</code>： 方便阅读。</p>
</li>
<li><p><code>健壮性</code>： 处理唔合法数据时，可以做出相关处理。</p>
</li>
<li><p><code>效率高同埋存储量低</code>： 字面意思。</p>
</li>
</ul>
<hr>
<p>算法效率嘅度量：</p>
<ul>
<li><p><code>事后统计法</code>： 通过设计好嘅程序，用计算机计时器对唔同算法编制程序嘅运行时间进行比较，判断效率（高投入回报几率低）</p>
</li>
<li><p><code>事前分析估算法</code>： 程序编制前，用统计法对算法进行估算（投入前进行估算）</p>
</li>
</ul>
<hr>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p><img src="1.png" alt></p>
<p>常见嘅时间复杂程度排序：</p>
<blockquote>
<p>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</p>
</blockquote>
<h4 id="大O推导法"><a href="#大O推导法" class="headerlink" title="大O推导法"></a>大O推导法</h4><ul>
<li><p><code>常数</code>： 指规定嘅数量与数字。</p>
</li>
<li><p>用常数1取代运行时嘅所有加法常数。</p>
</li>
<li><p>喺修改后嘅运行次数函数中，保留最高阶项。</p>
</li>
<li><p>假如最高阶项存在并且唔喺1，就去除与尼个项相乘嘅常数，结果就系大O阶</p>
</li>
</ul>
<h4 id="常数阶"><a href="#常数阶" class="headerlink" title="常数阶"></a>常数阶</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> sum = <span class="number">0</span>, n = <span class="number">100</span>; <span class="comment">// 执行1次</span></span><br><span class="line">sum = (<span class="number">1</span>+n) * n/<span class="number">2</span>;    <span class="comment">// 第1次执行</span></span><br><span class="line">sum = (<span class="number">1</span>+n) * n/<span class="number">2</span>;    <span class="comment">// 第2次执行</span></span><br><span class="line">sum = (<span class="number">1</span>+n) * n/<span class="number">2</span>;    <span class="comment">// 第3次执行</span></span><br><span class="line">sum = (<span class="number">1</span>+n) * n/<span class="number">2</span>;    <span class="comment">// 第4次执行</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);  <span class="comment">// 执行1次</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>一共执行佐6条语句，但记作常数1</p>
</blockquote>
<p>唔理常数喺几多，都记作<code>O(1)</code></p>
<h4 id="线性阶"><a href="#线性阶" class="headerlink" title="线性阶"></a>线性阶</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// 执行1次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">100</span>; ++i) <span class="comment">// 执行n+1次</span></span><br><span class="line">    sum += i; <span class="comment">// 执行n次</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>一共执行佐<code>1 + (n+1) + 1 = 2n+3</code>次</p>
</blockquote>
<p>单个循环（非嵌套循环），随着n变大，计算时间呈直线增长，时间复杂程度为<code>O(n)</code>。</p>
<h4 id="平方阶"><a href="#平方阶" class="headerlink" title="平方阶"></a>平方阶</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">100</span>; ++i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">100</span>; ++j)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"???\n"</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行循环执行100次，内层循环执行100*100次，即喺n嘅平方。</p>
</blockquote>
<p>空间复杂性为<code>O(n^2)</code></p>
<ul>
<li>假如嵌套循环有3层，空间复杂性为O(n^3)，以此类推</li>
</ul>
<h4 id="对数阶"><a href="#对数阶" class="headerlink" title="对数阶"></a>对数阶</h4><ul>
<li>log： 对数函数。<blockquote>
<p>例子： a^n = b（a&gt;0,且a≠1）， n叫做以a为底b的对数,记做n=log(a)b,【a喺下标】，空间复杂度为<code>O(logn)</code></p>
</blockquote>
</li>
</ul>
<h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>算法可以用执行时间换取空间容量（空间变大但运行慢），用空间容量获取更快嘅执行时间（空间变小但运行快）。</p>
<hr>
<h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><p>拥有顺序，除咗首元素与尾元素，其他元素都有前进与后退功能。</p>
<ul>
<li><p>线性表强调喺有限嘅。</p>
</li>
<li><p>每个元素只有一个next与prev</p>
</li>
</ul>
<p><img src="2.png" alt></p>
<h4 id="抽象数据类型（ADT）"><a href="#抽象数据类型（ADT）" class="headerlink" title="抽象数据类型（ADT）"></a>抽象数据类型（ADT）</h4><ul>
<li><p>原子性： 最底层类型不可分解，例如整形，浮点型与字符型等。</p>
</li>
<li><p>结构类型： 由n种类型组成嘅类型，可分解。例如数组等。</p>
</li>
</ul>
<p>抽象数据类型格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ADT name</span><br><span class="line">Data</span><br><span class="line">    数据元素之间逻辑关系嘅定义（成员数据）</span><br><span class="line">Operation</span><br><span class="line">    操作（成员函数）</span><br><span class="line">end ADT</span><br></pre></td></tr></table></figure>

<ul>
<li><code>并集</code>： A=AUB，把存在喺集合B中，但唔存在喺集合A中 嘅元素插入到集合A中。忽略相同元素，拷贝自己无嘅元素。</li>
</ul>
<p><img src="3.png" alt></p>
<h4 id="连续内存空间"><a href="#连续内存空间" class="headerlink" title="连续内存空间"></a>连续内存空间</h4><p>内存空间嘅地址值喺连续嘅。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">st</span>&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T       value_type;</span><br><span class="line">    <span class="keyword">typedef</span> value_type* pointer ;</span><br><span class="line"></span><br><span class="line">    pointer p;  <span class="comment">// 线性连续内存空间</span></span><br><span class="line">    <span class="keyword">size_t</span> len; <span class="comment">// 空间长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入元素，传入索引位置与需要插入嘅数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">install</span><span class="params">(<span class="keyword">size_t</span> index, T value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= len)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        ++len;</span><br><span class="line">        <span class="keyword">if</span>(index != len - <span class="number">1</span>) <span class="comment">// 插入位置唔喺末尾处</span></span><br><span class="line">            <span class="comment">// 从index开始嘅所有元素向后移动一个索引位</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">size_t</span> i = len - <span class="number">1</span>; i != index - <span class="number">1</span>; --i)</span><br><span class="line">                *(p + i) = *(p + i - <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        *(p + index) = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除元素，根据索引删除元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">remove</span><span class="params">(<span class="keyword">size_t</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= len)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        --len;</span><br><span class="line">        <span class="keyword">if</span>(index != len - <span class="number">1</span>)&#123; <span class="comment">// 删除位置唔喺末尾处</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">size_t</span> i = index; i != len; ++i)&#123;</span><br><span class="line">                *(p + i) = *(p + i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 打印</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i != len; ++i)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%p: "</span>, p + i);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"[%ld]=%d\n"</span>, i, *(p + i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"len is %ld\n"</span>, len);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">st</span>&lt;int&gt; *<span class="title">obj</span> = <span class="title">new</span> <span class="title">st</span>&lt;int&gt;;</span></span><br><span class="line">    obj-&gt;len = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 申请内存空间</span></span><br><span class="line">    obj-&gt;p = (st&lt;<span class="keyword">int</span>&gt;::pointer)<span class="built_in">malloc</span>(</span><br><span class="line">        <span class="keyword">sizeof</span>(st&lt;<span class="keyword">int</span>&gt;::value_type) * obj-&gt;len</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用空间</span></span><br><span class="line">    *(obj-&gt;p)     = <span class="number">11</span>;</span><br><span class="line">    *(obj-&gt;p + <span class="number">1</span>) = <span class="number">22</span>;</span><br><span class="line">    *(obj-&gt;p + <span class="number">2</span>) = <span class="number">33</span>;</span><br><span class="line">    *(obj-&gt;p + <span class="number">3</span>) = <span class="number">44</span>;</span><br><span class="line">    *(obj-&gt;p + <span class="number">4</span>) = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(obj-&gt;install(<span class="number">2</span>, <span class="number">999</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"instal ok\n"</span>);</span><br><span class="line"></span><br><span class="line">    obj-&gt;print();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(obj-&gt;remove(<span class="number">2</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"remove ok\n"</span>);</span><br><span class="line">    </span><br><span class="line">    obj-&gt;print();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    func();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="4.png" alt></p>
<p><video src="v1.mp4" type="video/mp4" controls="controls" preload="auto" width="100%" height="100%"><br></video></p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>vs code使用笔记</title>
    <url>/2020/04/11/vs-code%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2020/04/11/vs-code使用笔记/fm.jpg">

<ul>
<li>操作系统: win10</li>
<li>vscode版本: 1.43</li>
</ul>
<a id="more"></a>

<hr>
<p><a href="https://code.visualstudio.com/docs/setup/setup-overview" target="_blank" rel="noopener"><font color="green"><strong>【官网帮助文档】</strong></font></a></p>
<hr>
<h3 id="vs-code预定义嘅变量"><a href="#vs-code预定义嘅变量" class="headerlink" title="vs code预定义嘅变量"></a>vs code预定义嘅变量</h3><ul>
<li><code>${workspaceFolder}</code>: 当前打开嘅目录路径</li>
<li><code>${file}</code>: 当前打开嘅文件</li>
<li><code>${fileBasename}</code>: 当前打开文件嘅名称</li>
</ul>
<hr>
<h3 id="设置自定义快捷方式"><a href="#设置自定义快捷方式" class="headerlink" title="设置自定义快捷方式"></a>设置自定义快捷方式</h3><p><img src="1.png" alt></p>
<hr>
<h3 id="C-Debug文件（launch-json）"><a href="#C-Debug文件（launch-json）" class="headerlink" title="C++ Debug文件（launch.json）"></a>C++ Debug文件（launch.json）</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"a.out"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            "program": "$&#123;workspaceFolder&#125;/build/a.out", // 可执行文件路径</span><br><span class="line">            "args": ["version"], // main函数参数</span><br><span class="line">            "stopAtEntry": false, // true则默认设置断点到main</span><br><span class="line">            "cwd": "$&#123;workspaceFolder&#125;", // 应用程序的工作目录,$&#123;workspaceFolder&#125;为当前目录</span><br><span class="line">            "environment": [ // 要添加到程序中的环境变量</span><br><span class="line">                </span><br><span class="line">            ], </span><br><span class="line">            "externalConsole": false,</span><br><span class="line">            "MIMode": "gdb",</span><br><span class="line">            "setupCommands": [ // gdb的命令</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                    // "text": "-enable-pretty-printing",</span><br><span class="line">                    // text 要执行的调试器命令</span><br><span class="line">                    "text": "-gdb-set detach-on-fork off", // 多进程调试</span><br><span class="line">                    "ignoreFailures": true</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            "miDebuggerPath": "/my_file/gnu/gdb/gdb-9.1/build/bin/gdb", // gdb路径</span><br><span class="line">            "miDebuggerArgs": "-silent", // gdb参数</span><br><span class="line">            "targetArchitecture": "x86_64" // 目标框架</span><br><span class="line">        &#125;</span><br><span class="line">        /* </span><br><span class="line">        ,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"b.out"</span>  </span><br><span class="line">        &#125;</span><br><span class="line">        */</span><br><span class="line">    ],</span><br><span class="line">    "compounds": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"debug"</span>,</span><br><span class="line">            <span class="attr">"configurations"</span>: [<span class="string">"a.out"</span> /*, <span class="string">"b.out"</span>*/] // 一次性执行多个文件</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
  </entry>
  <entry>
    <title>STL笔记</title>
    <url>/2020/04/09/STL%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2020/04/09/STL笔记/fm.jpg">

<ul>
<li>操作系统: CentOs 8.1 x86_64</li>
<li>gcc: 9.3</li>
<li>gdb: 9.1</li>
<li>书籍: STL源码剖析</li>
</ul>
<a id="more"></a>

<hr>
<p>大概了解一下原理即可，不必深入。</p>
<p>STL的6个组件:</p>
<ul>
<li><code>容器:</code> 用于存储数据</li>
<li><code>迭代器:</code> 用于操作容器</li>
<li><code>算法:</code> 容器算法</li>
<li><code>仿函数:</code> 使一个class的使用方式 看上去类似与函数</li>
<li><code>配接器:</code> 作用于修饰容器，仿函数，迭代器</li>
<li><code>配置器:</code> 负责空间的配置与管理</li>
</ul>
<h3 id="空间配置器"><a href="#空间配置器" class="headerlink" title="空间配置器"></a>空间配置器</h3><p>一级空间配置器:</p>
<p><img src="1.png" alt></p>
<p><code>allocate(size_t n)</code> <code>reallocate(size_t n)</code> 通过调用malloc申请内存，一旦内存申请失败则调用<code>oom_malloc(size_t n)</code>或<code>oom_realloc(size_t n)</code>这两函数其实就喺循环调用malloc向系统申请空间。假如两个oom函数都调用失败了就使用<code>__THROW_BAD_ALLOC</code>抛出异常或直接结束程序。</p>
<p><code>调用deallocate(void *p, size_t)</code>会直接使用<code>free()</code>。</p>
<p>提供<code>set_malloc_handler(void (*f)())</code>接口，使用户可以传递自己的内存申请错误函数。</p>
<hr>
<p>二级空间配置器:</p>
<blockquote>
<p>使用到了<code>链表</code>与<code>内存池</code>技术 ，通过节点指向区块。</p>
</blockquote>
<p>使用enum创建<code>区块的上调边界</code> <code>区块上限</code> <code>区块数量</code>。</p>
<p><code>union obj</code>作为链表的结构把区块连接起来。<code>free_list</code>数组元素指向实际的内存区块地址，<code>start_free</code>表示内存池的起始位置，<code>end_free</code>表示内存池的结束位置。</p>
<p><code>allocate(size_t n)</code>与<code>reallocate(void *p, size_t n)</code> ，首先判断是否为区块上限，一旦为上限则转至一级配置器，从<code>free_list</code>获取一个合适大小嘅内存空间，假如获取内存空间失败就会调用<code>refill()</code>重新填充<code>free_list</code>。</p>
<p><code>deallocate(void *p, size_t n)</code>首先判断区块大小，超过区块上限则调用一级配置器，然后创建一个指针指向这块需要回收的空间，并调整<code>free_list</code>所指向的区块。</p>
<p><code>refill(size_t n)</code>为<code>free_list</code>填充空间， 新的空间由内存池获取， 默认获取20个新嘅区块， 一旦内存池空间不足将会获取小于20个区块，20个区块里第一个区块会分配给用户使用，剩余19个由<code>free+list</code>进行管理。</p>
<p><code>chunk_alloc(size_t size, int &amp;nobjs)</code>内存池，通过<code>start_free</code>减去<code>end_free</code>获取内存池剩余空间，判断剩余嘅空间是否大于或等于（size * nobjs = 需要的内存空间），条件成立则会返回当前内存池的起始位置; 内存池不满足需求的内存空间数量但喺满足一个或一个以上区块的内存空间将会返回一块区块出去，此时<code>free_list</code>没有可用管理嘅区块; 内存池连一个区块都无法提供，首先将零散嘅空间分配畀适当嘅<code>free_list</code>，然后配置<code>heap_size</code>在使用malloc补充内存池，新内存池为旧内存池的两倍， 使用循环寻找未使用嘅大块内存，并调整<code>free_list</code>将该未使用嘅大块内存释放并递归自己修正nobjs; 假如malloc失败就会调用一级配置器分配空间，然后递归自己修正nobjs。</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>linux bash shell笔记</title>
    <url>/2020/03/29/linux-bash-shell%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2020/03/29/linux-bash-shell笔记/fm.jpg">

<p>操作系统: CentOs 8 x86_64<br>bash shell版本: 4.4.19</p>
<a id="more"></a>

<hr>
<p>shell能直接操作内核。</p>
<ul>
<li>文件格式: <code>xxx.sh</code></li>
<li>使用: <code>sh xxx.sh [参数]</code></li>
</ul>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var1=11 # 变量</span><br><span class="line">command_var=&quot;sleep 3s&quot; # 存储一个命令的变量</span><br><span class="line"></span><br><span class="line"># 使用变量</span><br><span class="line">var2=$&#123;var1&#125; # 将var1嘅值赋值到var2</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ 条件 ]; then</span><br><span class="line">    # code</span><br><span class="line">elif [条件]; then # elsif</span><br><span class="line">    # code</span><br><span class="line">else</span><br><span class="line">    # code</span><br><span class="line">fi # 结束if</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function name()&#123;</span><br><span class="line">    # code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><table>
<thead>
<tr>
<th>选项</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>x</td>
<td>提供跟踪执行信息，将执行的每一条命令和结果依次打印出来</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash [-选项] xxx.sh [参数]</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
  </entry>
  <entry>
    <title>Linux拓展分区</title>
    <url>/2020/03/27/Linux%E6%8B%93%E5%B1%95%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<img src="/2020/03/27/Linux拓展根目录分区/fm.jpg">

<ul>
<li>操作系统: CentOs8 x86_64</li>
<li>虚拟机软件: Vmware 15 pro</li>
</ul>
<a id="more"></a>

<hr>
<h3 id="添加新虚拟盘，增加root分区空间"><a href="#添加新虚拟盘，增加root分区空间" class="headerlink" title="添加新虚拟盘，增加root分区空间"></a>添加新虚拟盘，增加root分区空间</h3><p><code>fdisk -l</code>查看新创建嘅虚拟硬盘（或者使用<code>lsblk</code>）<br><img src="1.png" alt></p>
<ul>
<li>/dev/sdb为新硬盘</li>
</ul>
<hr>
<p><code>vgdisplay</code>查看当前卷组<br><img src="2.png" alt></p>
<ul>
<li><code>VG Name</code>为卷组的名称</li>
</ul>
<hr>
<p>把新嘅硬盘拓展到卷组:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vgextend CentOs_8 /dev/sdb</span><br></pre></td></tr></table></figure>

<p><img src="3.png" alt></p>
<hr>
<p>再次使用<code>vgdisplay</code>就会发现VG Size变大了<br><img src="4.png" alt></p>
<hr>
<p>查看当前分区<code>df -Th</code><br><img src="5.png" alt></p>
<hr>
<p>拓展root分区:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lvextend -L +9.9G /dev/mapper/CentOs_8-root</span><br></pre></td></tr></table></figure>

<p><img src="6.png" alt></p>
<hr>
<p>动态拓展root目录:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xfs_growfs /</span><br></pre></td></tr></table></figure>

<p><img src="7.png" alt></p>
<hr>
<p>再次使用<code>df -Th</code>就会发现root分区变大了<br><img src="8.png" alt></p>
<hr>
<h3 id="拓展现有虚拟盘大小，增加root分区空间"><a href="#拓展现有虚拟盘大小，增加root分区空间" class="headerlink" title="拓展现有虚拟盘大小，增加root分区空间"></a>拓展现有虚拟盘大小，增加root分区空间</h3><p>新建拓展分区:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sda</span><br><span class="line"></span><br><span class="line">输入三个回车</span><br><span class="line"></span><br><span class="line"># 保存</span><br><span class="line">w</span><br></pre></td></tr></table></figure>

<p><img src="9.png" alt></p>
<hr>
<p>格式化分区:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkfs.xfs /dev/sda4</span><br></pre></td></tr></table></figure>

<hr>
<p>创建pv:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/sda4</span><br></pre></td></tr></table></figure>

<p><img src="10.png" alt></p>
<hr>
<p>拓展卷组:<br><code>vgdisplay</code>查看当前卷组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 拓展卷组</span><br><span class="line">vgextend CentOs_8 /dev/sda4</span><br></pre></td></tr></table></figure>

<hr>
<p>拓展root分区:<br><code>df -Th</code>查看root分区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lvextend -L +100%free /dev/CentOs_8/root</span><br></pre></td></tr></table></figure>

<hr>
<p>动态拓展root分区:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xfs_growfs /</span><br></pre></td></tr></table></figure>

<p>再次使用<code>df -Th</code>就会发现root分区变大了</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>oracle搭建 与 使用</title>
    <url>/2020/03/19/oracle%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<img src="/2020/03/19/oracle搭建/fm.jpg">

<ul>
<li>操作系统: CentOs8</li>
<li>oracle版本: 19c-1.0-1</li>
</ul>
<a id="more"></a>

<hr>
<p><strong>准备阶段</strong>:</p>
<p>首先需要下载<a href="https://www.oracle.com/database/technologies/oracle-database-software-downloads.html" target="_blank" rel="noopener"><font color="green"><strong>oracle rpm包</strong></font></a>与<a href="http://yum.oracle.com/" target="_blank" rel="noopener"><font color="green"><strong>oracle preinstall包</strong></font></a></p>
<ul>
<li><code>preinstall包</code>: 进入网站在<code>Browse the Repositories</code>处选择系统版本 -&gt; Latest Packages -&gt; Latest -&gt; x86_64 -&gt; 找到<code>oracle-database-preinstall</code>开头的包（根据oracle版本选择）</li>
</ul>
<hr>
<p><img src="1.png" alt></p>
<hr>
<p><img src="2.png" alt></p>
<hr>
<p><img src="3.png" alt></p>
<hr>
<p><strong>安装阶段</strong>:</p>
<p>安装preinstall:</p>
<p>安装preinstall时会出现错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install oracle-database-preinstall-19c-1.0-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p><img src="4.png" alt></p>
<blockquote>
<p>缺少<code>compat-libcap1</code> 与 <code>compat-libstdc++-33</code></p>
</blockquote>
<p><a href="http://www.rpm-find.net/linux/rpm2html/search.php?query=compat-libcap1&submit=Search+..." target="_blank" rel="noopener"><font color="green"><strong>搜索并下载包</strong></font></a></p>
<p>安装完这两缺失包后，重新执行preinstall包安装</p>
<hr>
<p>安装oracle:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install oracle-database-ee-19c-1.0-1.x86_64.rpm</span><br></pre></td></tr></table></figure>

<hr>
<p>出现错误:<br><img src="5.png" alt></p>
<blockquote>
<p>包冲突错误，加上<code>--allowerasing</code>替换当前包</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install oracle-database-ee-19c-1.0-1.x86_64.rpm --allowerasing</span><br></pre></td></tr></table></figure>

<hr>
<p>安装libnsl.so.1依赖库（唔安装个话下面嘅初始化数据库无法执行）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dnf install libnsl</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>设置阶段</strong>:</p>
<p>初始化数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/init.d/oracledb_ORCLCDB-19c configure</span><br></pre></td></tr></table></figure>

<p>添加环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export ORACLE_BASE=/opt/oracle</span><br><span class="line">export ORACLE_HOME=/opt/oracle/product/19c/dbhome_1</span><br><span class="line"># 设置sid</span><br><span class="line">export ORACLE_SID=ORCLCDB</span><br><span class="line">export PATH=$ORACLE_HOME/bin:$PATH:$HOME/.local/bin:$HOME/bin</span><br></pre></td></tr></table></figure>

<hr>
<p>登录:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 切换用户</span><br><span class="line">su - oracle</span><br><span class="line"></span><br><span class="line"># 管理员登录</span><br><span class="line">sqlplus / as sysdba</span><br></pre></td></tr></table></figure>

<hr>
<p>创建用户（oracle 12以上）这个c##必须添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user c##账户 identified by 密码;</span><br><span class="line"></span><br><span class="line"># 设置权限</span><br><span class="line">grant create table,unlimited tablespace to c##用户名;</span><br><span class="line"></span><br><span class="line">grant select any table to c##用户名;</span><br><span class="line"></span><br><span class="line">GRANT UPDATE ANY TABLE,DROP ANY TABLE,INSERT ANY TABLE TO c##用户名;</span><br><span class="line"></span><br><span class="line">grant create session to c##用户名;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>常用命令</strong></p>
<p><strong>oracle的使用请转至<a href="/2020/02/27/docker安装oracle-11g/" title="<font color=blue>点击前往文章</font>"><font color="blue">点击前往文章</font></a></strong></p>
<hr>
<h3 id="切换用户出现ORA-01034-ORACLE-not-available错误"><a href="#切换用户出现ORA-01034-ORACLE-not-available错误" class="headerlink" title="切换用户出现ORA-01034: ORACLE not available错误"></a>切换用户出现ORA-01034: ORACLE not available错误</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 关闭例程</span><br><span class="line">shutdown</span><br><span class="line"></span><br><span class="line"># 启动例程</span><br><span class="line">startup</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="使用navicat出现no-listen"><a href="#使用navicat出现no-listen" class="headerlink" title="使用navicat出现no listen"></a>使用navicat出现no listen</h3><p>原因喺oracle个监听没开启。</p>
<p>切换到oracle用户，开启监听即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su - oracle</span><br><span class="line"></span><br><span class="line"># 启动监听</span><br><span class="line">lsnrctl start</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>lsnrctl stop</code>: 停止监听</p>
</li>
<li><p><code>lsnrctl status</code>: 查看状态</p>
</li>
</ul>
<hr>
<h3 id="下载win最新版本oracle-client，并喺navicat使用"><a href="#下载win最新版本oracle-client，并喺navicat使用" class="headerlink" title="下载win最新版本oracle client，并喺navicat使用"></a>下载win最新版本oracle client，并喺navicat使用</h3><p><a href="https://www.oracle.com/database/technologies/instant-client/winx64-64-downloads.html" target="_blank" rel="noopener"><font color="green">win版本oracle client</font></a></p>
<p>将下载好嘅压缩包解压，打开navicat -&gt; 工具 -&gt; 选项</p>
<p><img src="6.png" alt></p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>TCP/IP笔记</title>
    <url>/2020/03/09/TCP-IP%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2020/03/09/TCP-IP笔记/fm.gif">

<p>基于书籍<code>TCP/IP详解卷1第二版</code>，与win的<code>wireshark</code></p>
<a id="more"></a>

<hr>
<blockquote>
<p>学习的时候，必须与wireshark配套使用</p>
</blockquote>
<ul>
<li><a href="https://www.wireshark.org/download.html" target="_blank" rel="noopener"><strong>wireshark官网</strong></a></li>
</ul>
<hr>
<p><img src="1.png" alt></p>
<hr>
<h3 id="Internet（网络）地址结构"><a href="#Internet（网络）地址结构" class="headerlink" title="Internet（网络）地址结构"></a>Internet（网络）地址结构</h3><ul>
<li>IPV4结构<blockquote>
<p>四点十进制，范围0~255表示一个点，32位<br>10进制表示:<strong>255.255.255.255</strong></p>
<p>二进制表示:<br><strong>11111111 11111111 11111111 11111111</strong></p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li>IPV6结构<blockquote>
<p>八块十六进制，范围0~65535表示一个块，128位<br>16进制表示:<strong>ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff</strong></p>
<p>二进制表示:<br><strong>1111111111111111 1111111111111111</strong><br><strong>1111111111111111 1111111111111111</strong><br><strong>1111111111111111 1111111111111111</strong><br><strong>1111111111111111 1111111111111111</strong></p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="分类寻址"><a href="#分类寻址" class="headerlink" title="分类寻址"></a>分类寻址</h4><p><img src="3.png" alt></p>
<p>A~C类作用于Internet单播地址</p>
<hr>
<blockquote>
<p>单播，就比如两个人之间的对话<br><img src="4.png" alt></p>
</blockquote>
<hr>
<blockquote>
<p>组播，一大群人对一个人说话<br><img src="5.png" alt></p>
</blockquote>
<hr>
<blockquote>
<p>广播，一个人用大喇叭，对一大群人说话<br><img src="6.png" alt></p>
</blockquote>
<hr>
<h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h4><p>子网掩码由主机或路由器分配位，以确认从一台主机对应的IP地址中获取网络和子网的信息。</p>
<hr>
<blockquote>
<p>当子网掩码为<code>255.255.255.0</code>时，处理ipv4地址<code>128.32.1.14</code></p>
</blockquote>
<p><strong>IP与子网掩码使用 <code>按位与</code>进行操作</strong><br><img src="2.png" alt></p>
<p><code>/24</code>表示二进制1位的数量，上例子网掩码一共有24个二进制1位</p>
<hr>
<h3 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h3><h4 id="以太网帧格式"><a href="#以太网帧格式" class="headerlink" title="以太网帧格式"></a>以太网帧格式</h4><blockquote>
<p>在以太网链路上的数据包称作以太帧</p>
</blockquote>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>前导</td>
<td>为了隔离每个以太网帧的，也是定位符</td>
</tr>
<tr>
<td>SFD</td>
<td>帧起始分隔符</td>
</tr>
<tr>
<td>DST</td>
<td>目标地址</td>
</tr>
<tr>
<td>SRC</td>
<td>源地址</td>
</tr>
<tr>
<td>FCS</td>
<td>帧校验序列</td>
</tr>
<tr>
<td>MAC</td>
<td>物理网卡地址</td>
</tr>
</tbody></table>
<p><img src="7.png" alt></p>
<ul>
<li>以太网 EthernetII 最大的数据帧是 1518 Bytes</li>
</ul>
<hr>
<h4 id="最大传输单元MTU"><a href="#最大传输单元MTU" class="headerlink" title="最大传输单元MTU"></a>最大传输单元MTU</h4><p>在使用互联网时进行的各种网络操作，都是通过一个又一个“数据包”传输来实现的。而MTU指定了网络中可传输数据包的最大尺寸，常用的以太网中，MTU是1500字节。超过此大小的数据包就会将多余的部分拆分再单独传输</p>
<hr>
<h4 id="地址解析协议ARP"><a href="#地址解析协议ARP" class="headerlink" title="地址解析协议ARP"></a>地址解析协议ARP</h4><p>作用于解析目标主机的MAC地址，ARP只在同一个广播域生效</p>
<ul>
<li><p>只要是局域网通信就会用到ARP（局域网通信使用MAC地址），ARP的功能是<code>二层寻址</code>寻的是单播地址</p>
</li>
<li><p>广播可组播的MAC都是固定的，所有不需要寻址</p>
</li>
<li><p>只要设备更换就会导致IP地址和MAC地址 对应（映射） 关系的改变，所以需要ARP来保证每次传输数据之前首先获取到正确的目标设备MAC地址</p>
</li>
</ul>
<hr>
<p><strong>ARP表（ARP缓存）</strong></p>
<blockquote>
<p>记录IP与MAC地址的 对应（映射） 关系<br><img src="8.png" alt><br>ARP表是有老化时间的，一旦老化时间到了就会使用ARP重新构建ARP表</p>
</blockquote>
<p><img src="9.png" alt></p>
<blockquote>
<p><strong>如上图，主机1与主机2的ARP表就都有了对方的MAC地址</strong></p>
</blockquote>
<hr>
<p><strong>无故ARP</strong></p>
<blockquote>
<p>终端设备使用无故ARP主动通告它的MAC地址，也可以用来检测局域网有没有IP冲突（在wireshark看到<code>gratuitous arp for xxx.xxx.xxx.xxx (request)</code>就表示这是一个无故ARP包）</p>
</blockquote>
<hr>
<p><strong>二层交换</strong></p>
<blockquote>
<p>用作于内网数据的传输<br><img src="10.png" alt></p>
</blockquote>
<hr>
<p><strong>ARP帧格式</strong></p>
<p><img src="11.png" alt></p>
<hr>
<h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><h4 id="IP首部格式"><a href="#IP首部格式" class="headerlink" title="IP首部格式"></a>IP首部格式</h4><blockquote>
<p>IPV4首部格式<br><img src="12.png" alt><br><code>IHL</code>首部长度，<code>DS</code>分区服务字段，<code>ECN</code>显式拥塞通知字段</p>
</blockquote>
<ul>
<li><p>16位分片标识：唯一标识主机发送的每一个数据报，其初始值是系统随机生成：每发送一个数据报，其值加1.该值在分片时被复制到每一个分片中，因此同一个数据报的所有分片都有相同的标识值</p>
</li>
<li><p>DF不分片标志：第1位保留，第2位表示“禁止分片”，如果设置了该位，IP模板将不对数据报分片，超过MTU的数据将会丢弃并返回一个ICMP差错报文。第3位表示“更多分片”，除了最后一个分片外，其他的分片都要置1</p>
</li>
<li><p>13位分片标识：是分片相对原始IP数据报开始处的偏移（仅指数据部分）。实际偏移值是该值左移3位得到的。所以出最后一个分片，其他分片的数据部分长度必须是8的整数倍</p>
</li>
<li><p>8位生存时间（TTL）：设置了数据可以经过的最多的路由器数（一般是64），每经过一次路由器，该值减1，如果该值减为0依旧没有到达目的主机，就丢弃改数据报，发送ICMP差错报文（目标不可达）</p>
</li>
<li><p>16位首部校验：由发送端填充，接收端对其使用CRC算法检验IP数据报头部在传输过程中是否损坏（只检查头部，不管数据部分）</p>
</li>
</ul>
<hr>
<blockquote>
<p>wireshark抓包分析<br><img src="13.png" alt></p>
</blockquote>
<hr>
<h4 id="IP分片"><a href="#IP分片" class="headerlink" title="IP分片"></a>IP分片</h4><p>在TCP/IP中使链路层使用MTU限制数据包长度，当发送的数据包超出MTU长度则就需要对数据进行 分片（将一份数据拆分成多份数据） 否则将无法发送</p>
<hr>
<ul>
<li>避免IP分片<blockquote>
<p>如果IP层对一个数据包进行了分片，只要有一个分片丢失了，只能依赖于传输层进行重传。对于TCP数据，在建立连接的三次握手的过程中，连接双方会相互通告MSS（最大报文段长度），每次发送的TCP数据都不会超过双方MSS的最小值，所以就保证了IP数据报不会超过MTU，避免了IP分片</p>
</blockquote>
</li>
</ul>
<hr>
<h4 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h4><p>使用cmd输入<code>netstat -r</code>显示本地路由表（主要是看IPV4路由表）</p>
<div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><a href="#1-1">网络地址（Network Destination）与 网络掩码（Netmask）</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1-1"><ul>
<li>用于定义本地计算机可以到达的网络目的地址范围</li>
</ul>
<blockquote>
<p>主机地址:某个特定主机的网络地址，网络掩码为255.255.255.255</p>
</blockquote>
<blockquote>
<p>子网地址：某个特定子网的网络地址，网络掩码为255.255.255.240</p>
</blockquote>
<blockquote>
<p>网络地址：某个特定网络的网络地址，网络掩码为255.0.0.0 与 255.255.255.0 和 240.0.0.0</p>
</blockquote>
<blockquote>
<p>默认路由；所有未在路由表中指定的网络地址，网络掩码为0.0.0.0</p>
</blockquote>
</div></div></div>

<div class="tabs" id="2"><ul class="nav-tabs"><li class="tab active"><a href="#2-1">网关（Gateway）</a></li></ul><div class="tab-content"><div class="tab-pane active" id="2-1"><p>在发送IP数据包时，网关定义了针对特定的网络目的地址，数据包发送到的下一个要经过的服务器</p>
</div></div></div>

<div class="tabs" id="3"><ul class="nav-tabs"><li class="tab active"><a href="#3-1">接口（Interface）</a></li></ul><div class="tab-content"><div class="tab-pane active" id="3-1"><p>接口定义了针对特定的网络目的地址，本地计算机用于发送数据包的网络接口</p>
</div></div></div>

<div class="tabs" id="4"><ul class="nav-tabs"><li class="tab active"><a href="#4-1">跃点数（Metric）</a></li></ul><div class="tab-content"><div class="tab-pane active" id="4-1"><p>于指出路由的成本，通常情况下代表到达目标地址所需要经过的跃点数量，一个跃点代表经过一个路由器。跃点数越低，代表路由成本越低；跃点数越高，代表路由成本越高。</p>
</div></div></div>

<hr>
<h4 id="ICMP-Internet控制报文协议"><a href="#ICMP-Internet控制报文协议" class="headerlink" title="ICMP Internet控制报文协议"></a>ICMP Internet控制报文协议</h4><p>更有效的转发IP数据包，提高数据交付的成功率</p>
<hr>
<blockquote>
<p>ICMP报文格式<br><img src="14.png" alt></p>
</blockquote>
<hr>
<p><strong>常见的查询报文</strong></p>
<table>
<thead>
<tr>
<th>类型的值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>ping应答，返回数据</td>
</tr>
<tr>
<td>8</td>
<td>ping请求</td>
</tr>
<tr>
<td>13</td>
<td>时间戳请求</td>
</tr>
<tr>
<td>14</td>
<td>时间戳答应</td>
</tr>
</tbody></table>
<hr>
<p><strong>常见的差错报文</strong></p>
<table>
<thead>
<tr>
<th>类型的值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td>不可到达的主机或协议</td>
</tr>
<tr>
<td>4</td>
<td>源点抑制，阻塞</td>
</tr>
<tr>
<td>5</td>
<td>路由重定向</td>
</tr>
<tr>
<td>11</td>
<td>超时</td>
</tr>
<tr>
<td>12</td>
<td>参数问题，有问题的数据包或头部</td>
</tr>
</tbody></table>
<hr>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><h4 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h4><p>UPD是保留消息边界的面向数据报传输协议，不保证数据能到达目的地，由于是无连接所以传输速度要比其他协议快</p>
<p>特点：</p>
<ul>
<li>无连接</li>
<li>无确认和阻塞</li>
<li>传输效率高</li>
<li>面向报文</li>
<li>支持1对1，1对多，多对多，多对1的交互通信</li>
</ul>
<hr>
<blockquote>
<p>UDP格式报文头<br><img src="15.png" alt></p>
</blockquote>
<hr>
<h4 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h4><p>TCP是面向连接的单播可靠协议，由 四元组（两个地址与端口） 构成</p>
<p>特点：</p>
<ul>
<li>基于字节流</li>
<li>面向连接</li>
<li>双工服务（数据可以流向两个方向，两个方向都是独立的）</li>
</ul>
<hr>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>SYN</td>
<td>建立连接</td>
</tr>
<tr>
<td>ISN</td>
<td>初始化初始序列号，(c)表示客户端，(s)表示服务端</td>
</tr>
<tr>
<td>ACK</td>
<td>确认号</td>
</tr>
<tr>
<td>FIN</td>
<td>结束连接</td>
</tr>
<tr>
<td>K</td>
<td>自己当前的序列号</td>
</tr>
<tr>
<td>L</td>
<td>最后一次发来的数据</td>
</tr>
<tr>
<td>seq</td>
<td>存储一个序列号</td>
</tr>
</tbody></table>
<blockquote>
<p>TCP的连接（三次握手）与关闭（四次挥手）<br><img src="16.png" alt></p>
</blockquote>
<ul>
<li><p>服务器为了确认客户端的SYN，将 ISN(c) + 1 作为返回的ACK，每发送一个SYN序列号就会自增1</p>
</li>
<li><p>客户端为了确认服务器的SYN，将 ISN(s) + 1 作为返回的ACK</p>
</li>
</ul>
<hr>
<h5 id="TCP半关闭"><a href="#TCP半关闭" class="headerlink" title="TCP半关闭"></a>TCP半关闭</h5><p>连接的一个方向被关闭，而另一个方向仍在传输数据，直到它被关闭为止</p>
<p><img src="17.png" alt></p>
<hr>
<h5 id="TCP同时打开与关闭"><a href="#TCP同时打开与关闭" class="headerlink" title="TCP同时打开与关闭"></a>TCP同时打开与关闭</h5><p>需要通信双方拥有一个地址与端口，并告知对方。它们被区分为两个不同的TCP连接</p>
<ul>
<li>由于双方都扮演了服务端与客户端的角色，因此不能将任何一方称作为服务端或客户端</li>
</ul>
<hr>
<blockquote>
<p>同时打开<br><img src="18.png" alt></p>
</blockquote>
<hr>
<blockquote>
<p>同时关闭<br><img src="19.png" alt></p>
</blockquote>
<hr>
]]></content>
  </entry>
  <entry>
    <title>进程间通信笔记</title>
    <url>/2020/03/07/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2020/03/07/进程间通信笔记/fm.png">

<p>基于书籍<code>unix网络编程卷2第二版</code>，在centos8的gcc8.3进行操作</p>
<a id="more"></a>

<hr>
<blockquote>
<p>进程间通信（IPC），为系统里不同的进程进行消息传递</p>
</blockquote>
<hr>
]]></content>
  </entry>
  <entry>
    <title>使用bat编写win桌面时间</title>
    <url>/2020/02/29/%E4%BD%BF%E7%94%A8bat%E7%BC%96%E5%86%99win%E6%A1%8C%E9%9D%A2%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<img src="/2020/02/29/使用bat编写win桌面时间/fm.jpg">

<p>基于win10</p>
<p>bat是dos（磁盘操作系统）下的批处理文件，bat文件的后缀为<code>.bat</code>打开该文件则会调用cmd运行</p>
<a id="more"></a>

<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// localhost_time.bat</span><br><span class="line"></span><br><span class="line">mode con cols=60 lines=7 // 窗口宽和高</span><br><span class="line">@echo off                // 死循环块</span><br><span class="line">:loop</span><br><span class="line">// 内容</span><br><span class="line">net time \\localhost     // 输出本地时间</span><br><span class="line">timeout /T 1 /NOBREAK    // 睡眠1秒</span><br><span class="line">cls                      // 清屏</span><br><span class="line">goto loop                // 死循环块</span><br></pre></td></tr></table></figure>

<p><strong>运行</strong></p>
<p><img src="1.png" alt></p>
<hr>
]]></content>
      <tags>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装oracle 11g 与 使用</title>
    <url>/2020/02/27/docker%E5%AE%89%E8%A3%85oracle-11g/</url>
    <content><![CDATA[<img src="/2020/02/27/docker安装oracle-11g/fm.jpg">

<ul>
<li>操作系统: CentOs8</li>
<li>docker版本: 19.03.6</li>
<li>oracle版本: 11g</li>
</ul>
<a id="more"></a>

<hr>
<blockquote>
<p>下载并启动镜像</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下载镜像</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br><span class="line"></span><br><span class="line">#创建并启动容器</span><br><span class="line">docker run -d -p 1521:1521 --name oracle_11g registry.aliyuncs.com/helowin/oracle_11g</span><br></pre></td></tr></table></figure>

<blockquote>
<p>切换到root并修改文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#进入容器</span><br><span class="line">docker exec -it oracle_11g /bin/bash</span><br><span class="line"></span><br><span class="line">#切换到root（注意，这是容器内）</span><br><span class="line">su root</span><br><span class="line"></span><br><span class="line">#密码</span><br><span class="line">helowin</span><br><span class="line"></span><br><span class="line">#打开文件</span><br><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">#以下为写入的内容</span><br><span class="line">export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2</span><br><span class="line">export ORACLE_SID=helowin</span><br><span class="line">export PATH=$ORACLE_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">#重新加载profile文件</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建软连接与切换用户</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#软连接</span><br><span class="line">ln -s $ORACLE_HOME/bin/sqlplus /usr/bin</span><br><span class="line"></span><br><span class="line">#切换用户，不切换的话会在sql里发生:TNS:permission denied</span><br><span class="line">su - oracle</span><br></pre></td></tr></table></figure>

<blockquote>
<p>登录sqlplus并修改sys与system的密码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动sqlplus连接到sysdba</span><br><span class="line">sqlplus /nolog // 无用户登录</span><br><span class="line">conn /as sysdba // 切换到sys用户</span><br><span class="line"></span><br><span class="line">#修改sys、system用户密码</span><br><span class="line">alter user system identified by 密码;</span><br><span class="line">alter user sys identified by 密码;</span><br><span class="line">ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用navicat登陆</p>
</blockquote>
<p><img src="1.png" alt></p>
<hr>
<h3 id="创建oracle用户"><a href="#创建oracle用户" class="headerlink" title="创建oracle用户"></a>创建oracle用户</h3><p>进入容器，登录sys用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 进入容器</span><br><span class="line">docker exec -it 容器名 bash</span><br><span class="line"></span><br><span class="line">sqlplus /nolog // 无用户登录</span><br><span class="line">conn /as sysdba // 切换到sys用户</span><br><span class="line"></span><br><span class="line">// 创建用户</span><br><span class="line">create user 用户名 identified by 密码;</span><br></pre></td></tr></table></figure>

<div class="note info"><p><strong>创建后你会发现无法登录，此时需要设置授权登录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant create table,unlimited tablespace to 用户名;</span><br><span class="line"></span><br><span class="line">grant select any table to 用户名;</span><br><span class="line"></span><br><span class="line">GRANT UPDATE ANY TABLE,DROP ANY TABLE,INSERT ANY TABLE TO 用户名;</span><br><span class="line"></span><br><span class="line">grant create session to 用户名;</span><br></pre></td></tr></table></figure></div>

<hr>
<h3 id="登录出现Error-6-initializing-SQL-Plus错误"><a href="#登录出现Error-6-initializing-SQL-Plus错误" class="headerlink" title="登录出现Error 6 initializing SQL*Plus错误"></a>登录出现Error 6 initializing SQL*Plus错误</h3><p>原因是找不到oracle目录</p>
<p><img src="2.png" alt></p>
<p>解决：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="使用用户名与密码登录"><a href="#使用用户名与密码登录" class="headerlink" title="使用用户名与密码登录"></a>使用用户名与密码登录</h3><p><img src="3.png" alt></p>
<p>如果登录出现<code>ORA-12170</code>尝试关闭linux防火墙与se</p>
<hr>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li><code>select name from v$database;</code>: 查看所有数据库</li>
<li><code>select * from all_users;</code>    : 查看所有用户</li>
<li><code>show user;</code>: 查看当前用户</li>
<li><code>host clear</code>: 清屏</li>
</ul>
<hr>
]]></content>
  </entry>
  <entry>
    <title>解决docker磁盘空间不足问题</title>
    <url>/2020/02/27/%E8%A7%A3%E5%86%B3docker%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<img src="/2020/02/27/解决docker磁盘空间不足问题/fm.gif">

<p>基于centos8的docker</p>
<a id="more"></a>

<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动docker</span><br><span class="line">service docker start</span><br><span class="line"></span><br><span class="line">#查看docker镜像存放目录占用空间</span><br><span class="line">du -hs /var/lib/docker/</span><br><span class="line"></span><br><span class="line">#停止docker</span><br><span class="line">service docker stop</span><br><span class="line"></span><br><span class="line">#创建新的目录</span><br><span class="line">mkdir -p /目录</span><br><span class="line"></span><br><span class="line">#迁移数据</span><br><span class="line">rsync -avz /var/lib/docker /目录</span><br><span class="line"></span><br><span class="line">#创建文件，并写入</span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;graph&quot;: &quot;/目录&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#重新加载docker，并重启docker服务</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br><span class="line"></span><br><span class="line">#查看docker是否更换目录</span><br><span class="line">docker info | grep &quot;Docker Root Dir&quot;</span><br><span class="line"></span><br><span class="line">#删除旧目录</span><br><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常见docker清理方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看Docker的磁盘使用情况</span><br><span class="line">docker system df</span><br><span class="line"></span><br><span class="line">#可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像</span><br><span class="line">docker system prune</span><br><span class="line"></span><br><span class="line">#删除所有容器与镜像</span><br><span class="line">docker system prune -a</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
  </entry>
  <entry>
    <title>CMake 与 Makefile笔记</title>
    <url>/2020/02/27/makefile%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2020/02/27/makefile笔记/fm.jpg">

<p>这两都是编译配置工具</p>
<a id="more"></a>

<hr>
<h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><p>yum安装:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install make -y</span><br></pre></td></tr></table></figure>

<hr>
<p>tar包安装:<br><a href="https://mirrors.tuna.tsinghua.edu.cn/gnu/make/?C=M&O=D" target="_blank" rel="noopener"><code>下载</code></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 解压或进入目录并创建buil目录</span><br><span class="line">../configure --prefix=/my_file/make/make-4.3/build</span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"># 设置全局环境变量</span><br><span class="line">vim /etc/profile</span><br><span class="line">export PATH=$PATH:/my_file/make/make-4.3/build/bin</span><br></pre></td></tr></table></figure>

<details>
<summary>折叠</summary>

<blockquote>
<p>makefile的主要部分由<code>显示规则</code> <code>隐式规则</code> <code>变量</code> <code>文件指示</code> <code>注释</code>组成</p>
</blockquote>
<blockquote>
<p><strong>makefile的注释用</strong><code>#</code></p>
</blockquote>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>%</td>
<td>匹配零或若干字符</td>
</tr>
</tbody></table>
<h3 id="Makefile规则"><a href="#Makefile规则" class="headerlink" title="Makefile规则"></a>Makefile规则</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目标文件: 源文件 [可选:依赖文件]</span><br><span class="line">	需要执行命令(shell)</span><br><span class="line"></span><br><span class="line"># 例子1</span><br><span class="line">a.out: hellow.c</span><br><span class="line">	gcc hellow.c -o a.out</span><br><span class="line"></span><br><span class="line"># 例子2，命令同时运行</span><br><span class="line">exec:</span><br><span class="line">	cd /; pwd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 例子3，命令分开运行</span><br><span class="line">exec:</span><br><span class="line">	cd / </span><br><span class="line">	pwd</span><br></pre></td></tr></table></figure>

<p><img src="1.png" alt></p>
<hr>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><div class="tabs" id="bian_liang"><ul class="nav-tabs"><li class="tab active"><a href="#bian_liang-1">创建变量</a></li><li class="tab"><a href="#bian_liang-2">使用变量</a></li></ul><div class="tab-content"><div class="tab-pane active" id="bian_liang-1"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量名 = 值</span><br><span class="line"></span><br><span class="line"># 例子</span><br><span class="line">SOURCE = hellow.c</span><br><span class="line">TARGET = a.out</span><br></pre></td></tr></table></figure>
</div><div class="tab-pane" id="bian_liang-2"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(变量名)</span><br><span class="line"></span><br><span class="line"># 例子</span><br><span class="line">SOURCE = hellow.c</span><br><span class="line">TARGET = a.out</span><br><span class="line">$(TARGET): $(SOURCE)</span><br><span class="line">    gcc $(SOURCE) -o $(TARGET)</span><br></pre></td></tr></table></figure>
</div></div></div>

<hr>
<h3 id="删除目标文件"><a href="#删除目标文件" class="headerlink" title="删除目标文件"></a>删除目标文件</h3><ul>
<li><p>在<code>rm</code>命令前面加了一个<code>-</code>的意思就是，也许某些文件出现问题，但不要管，程序继续运行</p>
</li>
<li><p><code>clean</code>需要放在文件的最后面</p>
</li>
<li><p><code>.PHONY</code>伪目标，表示这只是一个标签</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.PHONY: clean</span><br><span class="line">clean:</span><br><span class="line">	-rm 文件</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote>
<p>可以使用类似于#include的方式把别的Makefile包含进来</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># a.mk为Makefile的头文件</span><br><span class="line">include a.mk</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="在不同的目录执行make"><a href="#在不同的目录执行make" class="headerlink" title="在不同的目录执行make"></a>在不同的目录执行make</h3><p><code>all</code>执行多个变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">all: a.o exec </span><br><span class="line"></span><br><span class="line">a.o: test.c</span><br><span class="line">	gcc -c test.c</span><br><span class="line"></span><br><span class="line">exec:</span><br><span class="line">	cd ./dirent; gcc -c test_2.c</span><br></pre></td></tr></table></figure>

<hr>
</details>

<hr>
<h2 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h2><p><a href="https://cmake.org/documentation/" target="_blank" rel="noopener"><code>帮助文档</code></a></p>
<p>yum安装:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install cmake</span><br></pre></td></tr></table></figure>

<hr>
<p>tar包安装:<br><a href="https://cmake.org/download/" target="_blank" rel="noopener"><font color="green">下载</font></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装依赖</span><br><span class="line">yum install openssl openssl-devel</span><br><span class="line"></span><br><span class="line"># 解压后进入目录配置</span><br><span class="line">./bootstrap --prefix=/my_file/cmake/cmake-3.17.0/build</span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"># 设置全局环境变量</span><br><span class="line">vim /etc/profle</span><br><span class="line">export PATH=$PATH:/my_file/cmake/cmake-3.17.0/build/bin</span><br></pre></td></tr></table></figure>

<hr>
<p>创建一个<code>CMakeLists.txt</code>的文件，在同级的目录在创建一个目录（目录文件名称随意）</p>
<p>文件写入以下数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// CMakeLists.txt</span><br><span class="line"></span><br><span class="line"># 创建项目</span><br><span class="line">project (项目名称) </span><br><span class="line"></span><br><span class="line"># 指定生成目标</span><br><span class="line">add_executable(执行文件名称 源文件路径)</span><br></pre></td></tr></table></figure>

<hr>
<p>进入新创建的目录，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmake ..</span><br></pre></td></tr></table></figure>

<p>执行成功就会生成一个Makefile，make之后就能获取可执行文件</p>
<hr>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><details>
<summary>折叠</summary>

<div class="note info"><h4 id="设置最低运行版本"><a href="#设置最低运行版本" class="headerlink" title="设置最低运行版本"></a>设置最低运行版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.0)</span><br></pre></td></tr></table></figure></div>

<div class="note info"><h4 id="使用指定编译器"><a href="#使用指定编译器" class="headerlink" title="使用指定编译器"></a>使用指定编译器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># gcc</span><br><span class="line">set(CMAKE_C_COMPILER &quot;/my_file/gnu/gcc/gcc-9.3.0/build/bin/gcc&quot;)</span><br><span class="line"></span><br><span class="line"># g++</span><br><span class="line">set(CMAKE_CXX_COMPILER &quot;/my_file/gnu/gcc/gcc-9.3.0/build/bin/g++&quot;)</span><br><span class="line"></span><br><span class="line">##### 新版本 #####</span><br><span class="line">vim /etc/profile</span><br><span class="line"># 写入</span><br><span class="line">export CC=/gcc路径</span><br><span class="line">export CXX=/g++路径</span><br></pre></td></tr></table></figure></div>

<div class="note info"><h4 id="设置项目名称"><a href="#设置项目名称" class="headerlink" title="设置项目名称"></a>设置项目名称</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">project (project_name VERSION 版本号 LANGUAGES 语言)</span><br></pre></td></tr></table></figure></div>


<div class="note info"><h4 id="设置编译器参数"><a href="#设置编译器参数" class="headerlink" title="设置编译器参数"></a>设置编译器参数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_definitions(&quot;-g -W -Wall -std=c++17&quot;)</span><br><span class="line"></span><br><span class="line"># 新版本，推荐使用</span><br><span class="line">add_compile_options(-g -W -Wall)</span><br></pre></td></tr></table></figure></div>

<div class="note info"><h4 id="生成可执行文件"><a href="#生成可执行文件" class="headerlink" title="生成可执行文件"></a>生成可执行文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 链接多个文件</span><br><span class="line"># main.cpp head.cpp -o a.out</span><br><span class="line">add_executable(a.out ./src/bin/main.cpp ./src/lib/head.cpp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 单文件</span><br><span class="line"># main.cpp -o a.out</span><br><span class="line">add_executable(a.out ./src/bin/main.cpp)</span><br></pre></td></tr></table></figure></div>

<div class="note info"><h4 id="生成库文件"><a href="#生成库文件" class="headerlink" title="生成库文件"></a>生成库文件</h4><p>默认生成静态库文件，shared为动态库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_library(name [static|shared] name.cpp)</span><br></pre></td></tr></table></figure></div>


<div class="note info"><h4 id="查找当前目录的所有文件"><a href="#查找当前目录的所有文件" class="headerlink" title="查找当前目录的所有文件"></a>查找当前目录的所有文件</h4><p>查找当前目录的所有文件，并将文件名称存储在SRC_LIST变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aux_source_directory(. SRC_LIST)</span><br></pre></td></tr></table></figure></div>


<div class="note info"><h4 id="自定义搜索规则"><a href="#自定义搜索规则" class="headerlink" title="自定义搜索规则"></a>自定义搜索规则</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file(GLOB SRC_LIST &quot;*.cpp&quot; &quot;*.cc&quot;)</span><br></pre></td></tr></table></figure></div>


<div class="note info"><h4 id="设置变量，操作变量"><a href="#设置变量，操作变量" class="headerlink" title="设置变量，操作变量"></a>设置变量，操作变量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建变量</span><br><span class="line">set(name var_args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 追加变量值</span><br><span class="line">set(name $&#123;name&#125; var)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 追加变量值嘅第二种办法</span><br><span class="line">list(append $(name) var)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 删除变量值</span><br><span class="line">list(remove_item $(name) var)</span><br></pre></td></tr></table></figure></div>


<div class="note info"><h4 id="设置包含目录"><a href="#设置包含目录" class="headerlink" title="设置包含目录"></a>设置包含目录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -I$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&quot;)</span><br></pre></td></tr></table></figure></div>


<div class="note info"><h4 id="设置链接库搜索目录"><a href="#设置链接库搜索目录" class="headerlink" title="设置链接库搜索目录"></a>设置链接库搜索目录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -L$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/lib</span><br><span class="line">s&quot;)</span><br></pre></td></tr></table></figure></div>


<div class="note info"><h4 id="设置链接库"><a href="#设置链接库" class="headerlink" title="设置链接库"></a>设置链接库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 绝对路径</span><br><span class="line">target_link_libraries(demo $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/目录/xx.so)</span><br><span class="line"></span><br><span class="line"># 相对路径，这度嘅意思喺设置了g++的-lpthread选项</span><br><span class="line">target_link_libraries(a.out pthread)</span><br></pre></td></tr></table></figure></div>


<div class="note info"><h4 id="输出消息"><a href="#输出消息" class="headerlink" title="输出消息"></a>输出消息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">message(&quot;hellow&quot;)</span><br></pre></td></tr></table></figure></div>


<div class="note info"><h4 id="包含其他cmake文件"><a href="#包含其他cmake文件" class="headerlink" title="包含其他cmake文件"></a>包含其他cmake文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include(/目录/xx.cmkae)</span><br></pre></td></tr></table></figure></div>

<div class="note info"><h4 id="设置库文件目录（gcc-L功能）"><a href="#设置库文件目录（gcc-L功能）" class="headerlink" title="设置库文件目录（gcc -L功能）"></a>设置库文件目录（gcc -L功能）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">link_directories( # 添加链接库目录（gcc -L功能）</span><br><span class="line">    &quot;/my_file/gnu/gcc/gcc-9.3.0/build/lib&quot; </span><br><span class="line">    &quot;/my_file/gnu/gcc/gcc-9.3.0/build/lib64&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>


</details>

<hr>
<p>cmake version: 3.17.0</p>
<details>
<summary>根据官方做的笔记</summary>

<hr>
<div class="note info"><h4 id="配置头文件"><a href="#配置头文件" class="headerlink" title="配置头文件"></a>配置头文件</h4><p>创建一个<code>name.h.in</code>文件并写入:</p>
<blockquote>
<p>修改为自己的项目名称</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define 项目名称_VERSION_MAJOR @项目名称_VERSION_MAJOR@</span><br><span class="line">#define 项目名称_VERSION_MINOR @项目名称_VERSION_MINOR@</span><br></pre></td></tr></table></figure>

<hr>
<p>CMakeLists.txt:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.17.0) # cmake最低使用版本</span><br><span class="line">project(test VERSION 1.0) # 设置项目嘅名称与版本</span><br><span class="line"></span><br><span class="line"># 配置头文件，为项目添加版本信息</span><br><span class="line">configure_file(/目录/name.h.in name.h)</span><br><span class="line"></span><br><span class="line">add_executable(a.out /目录/main.cpp) # 生成可执行文件</span><br><span class="line"></span><br><span class="line"># 由于配置的文件会写入到二进制树，所以需要将该目录添加到路径列表中，搜索变量里包含的文件</span><br><span class="line">target_include_directories(a.out PUBLIC</span><br><span class="line">    &quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>configure_file</code>根据<code>name.h.in</code>生成<code>name.h</code>文件（name.h将会生成在 build目录）</p>
<ul>
<li><code>@test_VERSION_MAJOR@</code>: project(test VERSION 1.0)里的1</li>
<li><code>@test_VERSION_MINOR@</code>: project(test VERSION 1.0)里的0</li>
<li><code>${PROJECT_BINARY_DIR}</code>: 当前工程的构建目录（build）</li>
</ul>
<hr>
<p>创建main.cpp文件写入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;./build/memory_pool_config.h&quot;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)&#123;</span><br><span class="line">      if (argc &lt; 2) &#123; // 在参数不足的情况下输出具体的版本和使用说明</span><br><span class="line">        std::cout &lt;&lt; *argv &lt;&lt; &quot; Version &quot; &lt;&lt; test_VERSION_MAJOR &lt;&lt; &quot;.&quot;</span><br><span class="line">                &lt;&lt; test_VERSION_MINOR &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; &quot;Usage: &quot; &lt;&lt; *argv &lt;&lt; &quot; number&quot; &lt;&lt; std::endl;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>结果:<br><img src="2.png" alt></p></div>

<hr>
<div class="note info"><h4 id="指定C-标准"><a href="#指定C-标准" class="headerlink" title="指定C++标准"></a>指定C++标准</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set(CMAKE_CXX_STANDARD 20)</span><br><span class="line">set(CMAKE_CXX_STANDARD_REQUIRED true)</span><br></pre></td></tr></table></figure></div>


<div class="note info"><h4 id="创建自定义库文件"><a href="#创建自定义库文件" class="headerlink" title="创建自定义库文件"></a>创建自定义库文件</h4><p><img src="4.png" alt></p>
<p>在<code>子目录</code>创建CMakeLists.txt文件并写入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># /my_file/g++_file/src/core/build</span><br><span class="line">add_library(core memory_pool.cpp)</span><br></pre></td></tr></table></figure>

<p>然后在<code>子目录</code>创建并进入Build目录，进行cmake.. 与 make操作</p>
<hr>
<p>生成的库文件:<br><img src="3.png" alt></p>
<hr>
<ul>
<li><code>add_library</code>: 默认生成为静态库文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 指定生成静态库</span><br><span class="line">add_library(core STATIC memory_pool.cpp)</span><br><span class="line"># 指定生成动态库</span><br><span class="line">add_library(core SHARED memory_pool.cpp)</span><br></pre></td></tr></table></figure></div>

<hr>
<div class="note info"><h4 id="使用自定义库文件"><a href="#使用自定义库文件" class="headerlink" title="使用自定义库文件"></a>使用自定义库文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 构建选项</span><br><span class="line">option(VAL &quot;this is value&quot; ON) # 创建一个叫VAL的宏，默认值值ON</span><br><span class="line">if(VAL)</span><br><span class="line">    add_subdirectory(src) # 添加子目录 </span><br><span class="line">    list(APPEND EXTRA_LIBS core) # 可选库</span><br><span class="line">endif(VAL)</span><br><span class="line"></span><br><span class="line">target_link_libraries(a.out PUBLIC # 添加链接库</span><br><span class="line">    $&#123;EXTRA_LIBS&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 由于配置的文件会写入到二进制树，所以需要将该目录添加到路径列表中，搜索变量里包含的文件</span><br><span class="line">target_include_directories(a.out PUBLIC</span><br><span class="line">    &quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">target_link_directories(a.out</span><br><span class="line">    INTERFACE $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>打开<code>name.h.in</code>写入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#cmakedefine VAL</span><br></pre></td></tr></table></figure>

<ul>
<li>option必须放在configure_file前面，否则宏不会生成</li>
</ul></div>

<hr>
<div class="note info"><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>文件末尾处添加: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># /my_file/g++_file/build</span><br><span class="line">install(TARGETS a.out DESTINATION bin) # 将可执行文件安装到/usr/local/bin</span><br><span class="line">install(FILES &quot;./src/core/memory_pool.h&quot;</span><br><span class="line">    DESTINATION include</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># /my_file/g++_file/src/core/build</span><br><span class="line">add_library(core SHARED memory_pool.cpp) # 生成动态库文件libcore.so</span><br><span class="line">+ install(TARGETS core DESTINATION lib) # 将libcore.so安装到/usr/local/lib</span><br><span class="line">+ install(FILES memory_pool.h DESTINATION include) # 将头文件复制到/usr/local/include</span><br></pre></td></tr></table></figure>

<p>最上级CMakeLists进行cmake.. 后make install</p>
<p><img src="5.png" alt></p>
<p>添加动态库路径后即可运行文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 添加动态库</span><br><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib</span><br><span class="line"></span><br><span class="line"># 运行</span><br><span class="line">/usr/local/bin/a.out </span><br></pre></td></tr></table></figure>

<p>make install指定安装路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make DESTDIR=/路径 install</span><br></pre></td></tr></table></figure></div>


<div class="note info"><h4 id="定义函数进行测试"><a href="#定义函数进行测试" class="headerlink" title="定义函数进行测试"></a>定义函数进行测试</h4><p>install之后:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enable_testing() # 启用测试</span><br><span class="line"></span><br><span class="line"># 定义函数并进行测试</span><br><span class="line">function(do_test target arg result) # function(函数名 参数列表)</span><br><span class="line">    # add_test(NAME 名称 COMMAND 可执行文件 参数)</span><br><span class="line">    add_test(NAME Comp$&#123;arg&#125; COMMAND $&#123;target&#125; $&#123;arg&#125;)</span><br><span class="line">    # set_tests_properties(add_test的名称 PASS_REGULAR_EXPRESSION &quot;会输出的字符串&quot;)</span><br><span class="line">    set_tests_properties(Comp$&#123;arg&#125; # 利用”PASS_REGULAR_EXPRESSION”测试属性来验证输出是否包含特定字符串</span><br><span class="line">        PROPERTIES PASS_REGULAR_EXPRESSION $&#123;result&#125;</span><br><span class="line">    )</span><br><span class="line">endfunction(do_test)</span><br><span class="line"></span><br><span class="line">do_test(a.out start &quot;port is *&quot;) # 调用函数</span><br></pre></td></tr></table></figure>

<p>进行make之后使用<code>ctest</code>进行测试</p></div>


<div class="note info"><h4 id="系统自检"><a href="#系统自检" class="headerlink" title="系统自检"></a>系统自检</h4><p>需要放在configure_file之前</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># /mnt/FILE/g++_file/build（顶层）</span><br><span class="line"># CheckSymbolExists宏,测试这些函数是否有效</span><br><span class="line">include(CheckSymbolExists) </span><br><span class="line">set(CMAKE_REQUIRED_LIBRARIES &quot;m&quot;)</span><br><span class="line"># 函数</span><br><span class="line">check_symbol_exists(log &quot;math.h&quot; HAVE_LOG)</span><br></pre></td></tr></table></figure>

<p>name.h.in写入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># /mnt/FILE/g++_file/src/http</span><br><span class="line">#cmakedefine HAVE_LOG</span><br></pre></td></tr></table></figure></div>


</details>


<div class="note info"><h4 id="输出消息"><a href="#输出消息" class="headerlink" title="输出消息"></a>输出消息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">message(&quot;消息&quot;)</span><br></pre></td></tr></table></figure></div>


<div class="note info"><h4 id="添加预定义宏并赋值"><a href="#添加预定义宏并赋值" class="headerlink" title="添加预定义宏并赋值"></a>添加预定义宏并赋值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_compile_definitions(DEFINE_NAME=$&#123;DEFINE_NAME&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// head.h</span><br><span class="line">#ifndef DEFINE_NAME</span><br><span class="line">    #define DEFINE_NAME 10</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></div>


<div class="note info"><h4 id="设置最新版本的g-库目录"><a href="#设置最新版本的g-库目录" class="headerlink" title="设置最新版本的g++库目录"></a>设置最新版本的g++库目录</h4><p><code>注意</code>: 新的glibc千万不要使用这两环境变量！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"># 动态库</span><br><span class="line">export LD_LIBRARY_PATH=/gcc目录/lib64</span><br><span class="line"></span><br><span class="line"># 静态库</span><br><span class="line">export LIBRARY_PATH=/gcc目录/lib</span><br></pre></td></tr></table></figure></div>









<h3 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h3><p><code>${CMAKE_CURRENT_LIST_DIR}</code>: 最顶层CMakeLists.txt文件的位置</p>
<div class="note info"><p>#### </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>

<hr>
]]></content>
  </entry>
  <entry>
    <title>CGI笔记</title>
    <url>/2020/02/26/CGI%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2020/02/26/CGI笔记/fm.gif">

<p>基于C语言编写</p>
<a id="more"></a>

<hr>
<blockquote>
<p>cgi: CGI其实本质上就是一个普通的二进制程序<br>通用网关接口，是www技术中最重要的技术之一，是外部应用程序（即CGI程序）与WEB服务器之间的接口标准，负责在CGI程序和Web服务器之间传递信息。CGI是Web服务器运行时，调用外部应用程序（即CGI程序）的规范，CGI规范允许Web服务器执行外部程序，并将它们的输出发送给Web浏览器，CGI将Web的一组简单的静态超媒体文档变成一个完整的、新的交互式媒体，按照CGI编写的程序可以扩展Web服务器功能。</p>
</blockquote>
<blockquote>
<p>主流的CGI程序用Perl编写，Perl是一款强大的脚本语言</p>
</blockquote>
<blockquote>
<p>cgi是一种脚本</p>
</blockquote>
<hr>
<h3 id="准备阶段，安装并启动web服务器"><a href="#准备阶段，安装并启动web服务器" class="headerlink" title="准备阶段，安装并启动web服务器"></a>准备阶段，安装并启动web服务器</h3><blockquote>
<p>以下服务器二选一即可</p>
</blockquote>
<ul>
<li>vim搜索功能<blockquote>
<p><code>:/关键字</code>搜索<br><code>n</code>下一个关键字</p>
</blockquote>
</li>
</ul>
<div class="tabs" id="server"><ul class="nav-tabs"><li class="tab active"><a href="#server-1">apache</a></li><li class="tab"><a href="#server-2">nginx</a></li></ul><div class="tab-content"><div class="tab-pane active" id="server-1"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装apaches</span><br><span class="line">yum install httpd</span><br><span class="line"></span><br><span class="line">#打开配置文件</span><br><span class="line">vim /etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">#修改端口</span><br><span class="line">Listen 端口</span><br><span class="line"></span><br><span class="line">#启动cgi,将这行前面的#去掉</span><br><span class="line">ScriptAlias /cgi-bin/ &quot;/var/www/cgi-bin/&quot;</span><br><span class="line"></span><br><span class="line">#启动服务器</span><br><span class="line">service httpd start</span><br><span class="line"></span><br><span class="line">#测试服务是否启动成功</span><br><span class="line">curl localhost:端口</span><br></pre></td></tr></table></figure>

</div><div class="tab-pane" id="server-2"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装nginx</span><br><span class="line">yum install nginx</span><br><span class="line"></span><br><span class="line">#打开配置文件</span><br><span class="line">vim /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">#修改端口</span><br><span class="line">listen 8080;</span><br><span class="line"></span><br><span class="line">#启动nginx</span><br><span class="line">service nginx start</span><br><span class="line"></span><br><span class="line">#测试nginx是否启动成功</span><br><span class="line">curl localhost:8080</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于nginx并不直支持直接使用cgi，但可以通过fcgiwrap这个通用的 fastcgi 进程管理器来帮助 nginx 处理 cgi</p>
</blockquote>
<ul>
<li><p>fcgiwrap是fastcgi管理器</p>
</li>
<li><p>fastcgi是CGI + 多进程模型</p>
</li>
</ul>
<blockquote>
<p>安装 fcgiwrap 与 fastcgi</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install fcgi fcgi-devel autoconf automake libtool</span><br><span class="line"></span><br><span class="line">#安装spawn-fcgi</span><br><span class="line">wget http://download.godaner.com/spawn-fcgi.tar.gz</span><br><span class="line"></span><br><span class="line">#解压</span><br><span class="line">tar -zxvf spawn-fcgi.tar.gz</span><br><span class="line"></span><br><span class="line">#进入目录</span><br><span class="line">cd spawn-fcgi</span><br><span class="line"></span><br><span class="line">#生成./configure与make</span><br><span class="line">/autogen.sh</span><br><span class="line"></span><br><span class="line">#生成makefile</span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line">#生成执行文件并安装</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">#安装fcgiwrap</span><br><span class="line">git clone https://github.com/gnosek/fcgiwrap.git</span><br><span class="line"></span><br><span class="line">#进入目录</span><br><span class="line">cd fcgiwrap</span><br><span class="line"></span><br><span class="line">#生成configure</span><br><span class="line">autoreconf -i</span><br><span class="line"></span><br><span class="line">#生成Makefile</span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line">#生成执行文件并安装</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<ul>
<li><p>spawn-fcgi，make出错</p>
<blockquote>
<p>把第22行的typedef int socklen_t注释掉</p>
</blockquote>
</li>
<li><p>fcgiwrap，make出错<br><img src="2.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#找到这行</span><br><span class="line">CFLAGS = -std=gnu99 -Wall -Wextra -Werror -pedantic -O2 -g3</span><br><span class="line"></span><br><span class="line">#改成</span><br><span class="line">CFLAGS = -std=gnu99 -Wall -Wextra -pedantic -O2 -g3</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>创建fcgiwrap管理脚本</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建文件并写入内容</span><br><span class="line">vim /etc/init.d/fcgiwrap</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line"> </span><br><span class="line"># chkconfig:   - 85 15</span><br><span class="line"># description: fcgiwrap </span><br><span class="line"># processname: fcgiwrap</span><br><span class="line"> </span><br><span class="line">SPAWN_FCGI=&quot;/usr/local/bin/spawn-fcgi&quot;</span><br><span class="line">DAEMON=&quot;/usr/local/sbin/fcgiwrap&quot;</span><br><span class="line">NAME=&quot;fcgiwrap&quot;</span><br><span class="line">PIDFILE=&quot;/var/run/fcgiwrap/$NAME.pid&quot; #配置pid目录</span><br><span class="line">#FCGI_SOCKET=&quot;/var/run/fcgiwrap/$NAME.socket&quot; #配置socket目录</span><br><span class="line">FCGI_ADDR=&quot;127.0.0.1&quot; #服务监听IP</span><br><span class="line">FCGI_PORT=&quot;8081&quot;    #服务监听端口</span><br><span class="line">FCGI_USER=&quot;nginx&quot; #配置用户</span><br><span class="line">FCGI_GROUP=&quot;nginx&quot; #配置用户组</span><br><span class="line">FORK_NUM=2 #配置进程数量</span><br><span class="line">SCRIPTNAME=/etc/init.d/$NAME</span><br><span class="line">  </span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">    start)</span><br><span class="line">        PID=`pidof $NAME`</span><br><span class="line">        if [ ! -z &quot;$PID&quot; ]; then</span><br><span class="line">            echo &quot; $NAME already running&quot;</span><br><span class="line">            exit 1</span><br><span class="line">        fi</span><br><span class="line">        #$SPAWN_FCGI -u $FCGI_USER -g $FCGI_GROUP -s $FCGI_SOCKET -P $PIDFILE -F $FORK_NUM -f $DAEMON</span><br><span class="line">        $SPAWN_FCGI -u $FCGI_USER -g $FCGI_GROUP -a $FCGI_ADDR -p $FCGI_PORT -P $PIDFILE -F $FORK_NUM -f $DAEMON</span><br><span class="line">        sleep 1</span><br><span class="line">        echo -n &quot;Starting $NAME... &quot;</span><br><span class="line">        if [ &quot;$?&quot; != 0 ]; then</span><br><span class="line">            echo &quot; failed&quot;</span><br><span class="line">            exit 1</span><br><span class="line">        else</span><br><span class="line">            echo &quot; done&quot;</span><br><span class="line">        fi</span><br><span class="line">    ;;</span><br><span class="line">  </span><br><span class="line">    stop)</span><br><span class="line">        echo -n &quot;Stoping $NAME... &quot;</span><br><span class="line">        PID=`pidof $NAME`</span><br><span class="line">        if [ ! -z &quot;$PID&quot; ]; then</span><br><span class="line">            kill `pidof $NAME`</span><br><span class="line">            if [ &quot;$?&quot; != 0 ]; then</span><br><span class="line">                echo &quot; failed. re-quit&quot;</span><br><span class="line">                exit 1</span><br><span class="line">            else</span><br><span class="line">                rm -f $pid</span><br><span class="line">                echo &quot; done&quot;</span><br><span class="line">            fi</span><br><span class="line">        else</span><br><span class="line">            echo &quot;$NAME is not running.&quot;</span><br><span class="line">            exit 1</span><br><span class="line">        fi</span><br><span class="line">    ;;</span><br><span class="line">  </span><br><span class="line">    status)</span><br><span class="line">        PID=`pidof $NAME`</span><br><span class="line">        if [ ! -z &quot;$PID&quot; ]; then</span><br><span class="line">            echo &quot;$NAME (pid $PID) is running...&quot;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;$NAME is stopped&quot;</span><br><span class="line">            exit 0</span><br><span class="line">        fi</span><br><span class="line">    ;;</span><br><span class="line">  </span><br><span class="line">    restart)</span><br><span class="line">        $SCRIPTNAME stop</span><br><span class="line">        sleep 2</span><br><span class="line">        $SCRIPTNAME start</span><br><span class="line">    ;;</span><br><span class="line">  </span><br><span class="line">    *)</span><br><span class="line">        echo &quot;Usage: $SCRIPTNAME &#123;start|stop|restart|status&#125;&quot;</span><br><span class="line">        exit 1</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对脚本赋权并添加自启</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#添加权限</span><br><span class="line">chmod +x /etc/init.d/fcgiwrap</span><br><span class="line"></span><br><span class="line">chkconfig --add fcgiwrap</span><br><span class="line"></span><br><span class="line">#自启</span><br><span class="line">chkconfig fcgiwrap on</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建脚本中配置的pid目录，启动服务</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#配置pid目录</span><br><span class="line">mkdir -p /var/run/fcgiwrap</span><br><span class="line"></span><br><span class="line">#启动服务</span><br><span class="line">service fcgiwrap start</span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改nginx配置文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#打开配置文件</span><br><span class="line">vim /etc/nginx.conf</span><br><span class="line"></span><br><span class="line">#server作用域里写入</span><br><span class="line">location ~/cgi-bin/.*\.(sh|py|cgi)$ &#123;</span><br><span class="line">            #fastcgi_pass   unix:/var/run/fcgiwrap/fcgiwrap.socket;</span><br><span class="line">            fastcgi_pass   127.0.0.1:8081; #对应fcgiwrap监听ip:端口</span><br><span class="line">            fastcgi_param  SCRIPT_NAME  $fastcgi_script_name;</span><br><span class="line">            include        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">#重启nginx</span><br><span class="line">service nginx reload</span><br></pre></td></tr></table></figure>

<p>最后一步，在<code>/usr/share/nginx/html</code>创建<code>cgi-bin</code>目录</p>
</div></div></div>


<hr>
<h3 id="编写一个程序进行测试"><a href="#编写一个程序进行测试" class="headerlink" title="编写一个程序进行测试"></a>编写一个程序进行测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// test.c</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line">    printf(&quot;Content-type:text/html\n\n&quot;);</span><br><span class="line">    printf(&quot;hello world\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>编译成cgi文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -g test.c -o a.cgi</span><br></pre></td></tr></table></figure>

<div class="tabs" id="server2"><ul class="nav-tabs"><li class="tab active"><a href="#server2-1">apache</a></li><li class="tab"><a href="#server2-2">nginx</a></li></ul><div class="tab-content"><div class="tab-pane active" id="server2-1"><blockquote>
<p>将cgi文件移动到<code>/var/www/cgi-bin</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl localhost:端口/cgi-bin/a.cgi</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong><br><img src="1.png" alt></p>
</div><div class="tab-pane" id="server2-2"><blockquote>
<p>将cgi文件移动到<code>/usr/share/nginx/html/cgi-bin</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl localhost:8080/cgi-bin/a.cgi</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong><br><img src="3.png" alt></p>
</div></div></div>

<hr>
]]></content>
      <tags>
        <tag>CGI</tag>
      </tags>
  </entry>
  <entry>
    <title>修改wordpress url</title>
    <url>/2020/02/24/%E4%BF%AE%E6%94%B9wordpress-url/</url>
    <content><![CDATA[<img src="/2020/02/24/修改wordpress-url/fm.gif">

<p>基于cent8，docker的wordpress</p>
<a id="more"></a>

<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 进入容器</span><br><span class="line">docker exec -it sql容器名 /bin/bash</span><br><span class="line"></span><br><span class="line">// 登录mysql</span><br><span class="line">mysql -u用户 -p密码</span><br><span class="line"></span><br><span class="line">// 进入wordpress数据库</span><br><span class="line">USE 你的wordpress数据库;</span><br><span class="line"></span><br><span class="line">// 查看当前url</span><br><span class="line">select * from wp_options limit 1;</span><br><span class="line"></span><br><span class="line">// 修改url</span><br><span class="line">UPDATE wp_options SET option_value=&quot;新的rul&quot; WHERE option_name=&quot;siteurl&quot;;</span><br></pre></td></tr></table></figure>

<p>使用新的url连接即可</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>Tinyhttpd笔记</title>
    <url>/2020/02/19/CTinyhttpd%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2020/02/19/CTinyhttpd笔记/fm.gif">

<p>这是一个用C写的轻量级http server，在centos8用<code>win vs code</code>使用ssh远程连接进行测试运行与修改</p>
<a id="more"></a>

<hr>
<ul>
<li><strong>下载项目</strong><br><a href="https://github.com/EZLippi/Tinyhttpd" target="_blank" rel="noopener"><strong>Download</strong></a></li>
</ul>
<hr>
<h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><blockquote>
<p>http协议是基于tcp/ip协议的，要获取服务端的html数据只需要创建socket连接即可</p>
</blockquote>
<p><strong>http通信流程</strong></p>
<p><img src="http.png" alt></p>
<hr>
<details>
<summary>需要注意的事项</summary>

<ul>
<li><p>http是无连接的，每次连接只处理一个请求。服务端处理完客户端的请求并且接收到客户端的答应就会断开连接</p>
</li>
<li><p>http是媒体独立的，只要客户端和服务端知道如何处理数据内容，任何类型都可以通过http发送。客户端与服务器指定使用合适的mime-type（内容类型）</p>
</li>
<li><p>http是无状态的，对事务处理没有记忆能力，需要处理前面的数据时需要重新传输</p>
</li></ul></details>




<details>
<summary>请求格式</summary>

<ul>
<li><strong>客户端请求格式</strong><blockquote>
<p>由请求行，请求头，空行，请求数据组成<br><img src="client.png" alt></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 客户端请求例子</span><br><span class="line">GET /hello.txt HTTP/1.1</span><br><span class="line">User-Agent: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3</span><br><span class="line">Host: www.example.com</span><br><span class="line">Accept-Language: en, mi</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li><strong>服务端响应格式</strong><blockquote>
<p>由状态行，消息头，空行，响应正文组成<br><img src="server.png" alt></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 服务端响应例子</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 27 Jul 2009 12:28:53 GMT</span><br><span class="line">Server: Apache</span><br><span class="line">Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT</span><br><span class="line">ETag: &quot;34aa387-d-1568eb00&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 51</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure>

</li>
</ul>
</details>


<details>
<summary>http请求方法</summary>

<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>请求指定的页面信息，并返回实体主体</td>
</tr>
<tr>
<td>POST</td>
<td>向指定资源提交数据进行处理请求（例如提交表单或者上传文</td>
</tr>
</tbody></table>
</details>


<details>
<summary>http响应头信息</summary>

<table>
<thead>
<tr>
<th>答应头</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Content-Length</td>
<td>表示内容长度</td>
</tr>
<tr>
<td>Content-Type</td>
<td>表示后面的文档属于什么MIME类型</td>
</tr>
</tbody></table>
</details>


<details>
<summary>http状态码</summary>

<table>
<thead>
<tr>
<th>分类</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1开头</td>
<td>信息，服务器收到请求，需要请求者继续执行操作</td>
</tr>
<tr>
<td>2开头</td>
<td>成功，操作被成功接收并处理</td>
</tr>
<tr>
<td>3开头</td>
<td>重定向，需要进一步的操作以完成请求</td>
</tr>
<tr>
<td>4开头</td>
<td>客户端错误，请求包含语法错误或无法完成请求</td>
</tr>
<tr>
<td>5开头</td>
<td>服务器错误，服务器在处理请求的过程中发生了错误</td>
</tr>
<tr>
<td></td></tr></tbody></table></details>
<td></td>


<details>
<summary>http内容类型</summary>

<blockquote>
<p>用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件</p>
</blockquote>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>text/html</td>
<td>html格式</td>
</tr>
<tr>
<td>text/plain</td>
<td>纯文本格式</td>
</tr>
<tr>
<td>text/html</td>
<td>xml格式</td>
</tr>
<tr>
<td>image/gif</td>
<td>gif图片格式</td>
</tr>
<tr>
<td>image/jpeg</td>
<td>jpg图片格式</td>
</tr>
<tr>
<td>image/png</td>
<td>png图片格式</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 例子</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h3 id="cgi"><a href="#cgi" class="headerlink" title="cgi"></a>cgi</h3><blockquote>
<p>CGI(Common Gateway Interface) 是 HTTP 服务器与你的或其它机器上的程序进行“交谈”的一种工具，其程序须运行在网络服务器上。</p>
</blockquote>
<blockquote>
<p>绝大多数的 CGI 程序被用来解释处理来自表单的输入信息，并在服务器产生相应的处理，或将相应的信息反馈给浏览器。CGI 程序使网页具有交互功能。</p>
</blockquote>
<hr>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>注意：源码做了一些修改</p>
<p><img src="1.png" alt></p>
<hr>
<p><img src="2.png" alt></p>
<hr>
<h5 id="startup-创建http套接字连接"><a href="#startup-创建http套接字连接" class="headerlink" title="startup()创建http套接字连接"></a>startup()创建http套接字连接</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int startup(__u_short *port)&#123;</span><br><span class="line">    /*</span><br><span class="line">    创建http服务端套接字接连。</span><br><span class="line">    PF_INET     : ipv4协议域</span><br><span class="line">    SOCK_STREAM : 字节流套接字</span><br><span class="line">    0           : 使用系统分配的网络协议</span><br><span class="line">    */</span><br><span class="line">    int httpd = socket(PF_INET, SOCK_STREAM, 0);</span><br><span class="line">    if(httpd != -1)&#123; </span><br><span class="line">        // 创建ipv4协议结构</span><br><span class="line">        struct sockaddr_in obj;</span><br><span class="line">        obj.sin_family = AF_INET; // 使用ipv4协议域</span><br><span class="line">        obj.sin_port = htons(*port); // 使用本地字序short转网络字序short，初始化端口</span><br><span class="line">        obj.sin_addr.s_addr = htonl(INADDR_ANY); // 使用本地字序long转网络字序long，初始化地址（INADDR_ANY转地址为:0.0.0.0）</span><br><span class="line"></span><br><span class="line">        int on = 1; // setsockopt()的开关</span><br><span class="line">        /*</span><br><span class="line">        为httpd开启地址重用功能</span><br><span class="line">        SOL_SOCKET   : 常用的套接字</span><br><span class="line">        SO_REUSEADDR : 地址重用</span><br><span class="line">        */</span><br><span class="line">        if(setsockopt(httpd, SOL_SOCKET, SO_REUSEADDR, &amp;on, sizeof(on)) == -1)</span><br><span class="line">            error_die(&quot;setsockopt&quot;);</span><br><span class="line">        </span><br><span class="line">        // 将ipv4协议结构obj里的地址绑定到httpd</span><br><span class="line">        if(bind(httpd, (struct sockaddr*)&amp;obj, sizeof(obj)) == -1)</span><br><span class="line">            error_die(&quot;bind&quot;);</span><br><span class="line">        </span><br><span class="line">        if(*port == 0)&#123; // 生成动态端口</span><br><span class="line">            socklen_t len = sizeof(obj);</span><br><span class="line">            // 在端口为0时使用bind()后在调用getsockname()，obj的端口会由内核分配</span><br><span class="line">            if(getsockname(httpd, (struct sockaddr*)&amp;obj, &amp;len) == -1)</span><br><span class="line">                error_die(&quot;getsockname&quot;);</span><br><span class="line">            *port = ntohs(obj.sin_port); // 网络字序short转本地字序short，将端口指向obj的端口</span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        // httpd由关闭状态转成监听状态，并且最大未连接队列排队数为5</span><br><span class="line">        if(listen(httpd, 5) == -1) </span><br><span class="line">            error_die(&quot;listen&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return httpd; // 返回http套接字描述符</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>listen()监听队列<br><img src="3.png" alt></p>
</blockquote>
<hr>
<h5 id="error-die-输出错误信息，并退出程序"><a href="#error-die-输出错误信息，并退出程序" class="headerlink" title="error_die()输出错误信息，并退出程序"></a>error_die()输出错误信息，并退出程序</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void error_dir(const char *err_str)&#123;</span><br><span class="line">    perror(err_str);</span><br><span class="line">    exit(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="get-line-从客户端读取一行数据，以-r或-r-n作为行结束符"><a href="#get-line-从客户端读取一行数据，以-r或-r-n作为行结束符" class="headerlink" title="get_line()从客户端读取一行数据，以\r或\r\n作为行结束符"></a>get_line()从客户端读取一行数据，以\r或\r\n作为行结束符</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int get_line(int client, char *buf, int size)&#123;</span><br><span class="line">    int i  = 0, // 字节数</span><br><span class="line">        n  = 0;</span><br><span class="line">    char c = &apos;\0&apos;;</span><br><span class="line">    while(i != size &amp;&amp; c != &apos;\n&apos;)&#123;</span><br><span class="line">        n = recv(client, &amp;c ,1, 0); // 从客户端接收数据</span><br><span class="line">        if(n &gt; 0)&#123;</span><br><span class="line">            if(c == &apos;\r&apos;)&#123;</span><br><span class="line">                // MSG_PEEK偷看数据但不接收，下次使用recv()还是这个数据</span><br><span class="line">                n = recv(client, &amp;c, 1, MSG_PEEK); // 接收上一个recv()的数据</span><br><span class="line">                if(n &gt; 0 &amp;&amp; c == &apos;\n&apos;)</span><br><span class="line">                    recv(client, &amp;c, 1, 0);</span><br><span class="line">                else</span><br><span class="line">                    c = &apos;\n&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">            *(buf + i++) = c;</span><br><span class="line">        &#125; else // 接收不到任何数据</span><br><span class="line">            c = &apos;\n&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    *(buf + i) = &apos;\0&apos;;</span><br><span class="line">    return i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="accept-requst-请求处理"><a href="#accept-requst-请求处理" class="headerlink" title="accept_requst()请求处理"></a>accept_requst()请求处理</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void accept_requst(void *sock)&#123;</span><br><span class="line">    int client = (intptr_t)sock; // 客户端套接字描述符</span><br><span class="line">    char buf[buf_size]; // 客户端请求数据</span><br><span class="line">    int numchars = get_line(client, buf, buf_size); // 获取数据</span><br><span class="line"></span><br><span class="line">    char method[method_size]; // 请求</span><br><span class="line">    int i = 0; // 循环次数</span><br><span class="line">    while(!ISspace(buf[i]) &amp;&amp; i != method_size)&#123; // 获取请求</span><br><span class="line">        method[i] = buf[i];</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    method[i] = &apos;\0&apos;;</span><br><span class="line"></span><br><span class="line">    // 处理不被支持的请求类型</span><br><span class="line">    if(strcasecmp(method, &quot;POST&quot;) &amp;&amp; strcasecmp(method, &quot;GET&quot;))&#123;</span><br><span class="line">        unimplemented(client); </span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int j = i; // buf的索引</span><br><span class="line">    while(ISspace(buf[j]) &amp;&amp; j != buf_size) // 将索引定位到下一个字符</span><br><span class="line">        ++j;</span><br><span class="line">    </span><br><span class="line">    i = 0;</span><br><span class="line">    char url[url_size]; // 服务端文件路径</span><br><span class="line">    if(!ISspace(buf[j]) &amp;&amp; j &lt; numchars)</span><br><span class="line">        url[i++] = buf[j++];</span><br><span class="line">    url[i] = &apos;\0&apos;;</span><br><span class="line">    </span><br><span class="line">    /* cgi文件类型标识符 */</span><br><span class="line">    int cgi = 0; </span><br><span class="line"></span><br><span class="line">    char *query_string = NULL;</span><br><span class="line">    if(strcasecmp(method, &quot;POST&quot;) == 0)</span><br><span class="line">        cgi = 1;</span><br><span class="line">    else if(strcasecmp(method, &quot;GET&quot;) == 0)&#123;</span><br><span class="line">        query_string = url;</span><br><span class="line">        while(*query_string != &apos;?&apos; &amp;&amp; *query_string != &apos;\0&apos;)</span><br><span class="line">            ++query_string; </span><br><span class="line">        if(*query_string == &apos;?&apos;)&#123; // 动态请求</span><br><span class="line">            cgi           = 1;</span><br><span class="line">            *query_string = &apos;\0&apos;;</span><br><span class="line">            ++query_string;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    char path[path_size]; // 服务器文件路径</span><br><span class="line">    // 获取服务器根目录文件</span><br><span class="line">    sprintf(path, &quot;%s%s&quot;, dir, url);</span><br><span class="line">    if(path[strlen(path) - 1] == &apos;/&apos;)</span><br><span class="line">        strcat(path, file_1);</span><br><span class="line">    </span><br><span class="line">    struct stat st;</span><br><span class="line">    // 获取服务器文件的属性</span><br><span class="line">    if(stat(path, &amp;st) == -1)&#123; // 获取失败</span><br><span class="line">        while(numchars &gt; 0 &amp;&amp; strcmp(&quot;\n&quot;, buf))</span><br><span class="line">            numchars = get_line(client, buf, buf_size); // 从客户端获取数据</span><br><span class="line">        not_found(client); // 找不到文件</span><br><span class="line">    &#125; else &#123; // __S_IFMT是子掩码</span><br><span class="line">        if((st.st_mode &amp; __S_IFMT) == __S_IFDIR) // 是目录</span><br><span class="line">            strcat(path, file_2);</span><br><span class="line">        /* 拥有执行权则被视为cgi文件，服务端文件需要没有执行权 */</span><br><span class="line">        if((st.st_mode &amp; S_IXUSR) || (st.st_mode &amp; S_IXGRP) || (st.st_mode &amp; S_IXOTH))</span><br><span class="line">            cgi = 1;</span><br><span class="line">        if(cgi)</span><br><span class="line">            execute_cgi(client, path, method, query_string); // 处理cgi文件</span><br><span class="line">        else </span><br><span class="line">            serve_file(client, path); // 处理服务端文件</span><br><span class="line">    &#125;</span><br><span class="line">    close(client); // 处理完请求</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="serve-file-处理服务端文件"><a href="#serve-file-处理服务端文件" class="headerlink" title="serve_file()处理服务端文件"></a>serve_file()处理服务端文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void serve_file(int client, const char *path)&#123;</span><br><span class="line">    char buf[buf_size];</span><br><span class="line">    buf[0] = &apos;A&apos;;   buf[1] = &apos;\0&apos;;</span><br><span class="line">    int numchars = 1;</span><br><span class="line">    while(numchars &gt; 0 &amp;&amp; strcmp(&quot;\n&quot;, buf))</span><br><span class="line">        numchars = get_line(client, buf, buf_size);</span><br><span class="line">    </span><br><span class="line">    FILE *resource = fopen(path, &quot;r&quot;); // 只读模式打开文件</span><br><span class="line">    if(resource == NULL) // 打开文件失败</span><br><span class="line">        not_found(client);</span><br><span class="line">    else &#123;</span><br><span class="line">        headres(client); // 获取响应头</span><br><span class="line">        cat(client, resource); // 读取文件的数据并发送到客户端</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(resource); // 关闭文件</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="cat-读取文件数据并发送到客户端"><a href="#cat-读取文件数据并发送到客户端" class="headerlink" title="cat()读取文件数据并发送到客户端"></a>cat()读取文件数据并发送到客户端</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void cat(int client, FILE *resource)&#123;</span><br><span class="line">    char buf[buf_size];</span><br><span class="line">    fgets(buf, buf_size, resource); // 读取一行数据</span><br><span class="line">    while(!feof(resource))&#123; // 读取EOF前的数据</span><br><span class="line">        send(client, buf, strlen(buf), 0); // 发送数据</span><br><span class="line">        fgets(buf, buf_size, resource); // 读取下一行数据</span><br><span class="line">    &#125;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="execute-cgi-处理CGI文件"><a href="#execute-cgi-处理CGI文件" class="headerlink" title="execute_cgi()处理CGI文件"></a>execute_cgi()处理CGI文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void execute_cgi(int client, const char *path, const char *method, const char *query_string)&#123;</span><br><span class="line">    char buf[BUF_SIZE];</span><br><span class="line">    int numchars = 1; // 消息长度</span><br><span class="line">    int content_length = -1;</span><br><span class="line">    if(strcasecmp(method, &quot;GET&quot;) == 0)&#123;</span><br><span class="line">        while(numchars &gt; 0 &amp;&amp; strcmp(&quot;\n&quot;, buf)) // 丢弃数据</span><br><span class="line">            numchars = get_line(client, buf, BUF_SIZE);</span><br><span class="line">    &#125; else &#123; // POST</span><br><span class="line">        numchars = get_line(client, buf, BUF_SIZE);</span><br><span class="line">        while(numchars &gt; 0 &amp;&amp; strcmp(&quot;\n&quot;, buf))&#123;</span><br><span class="line">            buf[15] = &apos;\0&apos;;</span><br><span class="line">            if(strcasecmp(buf, &quot;Content-Lenght:&quot;) == 0)</span><br><span class="line">                content_length = atoi(buf + 16);</span><br><span class="line">            numchars = get_line(client, buf, BUF_SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        if(content_length == -1)&#123;</span><br><span class="line">            bad_requst(client); // 执行cgi程序出现错误</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int cgi_input[2],</span><br><span class="line">        cgi_output[2];</span><br><span class="line">    </span><br><span class="line">    // 建立线程单向管道,[0]读，[1]写</span><br><span class="line">    if(pipe(cgi_input) == -1)&#123;</span><br><span class="line">        cannot_execute(client); // 服务器内部错误，无法完成请求</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if(pipe(cgi_output) == -1)&#123;</span><br><span class="line">        cannot_execute(client);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pid_t pid = 0; // 进程ip</span><br><span class="line">    if((pid = fork()) == -1)&#123; // 创建当前进程的副本</span><br><span class="line">        cannot_execute(client);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 告诉客户端执行成功</span><br><span class="line">    sprintf(buf, &quot;HTTP/1.1 200 OK\r\n&quot;); </span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line"></span><br><span class="line">    if(pid)&#123; // 父进程</span><br><span class="line">        close(cgi_input[0]);</span><br><span class="line">        close(cgi_output[1]);</span><br><span class="line"></span><br><span class="line">        char c = &apos;\0&apos;;</span><br><span class="line">        if(strcasecmp(method, &quot;POST&quot;) == 0)</span><br><span class="line">            for(int i =0; i != content_length; ++i)&#123;</span><br><span class="line">                recv(client, &amp;c, 1, 0);</span><br><span class="line">                write(cgi_input[1], &amp;c, 1);</span><br><span class="line">            &#125;</span><br><span class="line">        while(read(cgi_output[0], &amp;c, 1) &gt; 0)</span><br><span class="line">            send(client, &amp;c, 1, 0);</span><br><span class="line">        close(cgi_input[1]);</span><br><span class="line">        close(cgi_output[0]);</span><br><span class="line">        int status = 0; // 线程状态</span><br><span class="line">        waitpid(pid, &amp;status, 0); // 等待子进程</span><br><span class="line">    &#125; else &#123; // 子进程</span><br><span class="line">        // 环境变量</span><br><span class="line">        char meth_env[ENV_SIZE],</span><br><span class="line">             query_env[ENV_SIZE],</span><br><span class="line">             length_env[ENV_SIZE];</span><br><span class="line">        </span><br><span class="line">        dup2(cgi_input[0], STDIN);</span><br><span class="line">        dup2(cgi_output[1], STDOUT);</span><br><span class="line">        close(cgi_input[1]);</span><br><span class="line">        close(cgi_output[0]);</span><br><span class="line"></span><br><span class="line">        sprintf(meth_env, &quot;REQUST_METHOD=%s&quot;, method);</span><br><span class="line">        putenv(meth_env); // 设置环境变量</span><br><span class="line"></span><br><span class="line">        if(strcasecmp(method, &quot;GET&quot;) == 0)&#123;</span><br><span class="line">            sprintf(query_env, &quot;QUERY_STRING=%s&quot;, query_string);</span><br><span class="line">            putenv(query_env);</span><br><span class="line">        &#125; else &#123; // POST</span><br><span class="line">            sprintf(length_env, &quot;CONTENT_LENGTH=%d&quot;, content_length);</span><br><span class="line">            putenv(length_env);</span><br><span class="line">        &#125;</span><br><span class="line">        execl(path, path, NULL); // 执行cgi文件</span><br><span class="line">        exit(0);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="unimplemented-不被支持的请求"><a href="#unimplemented-不被支持的请求" class="headerlink" title="unimplemented()不被支持的请求"></a>unimplemented()不被支持的请求</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void unimplemented(int client)&#123;</span><br><span class="line">    char buf[buf_size];</span><br><span class="line">    sprintf(buf, &quot;HTTP/1.1 501 Not Implemented\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, SERVER_STRING);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;Content-Type: text/html\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Method Not Implemented\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;&lt;/TITLE&gt;&lt;/HEAD&gt;\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;&lt;BODY&gt;&lt;P&gt;HTTP request method not supported.\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;&lt;/BODY&gt;&lt;/HTML&gt;\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="not-found-需要访问的文件不存在"><a href="#not-found-需要访问的文件不存在" class="headerlink" title="not_found()需要访问的文件不存在"></a>not_found()需要访问的文件不存在</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void not_found(int client)&#123;</span><br><span class="line">    char buf[buf_size];</span><br><span class="line">    sprintf(buf, &quot;HTTP/1.1 404 Not Found\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, SERVER_STRING);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;Content-Type: text/html\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;&lt;HTML&gt;&lt;TITLE&gt;Not Found&lt;/TITLE&gt;\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;&lt;BODY&gt;&lt;P&gt;The server could not fulfill\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;your request because the resource specified\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;is unavailable or nonexistent.\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;&lt;/BODY&gt;&lt;/HTML&gt;\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="headres-返回服务端响应头"><a href="#headres-返回服务端响应头" class="headerlink" title="headres()返回服务端响应头"></a>headres()返回服务端响应头</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void headres(int client)&#123;</span><br><span class="line">    char buf[buf_size];</span><br><span class="line">    sprintf(buf, &quot;HTTP/1.1 200 OK\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, SERVER_STRING);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;Content-Type: text/html\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="cannot-execute-执行cgi程序时出错"><a href="#cannot-execute-执行cgi程序时出错" class="headerlink" title="cannot_execute()执行cgi程序时出错"></a>cannot_execute()执行cgi程序时出错</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void cannot_execute(int client)&#123;</span><br><span class="line">    char buf[buf_size];</span><br><span class="line">    sprintf(buf, &quot;HTTP/1.1 500 Inetmal Server Error\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;Content-Type: text/html\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;&lt;P&gt;Error prohibited CGI execution.\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="bad-request-请求出错"><a href="#bad-request-请求出错" class="headerlink" title="bad_request()请求出错"></a>bad_request()请求出错</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void bad_request(int client)&#123;</span><br><span class="line">    char buf[buf_size];</span><br><span class="line">    sprintf(buf, &quot;HTTP/1.1 400 Bad Request\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;Content-Type: text/html\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;\r\n&quot;);</span><br><span class="line">    send(client, buf, strlen(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;&lt;P&gt;Your browser sent a bad request, &quot;);</span><br><span class="line">    send(client, buf, sizeof(buf), 0);</span><br><span class="line">    sprintf(buf, &quot;such as a POST without a Content-Length.\r\n&quot;);</span><br><span class="line">    send(client, buf, sizeof(buf), 0);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <tags>
        <tag>C开源</tag>
      </tags>
  </entry>
  <entry>
    <title>比较高效的学习方式</title>
    <url>/2020/02/12/%E6%AF%94%E8%BE%83%E9%AB%98%E6%95%88%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<img src="/2020/02/12/比较高效的学习方式/fm.jpg">

<p>我个人认为</p>
<a id="more"></a>

<hr>
<p>学习并不是一天两天的事情，状态好就学多点。状态差就把一些简单的知识复习一下。</p>
<ul>
<li>学习主要在于出，而不是进</li>
<li>注意睡眠时间与质量</li>
<li>循序渐进</li>
</ul>
<h3 id="学习一门新的知识需要做到以下三点"><a href="#学习一门新的知识需要做到以下三点" class="headerlink" title="学习一门新的知识需要做到以下三点"></a>学习一门新的知识需要做到以下三点</h3><ul>
<li><p>这是什么？</p>
</li>
<li><p>可以用来干嘛？</p>
</li>
<li><p>怎么用？</p>
</li>
</ul>
<p><code>不要用记忆 代替 你个人对该知识的理解</code></p>
<p>为了加深理解，需要:</p>
<ul>
<li><p>对该知识做总结</p>
</li>
<li><p>记录你遇到的问题，与解决该问题的方法</p>
</li>
<li><p>将遗漏的知识补充到总结里</p>
</li>
</ul>
<hr>
<h3 id="技术学习流程"><a href="#技术学习流程" class="headerlink" title="技术学习流程"></a>技术学习流程</h3><ul>
<li><p>认知阶段</p>
<blockquote>
<p>这技术可以干嘛 -&gt; 了解同类的技术 —&gt; 该技术的主要组成部分</p>
</blockquote>
</li>
<li><p>学习方法</p>
<blockquote>
<p>语法与用法 -&gt; 编程练习 -&gt; 开源项目 -&gt; 造轮子</p>
</blockquote>
</li>
<li><p>实践要求</p>
<blockquote>
<p>运行代码 -&gt; 研究源码 -&gt; 定制修改</p>
</blockquote>
</li>
</ul>
<hr>
]]></content>
  </entry>
  <entry>
    <title>使用vs code连接linux，实现远程开发环境</title>
    <url>/2020/02/11/%E4%BD%BF%E7%94%A8vs-code%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%EF%BC%8C%E5%B9%B6%E6%8A%8Avs-code%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E7%AB%AFhttp%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<ul>
<li>操作系统: win10</li>
<li>目的操作系统: CentOs8</li>
<li>软件: vs code</li>
<li>插件: Remote Development</li>
</ul>
<img src="/2020/02/11/使用vs-code远程开发，并把vs-code部署到服务端http访问/fm.jpg">

<a id="more"></a>

<h3 id="使用vs-code-远程连接linux"><a href="#使用vs-code-远程连接linux" class="headerlink" title="使用vs code 远程连接linux"></a>使用vs code 远程连接linux</h3><p>安装 Remote Development 插件</p>
<p><img src="1.png" alt></p>
<p>设置:<br><img src="15.png" alt></p>
<p><img src="16.png" alt></p>
<ul>
<li>操作前需要关闭linux防火墙</li>
</ul>
<div class="tabs" id="x1"><ul class="nav-tabs"><li class="tab active"><a href="#x1-1">添加linux</a></li></ul><div class="tab-content"><div class="tab-pane active" id="x1-1"><blockquote>
<p>按<code>F1</code>切换到命令面板输入<code>Remote-SSH</code>，然后选择<code>Connect to Host - Configure SSH Hosts</code></p>
</blockquote>
<p><img src="2.png" alt></p>
<blockquote>
<p>选择配置文件</p>
</blockquote>
<p><img src="3.png" alt></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Host</td>
<td>连接标识, 随便写</td>
</tr>
<tr>
<td>HostName</td>
<td>linux ip</td>
</tr>
<tr>
<td>User</td>
<td>linux 用户名</td>
</tr>
</tbody></table>
<p><img src="4.png" alt></p>
<blockquote>
<p>新建窗口并连接linux</p>
</blockquote>
<p><img src="5.png" alt></p>
<details>
<summary>或者</summary>

<p><code>F1</code> -&gt; <code>Remote-SSH</code> -&gt; <code>Connect to Host</code></p>
</details>

<hr>
<blockquote>
<p>输入密码</p>
</blockquote>
<p><img src="6.png" alt></p>
<blockquote>
<p>选择<code>file</code>，打开 文件/目录，即可找到linux内的文件</p>
</blockquote>
<p><img src="7.png" alt></p>
</div></div></div>

<hr>
<h3 id="设置登录密匙"><a href="#设置登录密匙" class="headerlink" title="设置登录密匙"></a>设置登录密匙</h3><div class="note info"><p><strong>win操作:</strong></p>
<p>进入<code>.ssh</code>目录（没有则自行创建）</p>
<ul>
<li>14114为我的win用户名</li>
</ul>
<p>打开<code>cmd</code>进入目录<code>C:\Users\14114\.ssh</code></p>
<p>输入: <code>ssh-keygen</code></p>
<p><img src="10.png" alt></p>
<p>此时，生成了两个文件<br><img src="11.png" alt></p>
<ul>
<li>.pub后缀嘅喺私有密匙</li>
<li>无后缀嘅喺公有密匙</li>
</ul>
<hr>
<p><strong>linux操作:</strong></p>
<ul>
<li><code>~</code>为当前用户目录</li>
</ul>
<p>进入<code>~</code>目录，创建<code>.ssh</code>目录。进入.ssh目录创建<code>authorized_keys</code>文件。</p>
<p>vim打开<code>authorized_keys</code>文件，将win的.ssh目录里的私有密匙（刚刚创建好嘅<code>.pub后缀</code>文件）入面嘅内容复制入去</p></div>



<div class="note info"><p><strong>使用git操作</strong></p>
<p>创建密匙与上面一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 上传密匙</span><br><span class="line">ssh-copy-id -i ~/my_key.pub root@192.168.1.142</span><br></pre></td></tr></table></figure></div>

<p>打开cmd，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -i ~/my_key root@192.168.1.142</span><br></pre></td></tr></table></figure>

<p>连接成功</p>
<blockquote>
<p><img src="12.png" alt></p>
</blockquote>
<ul>
<li>退出ssh登录: <code>logout</code></li>
</ul>
<hr>
<h3 id="删除vo-code所有配置"><a href="#删除vo-code所有配置" class="headerlink" title="删除vo_code所有配置"></a>删除vo_code所有配置</h3><ul>
<li>14114是我的用户名</li>
</ul>
<p>需要删除的目录:</p>
<ul>
<li><p>用户缓存: <code>C:\Users\14114\AppData\Roaming\Code</code></p>
</li>
<li><p>插件:<code>C:\Users\14114\.vscode</code></p>
</li>
</ul>
<hr>
<h3 id="Remote-ssh初次连接Linux时vscode-server安装失败"><a href="#Remote-ssh初次连接Linux时vscode-server安装失败" class="headerlink" title="Remote-ssh初次连接Linux时vscode-server安装失败"></a>Remote-ssh初次连接Linux时vscode-server安装失败</h3><p><a href="https://update.code.visualstudio.com/commit:c7d83e57cd18f18026a8162d042843bda1bcf21f/server-linux-x64/stable" target="_blank" rel="noopener"><font color="green">在win下载vscode-server</font></a></p>
<p>或者</p>
<div class="note info"><p>linux输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https://update.code.visualstudio.com/commit:c7d83e57cd18f18026a8162d042843bda1bcf21f/server-linux-x64/stable</span><br></pre></td></tr></table></figure>


<p><img src="13.png" alt><br>可下载嘅文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget Found. Redirecting to https://vscode.cdn.azure.cn/stable/c7d83e57cd18f18026a8162d042843bda1bcf21f/vscode-server-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="14.png" alt><br>使用wget下载</p>
<hr>
<ul>
<li>下载完后解压到<code>~</code>目录（用哪个用户登录就解压到哪个用户）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假如我的remote配置如下</span><br><span class="line">Host my_linux</span><br><span class="line">  HostName 192.168.1.142</span><br><span class="line">  User root // 用root用户登录linux</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这个文件就要解压到root的hone目录</span><br><span class="line">tar -zxvf vscode-server-linux-x64.tar.gz -C /root</span><br></pre></td></tr></table></figure>

<ul>
<li>解压完后将目录名称改为<code>.vscode-server</code></li>
</ul>
<p>然后重新在vs code里连接linux即可</p>
<p><a href="https://github.com/microsoft/vscode-remote-release/issues/680" target="_blank" rel="noopener"><font color="blue"><strong>参考</strong></font></a></p></div>

<hr>
<h3 id="建立快速连接"><a href="#建立快速连接" class="headerlink" title="建立快速连接"></a>建立快速连接</h3><p><strong>git操作:</strong></p>
<p>用以上述创建好嘅密匙文件。</p>
<p>git输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 第一步</span><br><span class="line">eval `ssh-agent`</span><br><span class="line"></span><br><span class="line">// 第二步，添加密匙文件</span><br><span class="line">ssh-add -k ./my_key</span><br></pre></td></tr></table></figure>

<ul>
<li>删除密匙文件: <code>ssh-add -d ./my_key</code></li>
</ul>
<hr>
<p>在win的<code>.ssh</code>目录创建<code>config</code>文件，写入以下内容:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host my_linux # 名称，随便写</span><br><span class="line">  HostName 192.168.1.142 # linux地址</span><br><span class="line">  User root # 需要登录嘅linux用户名</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa # 密匙文件目录</span><br></pre></td></tr></table></figure>

<p>最后，git输入<code>ssh my_linux</code>即可快速登录linux的root用户</p>
<p><a href="https://stackoverflow.com/questions/48328446/id-rsa-pub-file-ssh-error-invalid-format" target="_blank" rel="noopener"><strong>[<font color="blue">参考</font>]</strong></a></p>
<hr>
<h3 id="清除ssh密钥"><a href="#清除ssh密钥" class="headerlink" title="清除ssh密钥"></a>清除ssh密钥</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -R linux地址</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <tags>
        <tag>vs code</tag>
      </tags>
  </entry>
  <entry>
    <title>gdb与gcc使用笔记</title>
    <url>/2020/02/11/gdb%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<ul>
<li>操作系统： CentOs_8 x86_64</li>
<li>gdb版本： 9.1</li>
<li>gcc版本： 9.3</li>
</ul>
<img src="/2020/02/11/gdb使用笔记/fm.gif">

<a id="more"></a>

<hr>
<p><a href="https://www.gnu.org/software/gdb/documentation/" target="_blank" rel="noopener"><code>帮助文档</code></a></p>
<h3 id="编译流程"><a href="#编译流程" class="headerlink" title="编译流程"></a>编译流程</h3><p><img src="7.png" alt></p>
<ul>
<li>链接阶段: 将库文件链接到.o汇编文件</li>
</ul>
<hr>
<p>若是需要用gdb进行调试，gcc进行编译时必须加上<code>-g</code>选项</p>
<details>
<summary>例子</summary>

<table>
<thead>
<tr>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>gcc</td>
<td>gcc的 绝对/相对 目录</td>
</tr>
<tr>
<td>-g</td>
<td>使用gdb进行调试</td>
</tr>
<tr>
<td>test.c</td>
<td>c文件</td>
</tr>
<tr>
<td>-o</td>
<td>指定输出文件</td>
</tr>
<tr>
<td>a.out</td>
<td>-o选项 输出的文件</td>
</tr>
</tbody></table>
<p>相对目录</p>
<blockquote>
<p>注意：gcc需要全局变量才能直接运行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -g test.c -o a.out</span><br></pre></td></tr></table></figure>


<p>绝对目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/bin/gcc -g /mnt/my_dirent/gcc_file/test.c -o /mnt/my_dirent/gcc_file/a,out</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>whereis</td>
<td>能查询软件安装的路径</td>
</tr>
</tbody></table>
<p>gcc安装路径查询命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whereis gcc</span><br></pre></td></tr></table></figure>

<p><img src="1.png" alt></p>
</details>

<hr>
<h3 id="gdb的常用命令"><a href="#gdb的常用命令" class="headerlink" title="gdb的常用命令"></a>gdb的常用命令</h3><table>
<thead>
<tr>
<th>名称</th>
<th>功能</th>
<th>简写</th>
</tr>
</thead>
<tbody><tr>
<td>gdb</td>
<td>启动gdb</td>
<td></td>
</tr>
<tr>
<td>gdb ./a.out</td>
<td>打开gdb并打开文件</td>
<td></td>
</tr>
<tr>
<td>quit</td>
<td>退出gdb</td>
<td>q</td>
</tr>
<tr>
<td>file ./a.out</td>
<td>打开文件</td>
<td>无简写</td>
</tr>
<tr>
<td>list</td>
<td>查看10行代码</td>
<td>l</td>
</tr>
<tr>
<td>run</td>
<td>运行文件，若main有参数，则在run后面添加参数(如：run 10 20)</td>
<td>r</td>
</tr>
<tr>
<td>start</td>
<td>main函数处设置断点并run</td>
<td>无简写</td>
</tr>
<tr>
<td>next</td>
<td>单步调试，不进入函数</td>
<td>n</td>
</tr>
<tr>
<td>step</td>
<td>单步调试，进入函数</td>
<td>s</td>
</tr>
<tr>
<td>break 1</td>
<td>在第1行添加断点</td>
<td>b 1</td>
</tr>
<tr>
<td>delete breakpoints 1</td>
<td>删除第1个断点</td>
<td>d 1</td>
</tr>
<tr>
<td>shell clear</td>
<td>清屏</td>
<td></td>
</tr>
<tr>
<td>print i</td>
<td>查看变量i</td>
<td>p i</td>
</tr>
</tbody></table>
<p>gdb tui</p>
<blockquote>
<p>gdb命令行形式的gui</p>
<p>进入gdb后输入<code>ctrl + x</code> 然后在输入一个<code>a</code></p>
</blockquote>
<p>需要传入main函数参数，就要喺<code>run</code> 或 <code>start</code>后面添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run version</span><br><span class="line">或</span><br><span class="line">start version</span><br></pre></td></tr></table></figure>

<p>使用<code>show args</code>查看main函数参数</p>
<hr>
<h3 id="gcc-常用命令"><a href="#gcc-常用命令" class="headerlink" title="gcc 常用命令"></a>gcc 常用命令</h3><table>
<thead>
<tr>
<th>写法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-g</td>
<td>使用gdb</td>
</tr>
<tr>
<td>-o</td>
<td>编译成指定文件</td>
</tr>
<tr>
<td>-W</td>
<td>示编译器认为会出现错误的警告</td>
</tr>
<tr>
<td>-Wall</td>
<td>编译后显示所有警告</td>
</tr>
<tr>
<td>-c</td>
<td>编译成.o文件（gcc -c a.c 会生成 a.o文件）</td>
</tr>
<tr>
<td>-lpthread</td>
<td>启用线程功能</td>
</tr>
<tr>
<td>-M</td>
<td>与头文件生成依赖，包括标准库</td>
</tr>
<tr>
<td>-MM</td>
<td>仅与头文件生成依赖</td>
</tr>
<tr>
<td>-l</td>
<td>指定头文件目录</td>
</tr>
<tr>
<td>-L</td>
<td>指定库目录</td>
</tr>
<tr>
<td>-Wl,–rpath=路径</td>
<td>指定动态库路径</td>
</tr>
<tr>
<td>-Wl,–dynamic-linker=文件</td>
<td>指定动态库文件</td>
</tr>
</tbody></table>
<hr>
<h3 id="使用gdb调试多进程"><a href="#使用gdb调试多进程" class="headerlink" title="使用gdb调试多进程"></a>使用gdb调试多进程</h3><blockquote>
<p>需要设置<code>follow-fork-mode</code>(默认值：parent)和<code>detach-on-fork</code>（默认值：on）</p>
</blockquote>
<hr>
<table>
<thead>
<tr>
<th>名称</th>
<th>状态</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>parent</td>
<td>on</td>
<td>只调试主进程（GDB默认）</td>
</tr>
<tr>
<td>parent</td>
<td>off</td>
<td>同时调试两个进程，gdb跟主进程，子进程block在fork位置</td>
</tr>
<tr>
<td>child</td>
<td>on</td>
<td>只调试子进程</td>
</tr>
<tr>
<td>child</td>
<td>off</td>
<td>同时调试两个进程，gdb跟子进程，主进程block在fork位置</td>
</tr>
</tbody></table>
<hr>
<blockquote>
<p>首先需要进入gdb </p>
</blockquote>
<div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><a href="#1-1">设置follow-fork-mode</a></li><li class="tab"><a href="#1-2">设置detach-on-fork</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1-1"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看</span><br><span class="line">show follow-fork-mode </span><br><span class="line"></span><br><span class="line"># 设置</span><br><span class="line">set follow-fork-mode [parent|child]</span><br></pre></td></tr></table></figure>
</div><div class="tab-pane" id="1-2"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看</span><br><span class="line">show detach-on-fork</span><br><span class="line"></span><br><span class="line"># 设置</span><br><span class="line">set detach-on-fork [on|off]</span><br></pre></td></tr></table></figure>
</div></div></div>

<table>
<thead>
<tr>
<th>写法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>info inferiors</td>
<td>查看当前所有进程</td>
</tr>
<tr>
<td>inferior num</td>
<td>切换第num个进程</td>
</tr>
</tbody></table>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 测试代码</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void func(void)&#123;</span><br><span class="line">    pid_t pid = 0;</span><br><span class="line">    if((pid = fork()) != -1)&#123;</span><br><span class="line">        if(pid)</span><br><span class="line">            printf(&quot;fu\n&quot;);</span><br><span class="line">        else </span><br><span class="line">            printf(&quot;zi\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line">    func();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>将set detach-on-fork设置成off，在func()设置断点<br><img src="2.png" alt></p>
</blockquote>
<hr>
<h3 id="使用gdb调试多线程"><a href="#使用gdb调试多线程" class="headerlink" title="使用gdb调试多线程"></a>使用gdb调试多线程</h3><table>
<thead>
<tr>
<th>语法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>info threads</td>
<td>查看当前所有的线程</td>
</tr>
<tr>
<td>thread num</td>
<td>切换到第num个线程</td>
</tr>
</tbody></table>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 测试代码</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;pthread.h&gt;</span><br><span class="line"></span><br><span class="line">void m1(void)&#123;</span><br><span class="line">    printf(&quot;线程1\n&quot;);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void m2(void)&#123;</span><br><span class="line">    printf(&quot;线程2\n&quot;);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void func(void)&#123;</span><br><span class="line">    pthread_t t1 = 0,</span><br><span class="line">              t2 = 0;</span><br><span class="line">    pthread_create(&amp;t1, NULL, (void*)m1, NULL);</span><br><span class="line">    pthread_create(&amp;t2, NULL, (void*)m2, NULL);</span><br><span class="line"></span><br><span class="line">    // 等待线程</span><br><span class="line">    pthread_join(t1, NULL);</span><br><span class="line">    pthread_join(t2, NULL);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line">    func();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>在main()设置断点，此时线程1与2还没有创建<br><img src="3.png" alt></p>
</blockquote>
<hr>
<blockquote>
<p>取消main()的断点，在m1()设置断点，此时拥有main线程与线程1<br><img src="4.png" alt></p>
</blockquote>
<hr>
<blockquote>
<p>取消m1()的断点，在m2()设置断点，由于线程1已经运行完了，此时拥有main线程与线程2<br><img src="5.png" alt></p>
</blockquote>
<hr>
<blockquote>
<p>切换线程<br><img src="6.png" alt></p>
</blockquote>
<hr>
<h3 id="vs-code调试多进程"><a href="#vs-code调试多进程" class="headerlink" title="vs code调试多进程"></a>vs code调试多进程</h3><blockquote>
<p>将<code>setupCommands</code>的<code>text</code>修改成</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;text&quot;: &quot;-gdb-set detach-on-fork off&quot;</span><br></pre></td></tr></table></figure>

<p>单步到进程的时候，在<code>CALL STACK</code>处选择进程进行debug</p>
<hr>
<h3 id="设置libstdc-库目录-与-指定gcc版本"><a href="#设置libstdc-库目录-与-指定gcc版本" class="headerlink" title="设置libstdc++库目录 与 指定gcc版本"></a>设置libstdc++库目录 与 指定gcc版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"># gcc path</span><br><span class="line">export CC=/my_file/gnu/gcc/gcc-9.3.0/build/bin/gcc</span><br><span class="line">export CXX=/my_file/gnu/gcc/gcc-9.3.0/build/bin/g++</span><br><span class="line"></span><br><span class="line"># libstdc++</span><br><span class="line">export LD_LIBRARY_PATH=/my_file/gnu/gcc/gcc-9.3.0/build/lib64</span><br><span class="line">export LIBRARY_PATH=/my_file/gnu/gcc/gcc-9.3.0/build/lib</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Debugging-with-gdb笔记"><a href="#Debugging-with-gdb笔记" class="headerlink" title="Debugging with gdb笔记"></a>Debugging with gdb笔记</h3><details>
<summary>折叠</summary>

<p><code>gdb -silent</code>： 唔打印gdb开头信息打开gdb</p>
<p>想喺gdb内使用shell，需要喺shell命令前面加上<code>shell</code>。</p>
<ul>
<li>gcc需要使用<code>-g</code>选项启用gdb调试功能</li>
<li>可以使用<code>cd</code>切换gdb工作目录，<code>pwd</code>查看当前工作目录</li>
<li>将程序运行结果重新向到文件里<code>run &gt; file</code></li>
<li>子进程可以使用<code>kill</code>结束</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell clear</span><br></pre></td></tr></table></figure>

<h4 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h4><p><code>set logging [on | off]</code>： 日志嘅开关<br><code>set logging file new_FileName</code>： 设置日志文件名称（默认为logfile）<br><code>set logging overwrite [on | off]</code>： 追加方式写入日志（默认） 与 覆盖方式写入日志<br><code>set logging redirect [on | off]</code>： gdb输出会打印到终端与logfile（默认）<br><code>show logging</code>： 查看当前日志设置</p>
<h4 id="调试多线程与多进程"><a href="#调试多线程与多进程" class="headerlink" title="调试多线程与多进程"></a>调试多线程与多进程</h4></details>

<hr>
]]></content>
      <tags>
        <tag>gdb</tag>
      </tags>
  </entry>
  <entry>
    <title>使用win10自带虚拟机安装linux，并添加共享目录</title>
    <url>/2020/02/05/%E4%BD%BF%E7%94%A8win10%E8%87%AA%E5%B8%A6%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85linux/</url>
    <content><![CDATA[<img src="/2020/02/05/使用win10自带虚拟机安装linux/fm.jpg">

<p>基于win10的<code>Hyper-V</code>安装<code>cent8</code></p>
<a id="more"></a>

<h3 id="使用Hyper-v"><a href="#使用Hyper-v" class="headerlink" title="使用Hyper-v"></a>使用Hyper-v</h3><p><img src="1.png" alt></p>
<p><img src="2.png" alt></p>
<p><img src="3.png" alt></p>
<p><strong>注意：固件处，镜像文件必须为第一位</strong></p>
<hr>
<h3 id="设置共享目录"><a href="#设置共享目录" class="headerlink" title="设置共享目录"></a>设置共享目录</h3><p><code>此电脑，右键</code> -&gt; <code>管理</code> -&gt; <code>本地用户和组，右键</code> -&gt; <code>新用户</code></p>
<p><img src="4.png" alt></p>
<p>在任意磁盘创建一个目录，并且共享里添加刚刚创建的用户</p>
<p><img src="5.png" alt></p>
<ol>
<li><p>username=刚刚创建的新用户名称</p>
</li>
<li><p>password=密码</p>
</li>
<li><p>//192.168.1.101，这是我的ip，自己上cmd输入ipconfig查找并输入自己的ip</p>
</li>
<li><p>//192.168.1.101/e/file，这是共享目录所在的位置</p>
</li>
<li><p>/mnt/file，映射位置</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 创建映射目录</span><br><span class="line">mkdir /mnt/自定义名称目录</span><br><span class="line"></span><br><span class="line">// 挂载目录</span><br><span class="line">mount -o username=test,password=hacg5.me //192.168.1.101/e/file /mnt/file</span><br></pre></td></tr></table></figure>

<p><img src="6.png" alt></p>
<p><strong>如果无法挂载共享目录，去win共享里，开启共享，并关闭共享的密码保护</strong></p>
<p><img src="10.png" alt></p>
<hr>
<h3 id="设置网络状态共享"><a href="#设置网络状态共享" class="headerlink" title="设置网络状态共享"></a>设置网络状态共享</h3><blockquote>
<p>创建虚拟网络</p>
</blockquote>
<p><img src="7.png" alt></p>
<blockquote>
<p>查看IP地址是否和宿主机相同</p>
</blockquote>
<p><img src="8.png" alt></p>
<blockquote>
<p>更换虚拟机网络</p>
</blockquote>
<p><img src="9.png" alt></p>
<hr>
]]></content>
      <tags>
        <tag>Cent8</tag>
        <tag>Hyper-V</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建aria2下载器</title>
    <url>/2020/01/19/%E6%90%AD%E5%BB%BAaria2%E4%B8%8B%E8%BD%BD%E5%99%A8/</url>
    <content><![CDATA[<img src="/2020/01/19/搭建aria2下载器/fm.jpg">

<p>基于win10搭建</p>
<p><code>aria2</code>是一个没有GUI的服务器，使用它下载的文件不会被限速</p>
<a id="more"></a>

<p><a href="https://github.com/aria2/aria2/tags" target="_blank" rel="noopener"><strong>下载aria2</strong></a></p>
<p>创建一个新的目录把下载好的文件解压进去</p>
<blockquote>
<p>创建文件</p>
<ol>
<li><p>Aria2.log // 日志文件</p>
</li>
<li><p>aria2.session // 下载历史</p>
</li>
<li><p>aria2.conf // 配置文件</p>
</li>
<li><p>HideRun.vbs // 隐藏cmd窗口</p>
</li>
</ol>
</blockquote>
<h3 id="设置配置文件"><a href="#设置配置文件" class="headerlink" title="设置配置文件"></a>设置配置文件</h3><p><code>aria2.conf</code>写入</p>
<table>
<thead>
<tr>
<th>写法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>dir</td>
<td>下载文件保存路径</td>
</tr>
<tr>
<td>log</td>
<td>日志文件，不需要可以删掉这行</td>
</tr>
<tr>
<td>input-file 与 save-session</td>
<td>记录和读取下载历史用的，断电和重启时保证下载任务不会丢失，如果有时aria2不能启动，清空这里面的内容就行了</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dir=下载文件保存路径</span><br><span class="line">log=目录\Aria2.log</span><br><span class="line">input-file=目录\aria2.session </span><br><span class="line">save-session=目录\aria2.session</span><br><span class="line">save-session-interval=60</span><br><span class="line">force-save=true</span><br><span class="line">log-level=error</span><br></pre></td></tr></table></figure>

<p><strong>see –split option</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">max-concurrent-downloads=5</span><br><span class="line">continue=true</span><br><span class="line">max-overall-download-limit=0</span><br><span class="line">max-overall-upload-limit=50K</span><br><span class="line">max-upload-limit=20</span><br></pre></td></tr></table></figure>

<p><strong>Http/FTP options</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">connect-timeout=120</span><br><span class="line">lowest-speed-limit=10K</span><br><span class="line">max-connection-per-server=10</span><br><span class="line">max-file-not-found=2</span><br><span class="line">min-split-size=1M</span><br><span class="line">split=5</span><br><span class="line">check-certificate=false</span><br><span class="line">http-no-cache=true</span><br></pre></td></tr></table></figure>

<p><strong>FTP Specific Options</strong><br><strong>BT/PT Setting</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bt-enable-lpd=true</span><br><span class="line">#bt-max-peers=55</span><br><span class="line">follow-torrent=true</span><br><span class="line">enable-dht6=false</span><br><span class="line">bt-seed-unverified</span><br><span class="line">rpc-save-upload-metadata=true</span><br><span class="line">bt-hash-check-seed</span><br><span class="line">bt-remove-unselected-file</span><br><span class="line">bt-request-peer-speed-limit=100K</span><br><span class="line">seed-ratio=0.0</span><br></pre></td></tr></table></figure>

<p><strong>Metalink Specific Options</strong><br><strong>RPC Options</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enable-rpc=true</span><br><span class="line">pause=false</span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line">rpc-listen-all=true</span><br><span class="line">rpc-save-upload-metadata=true</span><br><span class="line">rpc-secure=false</span><br></pre></td></tr></table></figure>

<p><strong>Advanced Options</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemon=true</span><br><span class="line">disable-ipv6=true</span><br><span class="line">enable-mmap=true</span><br><span class="line">file-allocation=falloc</span><br><span class="line">max-download-result=120</span><br><span class="line">#no-file-allocation-limit=32M</span><br><span class="line">force-sequential=true</span><br><span class="line">parameterized-uri=true</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="实现无cmd打开"><a href="#实现无cmd打开" class="headerlink" title="实现无cmd打开"></a>实现无cmd打开</h3><p><code>HideRun.vbs</code>写入</p>
<ul>
<li>Run后面的字符串，改成你<code>aria2c.exe</code>文件的目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CreateObject(&quot;WScript.Shell&quot;).Run &quot;目录\aria2c.exe --conf-path=aria2.conf&quot;,0</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="aria2-web界面"><a href="#aria2-web界面" class="headerlink" title="aria2 web界面"></a>aria2 web界面</h3><p>如果是访问本机上的服务器，IP地址选择localhost即可，端口号为6800，如果是远程控制，则需要填写具体的IP，端口号为6800</p>
<p><a href="http://webui-aria2.ghostry.cn/" target="_blank" rel="noopener"><strong>GUI_1</strong></a><br><a href="https://ziahamza.github.io/webui-aria2/" target="_blank" rel="noopener"><strong>GUI_2</strong></a><br><a href="http://aria2c.com/" target="_blank" rel="noopener"><strong>GUI_3</strong></a></p>
<hr>
<h3 id="百度云导出插件"><a href="#百度云导出插件" class="headerlink" title="百度云导出插件"></a>百度云导出插件</h3><p><a href="https://github.com/acgotaku/BaiduExporter/tree/v0.8.5" target="_blank" rel="noopener"><strong>下载</strong></a></p>
<p>解压后，浏览器添加插件即可</p>
<blockquote>
<p>我用的是谷歌浏览器，插件直接添加<code>chrome</code>即可</p>
</blockquote>
]]></content>
      <tags>
        <tag>aria2</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo错误</title>
    <url>/2020/01/15/hexo%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>记录我出现过的错误</p>
<img src="/2020/01/15/hexo错误/fm.jpg">

<a id="more"></a>

<h1 id="Template-render-error"><a href="#Template-render-error" class="headerlink" title="Template render error"></a>Template render error</h1><p><img src="e1.png" alt></p>
<div class="tabs" id="template_render_error"><ul class="nav-tabs"><li class="tab active"><a href="#template_render_error-1">问题原因</a></li><li class="tab"><a href="#template_render_error-2">解决方法</a></li></ul><div class="tab-content"><div class="tab-pane active" id="template_render_error-1"><p>问题出现在文章里，当文章中有{}时,且这两个括号里的语法错误，解析会出问题</p>
</div><div class="tab-pane" id="template_render_error-2"><p>修改{}里的内容</p>
</div></div></div>

<hr>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>vmware桥接无法连接网络</title>
    <url>/2020/01/13/vmware%E6%A1%A5%E6%8E%A5%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<img src="/2020/01/13/vmware桥接无法连接网络/fm.gif">

<a id="more"></a>

<p>在vmware界面，左上角<code>编辑</code> - &gt; <code>虚拟网络编辑器</code></p>
<p><img src="1.png" alt></p>
<p><img src="2.png" alt></p>
<blockquote>
<p>选择一个网络可以的设备即可 （上图是我wifi设备的名称）</p>
</blockquote>
]]></content>
      <tags>
        <tag>vmware</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown格式里为html5播放器添加选集列表</title>
    <url>/2020/01/10/markdown%E6%A0%BC%E5%BC%8F%E9%87%8C%E4%B8%BAhtml5%E6%92%AD%E6%94%BE%E5%99%A8%E6%B7%BB%E5%8A%A0%E9%80%89%E9%9B%86%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<p>用到了markdown写法，html5的<code>video</code>标签，js</p>
<p>用在wordpress的文章里</p>
<img src="/2020/01/10/markdown格式里为html5播放器添加选集列表/fm.jpg">

<a id="more"></a>

<table>
<thead>
<tr>
<th>样式</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>controls</td>
<td>显示控件</td>
</tr>
<tr>
<td>controlslist</td>
<td>禁止出现下载按钮</td>
</tr>
<tr>
<td>autoplay</td>
<td>视频在就绪后马上播放</td>
</tr>
<tr>
<td>src</td>
<td>视频源</td>
</tr>
<tr>
<td>type</td>
<td>视频类型</td>
</tr>
<tr>
<td><code>&lt;/video&gt;</code>的上一行</td>
<td>无法使用video标签才会显示出来，可自定义 （hexo这里会直接显示，我就把这行删了）</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 页面禁止使用右键 （我是用来防止右键另存为视频的）</span><br><span class="line">&lt;body oncontextmenu = &quot;return false&quot;&gt; </span><br><span class="line"></span><br><span class="line">&lt;video id=&quot;vid&quot; width=&quot;100%&quot; height=&quot;100%&quot; </span><br><span class="line">controls=&quot;controls&quot; </span><br><span class="line">controlslist=&quot;nodownload&quot; </span><br><span class="line">autoplay=&quot;autoplay&quot; </span><br><span class="line">style=&quot;clear:both;display:block;margin:auto&quot;&gt;</span><br><span class="line">&lt;source </span><br><span class="line">src=&quot;&quot; // 这里的默认播放视频，我设置为空，选集后才会播放视频</span><br><span class="line">type=&quot;video/mp4&quot;&gt;</span><br><span class="line">你的浏览器无法使用video标签 （删了）</span><br><span class="line">&lt;/video&gt;</span><br><span class="line"></span><br><span class="line">&lt;center&gt; // 居中</span><br><span class="line">&lt;table border=&quot;2&quot;&gt;</span><br><span class="line">	&lt;tr&gt;</span><br><span class="line">		&lt;td&gt;</span><br><span class="line">&lt;a href=&quot;javascript:&quot; onclick=&quot;player(&apos;视频连接1&apos;)&quot;&gt; 【第一集】 &lt;/a&gt;</span><br><span class="line">		&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">		&lt;td&gt;</span><br><span class="line">&lt;a href=&quot;javascript:&quot; onclick=&quot;player(&apos;视频连接2&apos;)&quot;&gt; 【第二集】 &lt;/a&gt;</span><br><span class="line">		&lt;/td&gt;</span><br><span class="line">	&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">// 更换视频的js</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function player(src) &#123;</span><br><span class="line">    var vid = document.getElementById(&quot;vid&quot;);</span><br><span class="line">    vid.src = src;</span><br><span class="line">    vid.play();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>实现</strong></p>
<blockquote>
<p><code>注意：</code>在hexo里选集的时候会蹦出一个空页面，关闭就行了，反正视频正常播放</p>
<p>用这种格式在wordpress里写文章，按选集按钮不会蹦出空白窗口</p>
</blockquote>
<!DOCTYPE HTML>
<html>
<head><meta name="generator" content="Hexo 3.9.0">

<title>Video MP4</title>
<meta charset="utf-8">

</head>

<body>

<body oncontextmenu="return false"> 

<p><video id="vid" width="100%" height="100%" controls="controls" controlslist="nodownload" autoplay="autoplay" style="clear:both;display:block;margin:auto"></video></p>
<source src type="video/mp4">

<center> 
<table border="2">
    <tr>
        <td>
<a href="javascript:" onclick="player('./t1.mp4')" target="_blank" rel="noopener"> 【第一集】 </a>
        </td>
        <td>
<a href="javascript:" onclick="player('./t2.mp4')" target="_blank" rel="noopener"> 【第二集】 </a>
        </td>
    </tr>
</table>
</center>
<script type="text/javascript">
function player(src) {
    var vid = document.getElementById("vid");
    vid.src = src;
    vid.play();
}
</script>

</body>
</body></html>


]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>当git部署出现 Spawn failed错误的解决方法</title>
    <url>/2020/01/09/%E5%BD%93git%E9%83%A8%E7%BD%B2%E5%87%BA%E7%8E%B0-Spawn-failed%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<img src="/2020/01/09/当git部署出现-Spawn-failed错误的解决方法/fm.jpg">

<p>win10的git，部署hexo时出现的错误</p>
<a id="more"></a>

<p>错误图<br><img src="error.png" alt></p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>进入hexo博客的目录，直接把<code>.deploy_git</code>删了，重新部署就行了</p>
<hr>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/2020/01/07/markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>markdown语法记录</p>
<img src="/2020/01/07/markdown语法/fn.jpg">

<a id="more"></a>

<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><details>
<summary>标题</summary>

<h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><h4 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h4><h5 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h5><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 标题1</span><br><span class="line"></span><br><span class="line">## 标题2</span><br><span class="line"></span><br><span class="line">### 标题3</span><br><span class="line"></span><br><span class="line">#### 标题4</span><br><span class="line"></span><br><span class="line">##### 标题5</span><br><span class="line"></span><br><span class="line">###### 标题6</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="代码与代码块"><a href="#代码与代码块" class="headerlink" title="代码与代码块"></a>代码与代码块</h1><details>
<summary>代码</summary>

<p><code>code</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`code`</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>代码块</summary>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code</span><br></pre></td></tr></table></figure>

<p><img src="code.png" alt></p>
</details>

<hr>
<h1 id="序号"><a href="#序号" class="headerlink" title="序号"></a>序号</h1><details>
<summary>有序序号</summary>

<ol>
<li><p>AAA</p>
</li>
<li><p>BBB</p>
</li>
<li><p>CCC</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. AAA</span><br><span class="line"></span><br><span class="line">2. BBB</span><br><span class="line"></span><br><span class="line">3. CCC</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>无序序号</summary>

<ul>
<li><p>AAA</p>
</li>
<li><p>BBB</p>
</li>
<li><p>CCC</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* AAA</span><br><span class="line"></span><br><span class="line">* BBB</span><br><span class="line"></span><br><span class="line">* CCC</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><details>
<summary>插入图片1</summary>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](图片链接 或 目录)</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h1><details>
<summary>链接</summary>

<p><a href="https://www.baidu.com/" target="_blank" rel="noopener">点击进入百度</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[点击进入百度](https://www.baidu.com/)</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="插入媒体文件"><a href="#插入媒体文件" class="headerlink" title="插入媒体文件"></a>插入媒体文件</h1><details>
<summary>本地视频</summary>

<p><video width="100%" height="400" src="./test.mp4" controls="controls"><br></video></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;video width=&quot;100%&quot; height=&quot;400&quot; src=</span><br><span class="line">&quot;视频目录&quot; </span><br><span class="line">controls=&quot;controls&quot;&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>插入网络视频/音频</summary>

<iframe src="//player.bilibili.com/player.html?aid=80702836&cid=138111823&page=1" scrolling="yes" border="1" frameborder="yes" framespacing="0" allowfullscreen="true" height="498" width="510"> 
</iframe>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=</span><br><span class="line">&quot;//player.bilibili.com/player.html?aid=80702836&amp;cid=138111823&amp;page=1&quot; </span><br><span class="line">scrolling=&quot;yes&quot; </span><br><span class="line">border=&quot;1&quot; </span><br><span class="line">frameborder=&quot;yes&quot; </span><br><span class="line">framespacing=&quot;0&quot; </span><br><span class="line">allowfullscreen=&quot;true&quot;</span><br><span class="line">height=498 </span><br><span class="line">width=510&gt; </span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><details>
<summary>分割线</summary>

<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="折叠效果"><a href="#折叠效果" class="headerlink" title="折叠效果"></a>折叠效果</h1><details>
<summary>折叠</summary>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;折叠&lt;/summary&gt;</span><br><span class="line"></span><br><span class="line">内容</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>嵌套折叠</summary>
<blockquote>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;嵌套折叠&lt;/summary&gt;</span><br><span class="line">&lt;blockquote&gt;</span><br><span class="line"></span><br><span class="line">父级内容</span><br><span class="line"></span><br><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;嵌套折叠2&lt;/summary&gt;</span><br><span class="line">&lt;blockquote&gt;</span><br><span class="line"></span><br><span class="line">子级内容</span><br><span class="line"></span><br><span class="line">&lt;/details&gt;&lt;blockquote&gt;</span><br><span class="line">&lt;/details&gt;&lt;blockquote&gt;</span><br></pre></td></tr></table></figure>

<details>
<summary>嵌套折叠2</summary>
<blockquote>

<p>子级内容</p>
</blockquote></details></blockquote>
</details>

<hr>
<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><details>
<summary>字体加粗</summary>

<p><strong>AAA</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**AAA**</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>字体颜色</summary>

<p><font color="blue">AAA</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font color=&quot;blue&quot;&gt;AAA&lt;/font&gt;</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>字体大小</summary>

<p><font size="10px">AAA</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font size=10px&gt;AAA&lt;/font&gt;</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><details>
<summary>表格</summary>

<table>
<thead>
<tr>
<th>aa</th>
<th>bb</th>
</tr>
</thead>
<tbody><tr>
<td>cc</td>
<td>dd</td>
</tr>
</tbody></table>
</details>

<hr>
<h1 id="引用列表"><a href="#引用列表" class="headerlink" title="引用列表"></a>引用列表</h1><details>
<summary>引用列表</summary>

<blockquote>
<p>1级引用</p>
<blockquote>
<p>2级引用</p>
<blockquote>
<p>3级引用</p>
<blockquote>
<p>4级引用</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;1级引用</span><br><span class="line">&gt;&gt;2级引用</span><br><span class="line">&gt;&gt;&gt;3级引用</span><br><span class="line">&gt;&gt;&gt;&gt;4级引用</span><br></pre></td></tr></table></figure>

</details>

<hr>
<h1 id="居中语法"><a href="#居中语法" class="headerlink" title="居中语法"></a>居中语法</h1><center>居中</center>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;center&gt;居中&lt;/center&gt;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>C总结</title>
    <url>/2020/01/06/C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>基于操作系统<code>CentOS8</code>与<code>GCC8.2</code></p>
<p>粗略总结C语言</p>
<img src="/2020/01/06/C总结/fm.gif">

<a id="more"></a>

<hr>
<p>C可以访问硬件，操作内存。主要应用于驱动，操作系统，内核开发</p>
<hr>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>不同类型的变量，所占用的内存都是不同的</p>
<h4 id="基本类型（算术类型）"><a href="#基本类型（算术类型）" class="headerlink" title="基本类型（算术类型）"></a>基本类型（算术类型）</h4><blockquote>
<p>无符号类型取值范围比有符号类型的大</p>
</blockquote>
<table>
<thead>
<tr>
<th>整数类型</th>
<th>占用字节</th>
</tr>
</thead>
<tbody><tr>
<td>char</td>
<td>1</td>
</tr>
<tr>
<td>unsigned</td>
<td>1</td>
</tr>
<tr>
<td>signed char</td>
<td>1</td>
</tr>
<tr>
<td>short</td>
<td>2</td>
</tr>
<tr>
<td>unsigned short</td>
<td>2</td>
</tr>
<tr>
<td>int</td>
<td>4</td>
</tr>
<tr>
<td>unsigned int</td>
<td>2</td>
</tr>
<tr>
<td>long</td>
<td>8</td>
</tr>
<tr>
<td>unsigned long</td>
<td>8</td>
</tr>
</tbody></table>
<p><code>stdint.h</code>与<code>inttypes.h</code>可移植类型文件</p>
<hr>
<table>
<thead>
<tr>
<th>浮点数类型</th>
<th>占用字节</th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>4</td>
</tr>
<tr>
<td>double</td>
<td>8</td>
</tr>
<tr>
<td>long double</td>
<td>16</td>
</tr>
</tbody></table>
<hr>
<ul>
<li><code>void</code>类型，空类型，一般作用于函数的返回值类型与参数列表，任意类型指针</li>
</ul>
<hr>
<ul>
<li>整形溢出<blockquote>
<p>整数的溢出，会导致数值重置 （时钟就是一个例子，超过12就会重置到1）</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li>指数记数法<blockquote>
<p>3.14E+3 表示 3.14 * 10^3 （10^3 = 1000， 3被称为10的指数）</p>
<p>3.14E-4 表示 3.14 * 10^-4（10^-4 = 0.0001）<br><img src="zhishu.png" alt></p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="变量，常量"><a href="#变量，常量" class="headerlink" title="变量，常量"></a>变量，常量</h3><p>变量与常量只是存储某些数值所用的名称，不同的类型决定了变量占用不同的空间</p>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量的定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type name;</span><br></pre></td></tr></table></figure>

<p>也可以使用逗号，创建多个变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i, j, k;</span><br></pre></td></tr></table></figure>

<p>定义并初始化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i = 100;</span><br><span class="line"></span><br><span class="line">double b1 = 1.11, b2 = 2.22;</span><br></pre></td></tr></table></figure>

<ul>
<li>变量的声明，声明不占用空间，一个变量能多次声明但只能定义一次<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extern type name; // 声明</span><br><span class="line"></span><br><span class="line">type name; // 声明与定义</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>数值在程序执行期间不会改变，也可以称为字面值常量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10   // 10进制常量</span><br><span class="line">0213 // 8进制常量</span><br><span class="line">0x1f // 16进制常量</span><br><span class="line">3.14 // 浮点数常量</span><br><span class="line">&quot;12&quot; // 字符串常量</span><br></pre></td></tr></table></figure>

<hr>
<p>常量可以使用<code>const</code>或<code>#define</code>，常量必须要有初始值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const type name = value; // 运行时常量</span><br><span class="line"></span><br><span class="line">#define name value;      // 编译时常量</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="左值与右值"><a href="#左值与右值" class="headerlink" title="左值与右值"></a>左值与右值</h4><ol>
<li><p><strong>左值：</strong>生命周期长，左值既可以指向右值也可以左值</p>
</li>
<li><p><strong>右值：</strong>生命周期短，没有左值指向就会消失</p>
</li>
</ol>
<p>i就是一个左值，10就是一个右值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i = 10;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="储存类"><a href="#储存类" class="headerlink" title="储存类"></a>储存类</h3><p>不同的存储类都有不同的生命周期</p>
<h4 id="auto自动存储期"><a href="#auto自动存储期" class="headerlink" title="auto自动存储期"></a>auto自动存储期</h4><p>是所有局部变量，块作用域的存储类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="register寄存器变量"><a href="#register寄存器变量" class="headerlink" title="register寄存器变量"></a>register寄存器变量</h4><p>使用register表示变量不会在内存创建，而是在寄存器创建（准确说是向寄存器申请，可能会失败）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    register int i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="static静态类型"><a href="#static静态类型" class="headerlink" title="static静态类型"></a>static静态类型</h4><p>只要程序没有结束，就会一直存在，使用static创建的数据将会被存储到静态区域</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static int i;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="extern全局引用"><a href="#extern全局引用" class="headerlink" title="extern全局引用"></a>extern全局引用</h4><p>表示全局数据，程序内所有文件都可以使用</p>
<p>第一个文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 1.c</span><br><span class="line">extern m();</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    m();</span><br><span class="line">    printf(&quot;i=%d\n&quot;, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二个文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 2.c</span><br><span class="line">extern int i = 100;</span><br><span class="line"></span><br><span class="line">void m()&#123;</span><br><span class="line">    printf(&quot;hellow\&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul>
<li><p>算术：+, -, *, /, %</p>
</li>
<li><p>逻辑：!, ||, &amp;&amp;</p>
</li>
<li><p>比较：&gt;, &gt;=, &lt;, &lt;=, ==, !=</p>
</li>
<li><p>位运算：&amp;, |, ^, &lt;&lt;, &gt;&gt;, ~</p>
</li>
<li><p>赋值：=, +=, *=, /=, -=, %=, &lt;&lt;=, &gt;&gt;=, &amp;=, ^=, |=</p>
</li>
</ul>
<p><code>++</code>，<code>--</code>前自增（减）为先自增（减）后运算，后自增（减）先运算后自增（减）</p>
<p><code>*</code>除引运算符, <code>.</code>成员运算符, <code>&amp;</code>取地址, <code>,</code>逗号运算符</p>
<p><code>sizeof</code>返回变量所占用字节数，<code>?:</code>三元表达式</p>
<p><code>()</code>括号运算符，<code>[]</code>索引</p>
<hr>
<h3 id="循环与判断"><a href="#循环与判断" class="headerlink" title="循环与判断"></a>循环与判断</h3><ul>
<li><p>循环：while, for, do while</p>
</li>
<li><p>控制：if, else, else if, switch</p>
</li>
</ul>
<p><code>break</code>跳出循环， <code>continue</code>重新循环，<code>case</code>switch的选项，<code>default</code>switch的else</p>
<hr>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数的写法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回值类型 函数名 (参数); // 声明函数</span><br><span class="line"></span><br><span class="line">返回值类型 函数名 (参数)&#123;&#125; // 实现函数</span><br></pre></td></tr></table></figure>

<p>调用函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">函数名(参数); // void（无）返回值的函数</span><br><span class="line"></span><br><span class="line">返回值类型 变量名称 = 函数名(参数); // 有返回值的函数</span><br></pre></td></tr></table></figure>

<ul>
<li><p>形参</p>
<blockquote>
<p>作为函数的参数时，会创建一份副本，不会修改自身数据</p>
</blockquote>
</li>
<li><p>实参</p>
<blockquote>
<p>作为函数的参数时，将自身传入函数的参数</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li>递归函数<blockquote>
<p>压栈，后入先出</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组的空间是连续的</p>
<hr>
<p>创建数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type name[num];</span><br></pre></td></tr></table></figure>

<p>创建数组并初始化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a[3] = &#123;1,2,3&#125;;</span><br><span class="line"></span><br><span class="line">int b[] = &#123;4, 5, 6&#125;; // 自动判断元素数量为3</span><br></pre></td></tr></table></figure>

<p>多维数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int arr[2][3] = &#123;</span><br><span class="line">    &#123;1,2,3&#125;,</span><br><span class="line">    &#123;4,5,6&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>访问数组元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arr[1];</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举就是常量</p>
<p>创建枚举类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum name&#123;</span><br><span class="line">    ONE=1, TWO=2, THREE=3</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum name n1;</span><br><span class="line"></span><br><span class="line">n1 = ONE;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>空指针用NULL表示</p>
<ul>
<li><p>数组名称也是一个指针</p>
</li>
<li><p>2级指针可以指向1级指针（以此类推）</p>
<blockquote>
<p>int **p1 = &p2; // p2为int *p2;</p>
</blockquote>
</li>
<li><p>获取一个变量的地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i = 100;</span><br><span class="line"></span><br><span class="line">int *p = &amp;i;</span><br></pre></td></tr></table></figure>
</li>
<li><p>指针的自增（减）或使得它指向地址不同</p>
</li>
<li><p>函数指针</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int func(int);</span><br><span class="line"></span><br><span class="line">int (*p) (int) = func;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串以’\0’作为结束符，使用””的初始化的字符串会自动添加’\0’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char arr[100] = &quot;string&quot;;</span><br><span class="line"></span><br><span class="line">char *str = &quot;string&quot;;</span><br><span class="line"></span><br><span class="line">const char *str2 = &quot;string&quot;;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h3><ul>
<li><p>输入：printf, getchar, fgets</p>
<blockquote>
<p>%Lf表示long double， lf表示double</p>
</blockquote>
</li>
<li><p>输出：scanf, putchar,sputs</p>
</li>
<li><p>标准流： stdin, stdout</p>
</li>
<li><p>文件流：FILE</p>
</li>
</ul>
<hr>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>struct, enum</p>
<hr>
<h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><ul>
<li><p>常量与函数： #define </p>
</li>
<li><p>if与else：ifdef, ifndef</p>
</li>
<li><p>取消宏：undef</p>
</li>
</ul>
<hr>
<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>用于处理多个不连续的内存空间。</p>
<p><img src="lb.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 链表结构</span><br><span class="line">struct link_list&#123;</span><br><span class="line">    struct link_list *next; // 指向下一个链表</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct link_list obj1,</span><br><span class="line">                 obj2,</span><br><span class="line">                 obj3,</span><br><span class="line">                 obj4;</span><br><span class="line"></span><br><span class="line">obj1.next = &amp;obj2;</span><br><span class="line">obj2.next = &amp;obj3;</span><br><span class="line">obj3.next = &amp;obj4;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>用垃圾组装一个nas并安装黑群晖</title>
    <url>/2020/01/03/%E7%BB%84%E8%A3%85%E4%B8%80%E4%B8%AAnas%E5%B9%B6%E5%AE%89%E8%A3%85%E9%BB%91%E7%BE%A4%E6%99%96/</url>
    <content><![CDATA[<p>基于一些淘汰的pc设备组装</p>
<img src="/2020/01/03/组装一个nas并安装黑群晖/封面.jpg">

<a id="more"></a>

<h1 id="组装nas"><a href="#组装nas" class="headerlink" title="组装nas"></a>组装nas</h1><blockquote>
<p>黑群辉不怎么吃cpu和内存，所以垃圾的cpu和2g内存就够了</p>
</blockquote>
<table>
<thead>
<tr>
<th><center>物品</center></th>
</tr>
</thead>
<tbody><tr>
<td>淘汰的主板与cpu <strong>(cpu推荐带核显的)</strong></td>
</tr>
<tr>
<td>2g左右的内存</td>
</tr>
<tr>
<td>一个8G左右的U盘</td>
</tr>
<tr>
<td>若干个硬盘</td>
</tr>
<tr>
<td>交换机</td>
</tr>
<tr>
<td>250W左右的电源 <strong>(推荐用大品牌的，毕竟开机时间会比较长)</strong></td>
</tr>
<tr>
<td>cpu风扇</td>
</tr>
</tbody></table>
<hr>
<h1 id="使用U盘安装黑群晖"><a href="#使用U盘安装黑群晖" class="headerlink" title="使用U盘安装黑群晖"></a>使用U盘安装黑群晖</h1><a class="btn" href="https://pan.baidu.com/s/1D-biTMeb8zf33qrzb34uew" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>下载黑群晖6.17与安装所需的工具</a>

<blockquote>
<p>插入U盘 (使用前需要格式化)</p>
<p>打开<code>ChipEasy.chs.v1.6</code><br><img src="uid.png" alt><br>VID 与 PID 后面会用到</p>
</blockquote>
<blockquote>
<p>安装并打开<code>OSFMount</code>创建一个盘<br><img src="osf.png" alt><br><img src="o2.png" alt><br>打开创建好的盘</p>
<p>修改<code>grub.cfg</code>文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set vid=0x你U盘的vid</span><br><span class="line"></span><br><span class="line">set pid=0x你U盘的pid</span><br></pre></td></tr></table></figure>

<blockquote>
<p>保存</p>
<p>返回<code>OSFMount</code>，点击<code>Dismount all&amp; Exit</code>保存<br><img src="pe.png" alt></p>
</blockquote>
<hr>
<h1 id="启动nas"><a href="#启动nas" class="headerlink" title="启动nas"></a>启动nas</h1><blockquote>
<p>u盘插入nas，启动引导为U盘</p>
<p>显示下图则表示成功<br><img src="isok.png" alt></p>
</blockquote>
<hr>
<h1 id="使用群辉系统"><a href="#使用群辉系统" class="headerlink" title="使用群辉系统"></a>使用群辉系统</h1><blockquote>
<p>安装<code>Synology Assistant</code>并打开<br><img src="sj.png" alt></p>
</blockquote>
<blockquote>
<p>安装流程</p>
<p>设置 -&gt; 手动安装 -&gt; 选择黑群晖的pat文件 -&gt; 安装</p>
<p><code>更新</code>选 手动，黑群晖无法使用<code>QuickConnect服务</code>选 跳过</p>
</blockquote>
<h2 id="添加盘"><a href="#添加盘" class="headerlink" title="添加盘"></a>添加盘</h2><p><img src="0.png" alt><br><img src="1.png" alt><br><img src="2.png" alt><br><img src="3.png" alt></p>
<hr>
<h1 id="映射黑群晖的共享目录"><a href="#映射黑群晖的共享目录" class="headerlink" title="映射黑群晖的共享目录"></a>映射黑群晖的共享目录</h1><h2 id="win10版"><a href="#win10版" class="headerlink" title="win10版"></a>win10版</h2><blockquote>
<p>流程</p>
<p>此电脑 -&gt; 网络 -&gt; 右击网络 -&gt; 映射网络驱动器<br><img src="map.png" alt></p>
</blockquote>
<h2 id="linux-centos8版"><a href="#linux-centos8版" class="headerlink" title="linux_centos8版"></a>linux_centos8版</h2><blockquote>
<p>进入GUI</p>
<p>按<code>win</code>键打开<code>Files</code><br><img src="l.png" alt></p>
</blockquote>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我使用的成本如下：</p>
<table>
<thead>
<tr>
<th>物品</th>
<th>价格</th>
</tr>
</thead>
<tbody><tr>
<td>我淘汰下来的主板与cpu (GA-F2A68HM-DS2 + AMD速龙X4 740)</td>
<td>因为我没花这部分的钱所以为0r</td>
</tr>
<tr>
<td>某宝ddr3 1333</td>
<td>17.5r</td>
</tr>
<tr>
<td>自带的8G U盘</td>
<td>0r</td>
</tr>
<tr>
<td>fast-FS05C</td>
<td>16r</td>
</tr>
<tr>
<td>aigo g3 (400w额定电源)</td>
<td>129r</td>
</tr>
<tr>
<td>某宝cpu风扇</td>
<td>20r</td>
</tr>
<tr>
<td>wd 1T蓝盘*1 (14年的库存，全新) 和wd 320G蓝盘*3 (1-4次通电的二手垃圾)</td>
<td>216r + 28r*3 = 300r</td>
</tr>
<tr>
<td>sata线*4</td>
<td>2r*4 = 8r</td>
</tr>
<tr>
<td>17.5+16+129+20+300+8</td>
<td>一共490.5r</td>
</tr>
</tbody></table>
<blockquote>
<p>可以在手机下个<code>es文件浏览器</code>，手机可以直接看到存在nas里的视频</p>
</blockquote>
<p>主要还是硬盘贵…其他的东西可以拿垃圾来凑合着用，反正只是用来存东西,日后还想继续拓展的话就要上<code>pcie阵列卡</code>和<code>移动硬盘</code></p>
<p>注意：假如不是千兆或者万兆网络，千万别把存在nas里的大型游戏直接双击打开，结果就是会卡得要死，我的是百兆网络，打开个网易云音乐都要20多秒，这个玩意是吃宽带速度的，直接运行存在nas里的软件需要慎重考虑</p>
]]></content>
      <tags>
        <tag>黑群辉</tag>
      </tags>
  </entry>
  <entry>
    <title>添加宿主机与黑群晖共享文件夹</title>
    <url>/2020/01/03/%E6%B7%BB%E5%8A%A0%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%B8%8E%E9%BB%91%E7%BE%A4%E6%99%96%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<p>用win10与vmare搭建的<code>cent8</code>与黑群晖6.17</p>
<img src="/2020/01/03/添加宿主机与黑群晖共享文件夹/封面.jpg">

<a id="more"></a>

<h1 id="共享宿主机文件夹"><a href="#共享宿主机文件夹" class="headerlink" title="共享宿主机文件夹"></a>共享宿主机文件夹</h1><p><img src="gxfile.png" alt></p>
<blockquote>
<p>设置好后，终端输入</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 命令查看当前有哪些共享的目录</span><br><span class="line">vmware-hgfsclient </span><br><span class="line"></span><br><span class="line">// 挂载所有的共享目录</span><br><span class="line">vmhgfs-fuse .host:/ /mnt/hgfs</span><br><span class="line"></span><br><span class="line">// 挂载指定的共享目录</span><br><span class="line">vmhgfs-fuse .host:/目录名 /mnt/hgfs</span><br></pre></td></tr></table></figure>

<blockquote>
<p>直接访问<code>/mnt/hgfs</code>即可查看共享了的目录</p>
</blockquote>
<hr>
<h1 id="添加黑群晖共享目录"><a href="#添加黑群晖共享目录" class="headerlink" title="添加黑群晖共享目录"></a>添加黑群晖共享目录</h1><p><img src="hqgx.png" alt></p>
<h1 id="挂载黑群晖目录"><a href="#挂载黑群晖目录" class="headerlink" title="挂载黑群晖目录"></a>挂载黑群晖目录</h1><p><img src="nfs.png" alt><br><img src="nfs2.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 安装nfs</span><br><span class="line">yum install nfs-utils -y</span><br><span class="line"></span><br><span class="line">// 检查nfs服务的黑群晖ip</span><br><span class="line">showmount -e 黑群晖ip</span><br><span class="line"></span><br><span class="line">// 创建挂载目录 (目录可自定义)</span><br><span class="line">/my_dirent/NFS_file</span><br><span class="line"></span><br><span class="line">//挂载黑群晖共享文件夹 (/Volume2/Basic_2为showmount查询的结果，每个人都不同的)</span><br><span class="line">mount -t nfs 黑群晖ip:/路径/目录名称 /my_dirent/NFS_file/ -o proto=tcp -o nolock</span><br><span class="line"></span><br><span class="line">// 查看挂载目录</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <tags>
        <tag>vmware</tag>
        <tag>黑群辉</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker搭建wordpress博客</title>
    <url>/2019/12/25/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<img src="/2019/12/25/使用docker搭建wordpress博客/封面.gif">

<p>使用<code>cent8</code>进行操作</p>
<p><code>docker</code>是一种容器技术，能将应用封装成一个镜像<br><code>wordpress</code>动态博客</p>
<a id="more"></a>

<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><h2 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h2><blockquote>
<p>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且<br>device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 设置仓库</span><br><span class="line"></span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 设置稳定的仓库</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 安装docker与其依赖</span><br><span class="line"></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p><font color="red"><strong>安装时候，出现下图的错误</strong></font></p>
<p><img src="containerd.io.png" alt></p>
<blockquote>
<p>containerd.io的版本必须&gt;=1.2.2-3<br><img src="yum_list_containerd.io.png" alt><br>yum源的containerd.io版本太低</p>
</blockquote>
<a class="btn" href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>版本较高的containerd.io</a>

<ul>
<li><p>找到下载好的安装包，直接用yum安装</p>
<blockquote>
<p><img src="rpm_install.png" alt></p>
</blockquote>
</li>
<li><p>最后，在安装docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="使用docker"><a href="#使用docker" class="headerlink" title="使用docker"></a>使用docker</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 启动[停止][重启]docker</span><br><span class="line">systemctl start[stop][restart] docker</span><br><span class="line"></span><br><span class="line">// 查看正在运行的容器</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">// 查看所有的容器(包括没有运行的)</span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">// 启动[停止][重启]容器</span><br><span class="line">docker start[stop][restart] 容器ID</span><br></pre></td></tr></table></figure>

<h2 id="更改镜像源为国内"><a href="#更改镜像源为国内" class="headerlink" title="更改镜像源为国内"></a>更改镜像源为国内</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 创建文件</span><br><span class="line"></span><br><span class="line">sudo vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener"><strong>阿里云，容器</strong></a><blockquote>
<p>注册好后，选择镜像仓库，并创建</p>
<p>然后选择镜像加速</p>
</blockquote>
</li>
</ul>
<h1 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h1><p>这个是用于定义与运行多个docker应用程序的工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 终端输入 pip 连按两下 Tab键 查看有没有pip(没有则自行百度python-pip)</span><br><span class="line"></span><br><span class="line">// 安装docker-compose</span><br><span class="line">pip3 install docker-compose</span><br><span class="line"></span><br><span class="line">// 查看docker-compose版本</span><br><span class="line">docker-compose -v</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="使用docker-compose-yml，编写一键搭建wordpress博客的配置文件"><a href="#使用docker-compose-yml，编写一键搭建wordpress博客的配置文件" class="headerlink" title="使用docker-compose.yml，编写一键搭建wordpress博客的配置文件"></a>使用docker-compose.yml，编写一键搭建wordpress博客的配置文件</h1><ul>
<li><a href="https://www.runoob.com/docker/docker-compose.html" target="_blank" rel="noopener"><strong>详细教程</strong></a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 查看所有已被占用的端口</span><br><span class="line">netstat -tulnp</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 创建文件 docker-compose.yml，并写入以下内容</span><br><span class="line"></span><br><span class="line">version: &apos;3.3&apos; # compose版本</span><br><span class="line"></span><br><span class="line">services: # 创建服务</span><br><span class="line"> db: # 创建名为 db 的对象（以下是对象参数）</span><br><span class="line">  image: mysql:5.7 # 指定容器镜像:版本</span><br><span class="line">  volumes: # 将主机的数据挂载到容器里</span><br><span class="line">   - db_data:/my_dirent/blog/wordpress/mysql</span><br><span class="line">  restart: always # 重启模式，always容器总是重新启动</span><br><span class="line">  environment: # 添加环境变量</span><br><span class="line">   MYSQL_ROOT_PASSWORD: root # mysql root密码</span><br><span class="line">   MYSQL_DATABASE: wordpress # 数据库名称</span><br><span class="line">   MYSQL_USER: wordpress # 账户</span><br><span class="line">   MYSQL_PASSWORD: wordpress # 密码</span><br><span class="line"></span><br><span class="line"> wordpress:  # 创建名为 wordpress 的对象（以下是对象参数）</span><br><span class="line">  depends_on: # 设置依赖关系，先运行依赖关系db，最后在运行wordpress</span><br><span class="line">    - db # 依赖于 db 对象</span><br><span class="line">  image: wordpress:latest # 指定容器镜像:最新版本</span><br><span class="line">  ports: # 端口</span><br><span class="line">    - &quot;8000:80&quot; # 80端口 映射到8000端口</span><br><span class="line">  restart: always # 重启模式，always容器总是重新启动</span><br><span class="line">  environment: # 添加环境变量</span><br><span class="line">    WORDPRESS_DB_HOST: db:3306 # 主机（连接到mysql）</span><br><span class="line">    WORDPRESS_DB_USER: wordpress # 账户</span><br><span class="line">    WORDPRESS_DB_PASSWORD: wordpress # 密码</span><br><span class="line">    WORDPRESS_DB_NAME: wordpress # 名称</span><br><span class="line">volumes: # 将主机的数据挂载到容器里</span><br><span class="line"> db_data: &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>注意！</code></p>
<blockquote>
<p>使用dockerfile是挂载不了目录的</p>
</blockquote>
<h2 id="使用docker-compose-yml文件"><a href="#使用docker-compose-yml文件" class="headerlink" title="使用docker-compose.yml文件"></a>使用docker-compose.yml文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 启动应用程序</span><br><span class="line">docker-compose up</span><br><span class="line"></span><br><span class="line">// 启动应用程序，并且在后台执行</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="初始化wordpress"><a href="#初始化wordpress" class="headerlink" title="初始化wordpress"></a>初始化wordpress</h1><blockquote>
<p>打开浏览器，输入<code>localhost:8000</code> 8000为映射的端口</p>
</blockquote>
<p>如果出现<code>无法连接到数据库的错误</code></p>
<blockquote>
<ol>
<li><p>重启一下linux</p>
</li>
<li><p>使用systemctl启动docker</p>
</li>
<li><p>关闭防火墙</p>
</li>
<li><p>关闭selinux</p>
</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 永久关闭selinux</span><br><span class="line">vim /etc/sysconfig/selinux</span><br><span class="line"></span><br><span class="line">// 改成以下</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="使用自定义主题"><a href="#使用自定义主题" class="headerlink" title="使用自定义主题"></a>使用自定义主题</h1><p>将下载好的主题，解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 终端运行，将宿主机的文件，拷贝到容器里</span><br><span class="line">docker cp /主题目录 容器名称:/指定的目录</span><br></pre></td></tr></table></figure>

<p>进入后端，刷新主题即可显示</p>
<hr>
<h1 id="使用内网穿透达到外网可以访问本地wordpress"><a href="#使用内网穿透达到外网可以访问本地wordpress" class="headerlink" title="使用内网穿透达到外网可以访问本地wordpress"></a>使用内网穿透达到外网可以访问本地wordpress</h1><ul>
<li><a href="http://www.nat123.com/" target="_blank" rel="noopener"><font color="red"><strong>下载nat123</strong></font></a></li>
</ul>
<p>下载，注册，登陆后</p>
<p><img src="n1.png" alt></p>
<p><img src="n2.png" alt></p>
<hr>
<h1 id="修改媒体文件最大上传大小"><a href="#修改媒体文件最大上传大小" class="headerlink" title="修改媒体文件最大上传大小"></a>修改媒体文件最大上传大小</h1><blockquote>
<p>更新软件<code>apt-get update -y</code></p>
<p>安装vim<code>apt-get install vim -y</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 进入容器，创建文件</span><br><span class="line">vim /usr/local/etc/php/conf.d/uploads.ini</span><br><span class="line"></span><br><span class="line">// 写入以下内容</span><br><span class="line"></span><br><span class="line">file_uploads = On</span><br><span class="line">memory_limit = 500M</span><br><span class="line">upload_max_filesize = 30M //可以自定义大小</span><br><span class="line">post_max_size = 30M //可以自定义大小</span><br><span class="line">max_execution_time = 600</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="增加文件上传类型"><a href="#增加文件上传类型" class="headerlink" title="增加文件上传类型"></a>增加文件上传类型</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 进入容器，修改配置文件</span><br><span class="line">vim /var/www/html/wp-config.php</span><br><span class="line"></span><br><span class="line">// 写入</span><br><span class="line">define( &apos;ALLOW_UNFILTERED_UPLOADS&apos;, true);  // 去除上传的文件类型限制</span><br></pre></td></tr></table></figure>

<h1 id="手动创建容器（可选）"><a href="#手动创建容器（可选）" class="headerlink" title="手动创建容器（可选）"></a>手动创建容器（可选）</h1><p>以下是我的容器创建的例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 这是一个bash</span><br><span class="line"></span><br><span class="line"># !/bin/bash</span><br><span class="line"></span><br><span class="line"># docker pull myql5.7 and wordpress</span><br><span class="line">function pull () &#123;</span><br><span class="line"> docker pull mysql:5.7;</span><br><span class="line"> docker pull wordpress:latest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># create mysql </span><br><span class="line"></span><br><span class="line"># --privileged=true  CentOS系统下的安全Selinux禁止了一些安全权限，导致MySQL容器 # 在运行时会因为权限不足而报错，所以需要增加该选项</span><br><span class="line"></span><br><span class="line"># -p 端口</span><br><span class="line"></span><br><span class="line"># -e 环境变量</span><br><span class="line">function create_mysql () &#123;</span><br><span class="line"> docker run -d --privileged=true --name myMysql -v /my_dirent/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -p 33306:3306 mysql:5.7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># create wordpress</span><br><span class="line"></span><br><span class="line"># &quot;WORDPRESS_DB_HOST&quot;: 链接的docker的MySQL的IP地址和端口，一般设置成mysql的表示</span><br><span class="line"># 用默认的设置</span><br><span class="line"></span><br><span class="line"># &quot;WORDPRESS_DB_USER&quot;: 以什么用户使用MySQL，默认是root</span><br><span class="line"></span><br><span class="line"># &quot;WORDPRESS_DB_PASSWORD&quot; 这设置MySQL的登陆用户密码，由于上一项是默认的root，所</span><br><span class="line"># 以这一项和之前的&quot;MYSQL_ROOT_PASSWORD“要相同</span><br><span class="line"></span><br><span class="line"># &quot;WORDPRESS_DB_NAME&quot;: 数据库的表名，不需要修改，用默认的”wordpress&quot;就行</span><br><span class="line">function create_wordpress () &#123;</span><br><span class="line">docker run -d --name mwp -e WORDPRESS_DB_HOST=mysql -e WORDPRESS_DB_PASSWORD=root -p 8000:80 --link myMysql:mysql -v /my_dirent/NFS_file:/var/www/html/data1 -v /my_dirent/NFS_file2:/var/www/html/data2 wordpress;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># start docker and create</span><br><span class="line">function all () &#123;</span><br><span class="line"> systemctl start docker;</span><br><span class="line"> pull;</span><br><span class="line"> create_mysql;</span><br><span class="line"> create_wordpress;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$1</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="wordpress文章里插入nas里的视频"><a href="#wordpress文章里插入nas里的视频" class="headerlink" title="wordpress文章里插入nas里的视频"></a>wordpress文章里插入nas里的视频</h1><ol>
<li><p>创建容器的时候，将nas的共享目录，映射到<code>/var/www/html</code>目录里</p>
</li>
<li><p>修改映射目录的权限</p>
</li>
<li><p>添加markdown插件<code>WP Githuber MD</code></p>
</li>
<li><p>视频插入写法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// width宽，height高，src视频源</span><br><span class="line">// http://192.168.32.130:8000 表示 wordpress网站地址</span><br><span class="line">// /data1/video/qyaxl/1.mp4 表示 视频目录 （nas映射目录下的文件）</span><br><span class="line"></span><br><span class="line">[video width=&quot;1280&quot; height=&quot;720&quot; mp4=</span><br><span class="line">&quot;http://192.168.32.130:8000/data1/video/qyaxl/1.mp4&quot;]</span><br><span class="line">[/video]</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>c++笔记</title>
    <url>/2019/11/25/c-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2019/11/25/c-笔记/封面.png">

<ul>
<li>操作系统: CentOs-8 x64</li>
<li>gcc版本: 9.3</li>
<li>gdb版本: 9.1</li>
</ul>
<a id="more"></a>

<hr>
<p>C++由 C语言， 面向对象， 模板， STL组成。</p>
<p><a href="https://zh.cppreference.com/w/cpp" target="_blank" rel="noopener"><font color="green"><strong>【cpp帮助文档】</strong></font></a></p>
<hr>
<h3 id="CV限定"><a href="#CV限定" class="headerlink" title="CV限定"></a>CV限定</h3><p>C++中嘅CV喺指<code>const</code>同埋<code>volatile</code></p>
<hr>
<h3 id="赋值与初始化"><a href="#赋值与初始化" class="headerlink" title="赋值与初始化"></a>赋值与初始化</h3><ul>
<li>初始化： 创建变量嘅同时给予初始值</li>
<li>赋值： 用新值覆盖旧值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int num = 11; // 初始化</span><br><span class="line">num     = 22; // 赋值</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="声明与定义"><a href="#声明与定义" class="headerlink" title="声明与定义"></a>声明与定义</h3><p>主要作用于分离式编译。</p>
<ul>
<li>声明： 使用extern修饰，唔会占用系统资源</li>
<li>定义： 初始化，会占用系统资源</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* head.h */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> num; <span class="comment">// 声明变量</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* head.cpp */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> i = <span class="number">11</span>; <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="引用，左值，右值"><a href="#引用，左值，右值" class="headerlink" title="引用，左值，右值"></a>引用，左值，右值</h3><ul>
<li>左值： 生命周期长，可以绑定左值或右值（使用前必须初始化）</li>
<li>右值： 生命周期短，右值不能绑定右值，只能绑定即将被销毁嘅对象，没有被任何对象指向</li>
<li>引用： 为对象取别名，创建时必须初始化</li>
</ul>
<div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><a href="#1-1">引用</a></li><li class="tab"><a href="#1-2">右值</a></li><li class="tab"><a href="#1-3">左值</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1-1"><figure class="highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">11</span>; <span class="comment">// 初始化表达式</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"i=%d\n"</span>, i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> &amp;y = i; <span class="comment">// 引用表达式（取别名）</span></span><br><span class="line">    ++y;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"i=%d\n"</span>, i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果:<br><img src="1.png" alt></p>
</div><div class="tab-pane" id="1-2"><figure class="highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> &amp;&amp;i = <span class="number">11</span>; <span class="comment">// 右值引用表达式，指向一个右值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 错误</span></span><br><span class="line">    <span class="comment">// int &amp;&amp;n = i;  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</div><div class="tab-pane" id="1-3"><figure class="highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> <span class="number">22</span>; <span class="comment">// 22为字面值类型，类型为const int &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 11为字面值常量，类型为const int</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> &amp;i = <span class="number">11</span>; <span class="comment">// 左值引用表达式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> &amp;n = func(); <span class="comment">// 左值引用表达式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</div></div></div>

<p><strong>引用折叠：</strong><br>只能用喺类型别名与模板参数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span>&amp;&amp; __int;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span>&amp; __double;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">int</span>&amp;)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    __int &amp;&amp;i = <span class="number">1</span>; <span class="comment">// 类型为int&amp;&amp;</span></span><br><span class="line">    <span class="keyword">double</span> num = <span class="number">1.1</span>;</span><br><span class="line">    __double &amp;&amp;d = num; <span class="comment">// 类型为double&amp;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">11</span>;</span><br><span class="line">    m&lt;<span class="keyword">int</span>&amp;&gt;(number);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int &amp; &amp; 折叠为 int&amp;</span></span><br><span class="line"><span class="comment">int &amp; &amp;&amp; 折叠为 int&amp;</span></span><br><span class="line"><span class="comment">int &amp;&amp; &amp; 折叠为 int&amp;</span></span><br><span class="line"><span class="comment">int &amp;&amp; &amp;&amp; 折叠为 int&amp;&amp;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="编译时与运行时"><a href="#编译时与运行时" class="headerlink" title="编译时与运行时"></a>编译时与运行时</h3><ul>
<li>编译时初始化: 对象喺编译期间，就已经被初始化。</li>
<li>运行时初始化: 对象需要喺程序执行期间，才会被初始化。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> <span class="number">22</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM1 11 <span class="comment">// 编译时初始化</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num2 = func(); <span class="comment">// 运行时初始化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>const常量，对象创建时必须初始化，const对象一旦初始化，其数值就不能被改变。</p>
<p><code>注意</code>： c++嘅const对象喺编译时常量。</p>
<ul>
<li>常量对象或常量引用可以指向变量或常量</li>
<li>常量可以赋值或初始化变量，但不能被变量引用指向</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> i  = <span class="number">11</span>; <span class="comment">// 定义const常量</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> &amp;n = i; <span class="comment">// const引用指向const常量对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">99</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> &amp;a = num; <span class="comment">// const对象指向变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> b = a; <span class="comment">// 使用常量初始化变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>顶层const： 对象自身地址不可变，但值可变（对象自身喺常量）</li>
<li>底层const： 对象自身地址可变，但值不可变（对象指向嘅值喺常量）</li>
</ul>
<div class="tabs" id="2"><ul class="nav-tabs"><li class="tab active"><a href="#2-1">顶层const</a></li><li class="tab"><a href="#2-2">底层const</a></li></ul><div class="tab-content"><div class="tab-pane active" id="2-1"><blockquote>
<p>格式1： type *const name = value;</p>
</blockquote>
<blockquote>
<p>格式2： const type name = value</p>
</blockquote>
<figure class="highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">11</span>,</span><br><span class="line">    num2 = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *<span class="keyword">const</span> p = &amp;num1;</span><br><span class="line">    p            = &amp;num2; <span class="comment">// 改变指向嘅值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ++p; // 错误，对象自身地址不可改变</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">22</span>; <span class="comment">// 顶层const</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</div><div class="tab-pane" id="2-2"><blockquote>
<p>格式1： const type *name = value</p>
</blockquote>
<blockquote>
<p>格式2： type const *name = value</p>
</blockquote>
<figure class="highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;i;</span><br><span class="line">    ++p; <span class="comment">// 对象自身地址可变</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">22</span>;</span><br><span class="line">    p = &amp;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> *p2 = &amp;n; <span class="comment">// 这也是底层const</span></span><br><span class="line">    ++p2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</div></div></div>

<p>双层const，具有底层与底层const嘅性质:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> p = &amp;i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><code>非成员函数唔可以喺后面加const</code>，米时编译器会报非成员函数CV限定错误。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误代码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>错误：<br><img src="16.png" alt></p>
<hr>
<h3 id="constexpr"><a href="#constexpr" class="headerlink" title="constexpr"></a>constexpr</h3><p>常量表达式，一般作用于函数返回值类型，使其变成编译时常量，隐式定义为内敛函数（函数返回值类型不一定喺常量表达式）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> <span class="number">22</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">int</span> num = <span class="number">11</span>; <span class="comment">// 编译时常量</span></span><br><span class="line">    <span class="keyword">int</span> i = func(); <span class="comment">// 可能喺编译时常量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="推导类型"><a href="#推导类型" class="headerlink" title="推导类型"></a>推导类型</h3><ul>
<li><code>auto</code>： 会忽略顶层cosnt</li>
<li><code>decltype</code>： 结果与对应嘅类型一样，对对象使用双层括号会将其推导成引用类型，传入函数名可以推导出函数嘅返回值类型</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> <span class="string">'a'</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> a1 = <span class="number">11</span>; <span class="comment">// int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">decltype</span>(<span class="number">11</span>) type = <span class="number">11</span>; <span class="comment">// type为int类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">decltype</span>((type)) a = type; <span class="comment">// a为int&amp;类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">decltype</span>(func) b = <span class="string">'a'</span>; <span class="comment">// b为func的返回值类型，也就是char类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul>
<li>隐式类型转换： 由编译器自动执行嘅类型转换，可以将小类型提升为大类型</li>
<li>强制类型专项： 将一个类型强制转换成另一个类型但可能会失去精度</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">11</span>; <span class="comment">// 隐式类型转换，int类型提升为double类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = (<span class="keyword">int</span>)d; <span class="comment">// 强制类型转换，失去了精度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>显式类型转换：</strong></p>
<ul>
<li><code>static_cast&lt;type&gt;</code>： 只要唔包含底层const都可以用</li>
<li><code>const_cast&lt;type&gt;</code>： 常量类对象或常量指针转成non-const类型，具有去掉const性质嘅功能</li>
<li><code>reinterpret_cast&lt;type&gt;</code>： 作用于指针，无视类型进行转换（该功能非常危险，唔识类型同编译器实现转换嘅过程最好米使用）</li>
<li><code>dynamic_cast&lt;type&gt;</code>： 作用于类类型指针嘅转换，一般作用于父类型转换成子类型（父类型必须要有虚函数）</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dad</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">virtual</span> ~dad() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">son</span> :</span> <span class="keyword">public</span> dad&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> c = <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">int</span>&gt;(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;c;</span><br><span class="line">    <span class="keyword">int</span> *n = <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>*&gt;(p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *i_pointer = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">char</span> *c_pointer = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span>*&gt;(i_pointer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    dad *obj = <span class="keyword">new</span> dad;</span><br><span class="line">    son *s_obj = <span class="keyword">dynamic_cast</span>&lt;son*&gt;(obj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>程序一旦异常，就需要对异常进行处理。</p>
<blockquote>
<p>处理方式： 结束程序，吞下异常，自定义异常处理。</p>
</blockquote>
<blockquote>
<p>异常安全： 资源不泄漏、数据不丢失、不抛出异常。</p>
</blockquote>
<p>异常捕获语句块：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// 可能会出现异常嘅代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="comment">/* 异常类型 */</span> ...)&#123;</span><br><span class="line">    <span class="comment">// 处理异常嘅代码</span></span><br><span class="line">    <span class="keyword">throw</span>; <span class="comment">// 抛异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>try作用域，可能会出现异常嘅代码</li>
<li>catch作用域，处理异常嘅代码，当没有匹配到合适嘅异常类型就会调用标准库<code>terminate</code>结束程序</li>
<li>throw，异常抛出，可以使用表达式（表达式类型就喺异常类型），跟喺throw后面嘅所有语句将不会执行</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span>; <span class="comment">// 佢后面嘅所有语句将不会再执行</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">double</span> b = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p><strong>栈展开：</strong><br>一个函数内抛异常但异常未喺该函数内捕获，会导致喺运行时抛异常处结束。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">throw</span> <span class="number">100</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; func1(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        func2();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(...)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Exception\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    func3();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"is ok\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    function();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>函数入栈：<br><img src="2.png" alt><br>抛异常，将func1与func2弹出<br><img src="3.png" alt><br>运行结果：<br><img src="4.png" alt></p>
<hr>
<p><code>noexcept</code>： 用于标识函数唔会抛异常</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 都表示该函数唔会抛异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> <span class="keyword">noexcept</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote>
<p>返回值类型 函数名 (参数列表)</p>
</blockquote>
<ul>
<li><p>参数列表：</p>
<blockquote>
<p>形参： 将参数拷贝一份副本<br>实参： 将自身传入参数列表<br>参数默认值： 参数列表里的对象可以有默认值</p>
</blockquote>
</li>
<li><p>函数重载： 函数名称相同，但参数列表唔同（顶层const唔会影响参数列表）</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>)</span></span>; <span class="comment">// 二义性</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">int</span> *<span class="keyword">const</span>)</span> <span class="comment">// 二义性</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>内敛函数，使用<code>inline</code>修饰向编译器申请，内敛函数唔会入栈，可以避免函数调用嘅开销。一般内敛函数都很短并且经常被调用</li>
</ul>
<p><strong>尾置返回值类型函数：</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">auto func(void) -&gt; void&#123;&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>外部访问类私有成员嘅方法，提供便利同时破坏了类嘅封装性，使用<code>friend</code>关键字。</p>
<div class="tabs" id="3"><ul class="nav-tabs"><li class="tab active"><a href="#3-1">友元函数</a></li><li class="tab"><a href="#3-2">友元类</a></li></ul><div class="tab-content"><div class="tab-pane active" id="3-1"><figure class="highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">// 友元函数</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    lei *obj = <span class="keyword">new</span> lei;</span><br><span class="line">    obj-&gt;i; <span class="comment">// 访问lei私有成员</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    func();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</div><div class="tab-pane" id="3-2"><ul>
<li>友元类唔会被继承</li>
</ul>
<figure class="highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cl</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">cl</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cl</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        lei::m();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    cl *obj = <span class="keyword">new</span> cl;</span><br><span class="line">    obj-&gt;func();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"is ok\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    function();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</div></div></div>

<hr>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>class默认权限为private。</p>
<ul>
<li><code>this</code>指针： 表示当前对象</li>
<li>一个类默认生成：无参构造，析构，拷贝，移动拷贝，operator=拷贝，operator=移动拷贝函数（移动函数不会抛出异常，移动后必须处于可析构状态）<blockquote>
<p>移动： 将数据从旧对象移动到新对象，然后将旧对象内嘅数据全部删除。</p>
</blockquote>
</li>
<li>类可以有多个带参数构造函数（重载），一旦定义带参数构造函数，默认无参构造函数就会被删除（如果要用无参构造函数需要重新定义）</li>
</ul>
<blockquote>
<p>父类嘅构造函数被删除，子类嘅构造函数都会被删除。</p>
</blockquote>
<p>类应该提供一个接口，用来调用构造函数。</p>
<p>显式表示类类型：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">lei</span> *<span class="title">obj</span>;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>委托构造函数：</strong><br>使用构造函数初始化构造函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    lei(<span class="keyword">int</span> __i, <span class="keyword">double</span> __d) :</span><br><span class="line">        i(__i), d(__d) &#123;&#125; <span class="comment">// 列表初始化</span></span><br><span class="line"></span><br><span class="line">    lei() : lei(<span class="number">1</span>, <span class="number">1.1</span>) <span class="comment">// 委托构造函数，调用带参数嘅构造函数</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">double</span> d;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>隐式类类型转换：</strong><br>通过调用其他类型嘅构造函数操作当前类类型，会带来风险</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    lei(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;__str) : </span><br><span class="line">        str(__str) &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(<span class="string">"string"</span>)</span></span>;</span><br><span class="line">    lei *obj1 = <span class="keyword">new</span> lei(str); </span><br><span class="line"></span><br><span class="line">    lei *obj2 = <span class="keyword">new</span> lei(<span class="string">"string"</span>); <span class="comment">// 隐式转换</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以使用<code>explicit</code>抑制隐式转换</li>
</ul>
<p><strong>显式使用默认生成嘅函数 与 删除默认生成嘅函数</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line">    ~lei() = <span class="keyword">default</span>; <span class="comment">// 显式使用默认版本析构函数</span></span><br><span class="line">    lei() = <span class="keyword">delete</span>; <span class="comment">// 删除默认无参构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>当一个对象被销毁时会自动调用析构函数</li>
</ul>
<h4 id="类成员指针"><a href="#类成员指针" class="headerlink" title="类成员指针"></a>类成员指针</h4><p>使用尼种指针，可以直接指向类成员。</p>
<p>数据成员指针：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line">    <span class="comment">// 返回一个类型成员指针嘅静态函数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">double</span> lei::* func()</span><br><span class="line">    &#123; <span class="keyword">return</span> &amp;lei::d; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">1.1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc;</span><br><span class="line">    (<span class="keyword">void</span>)argv;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">lei</span> *<span class="title">obj</span> = <span class="title">new</span> <span class="title">lei</span>;</span></span><br><span class="line">    <span class="comment">// 创建类成员指针，指向数据成员</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> lei::*p = &amp;lei::i;</span><br><span class="line">    <span class="comment">// 使用类成员指针</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; obj-&gt;*p &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> lei::*d = lei::func();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; obj-&gt;*d &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="9.png" alt></p>
<hr>
<p>类成员函数指针：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123; <span class="built_in">printf</span>(<span class="string">"this is func\n"</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc;</span><br><span class="line">    (<span class="keyword">void</span>)argv;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">lei</span> *<span class="title">obj</span> = <span class="title">new</span> <span class="title">lei</span>;</span></span><br><span class="line">    <span class="comment">// 类成员函数指针</span></span><br><span class="line">    <span class="keyword">void</span>(lei::*p)(<span class="keyword">void</span>) = &amp;lei::func;</span><br><span class="line">    (obj-&gt;*p)(); <span class="comment">// 调用函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> __func = <span class="keyword">void</span>(lei::*)(<span class="keyword">void</span>); <span class="comment">// 取别名</span></span><br><span class="line">    __func f = &amp;lei::func;</span><br><span class="line">    (obj-&gt;*f)(); <span class="comment">// 调用函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="10.png" alt></p>
<hr>
<p>类成员指针函数表：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123; <span class="built_in">printf</span>(<span class="string">"this is func\n"</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">aaa</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123; <span class="built_in">printf</span>(<span class="string">"this is aaa\n"</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bbb</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123; <span class="built_in">printf</span>(<span class="string">"this is bbb\n"</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ccc</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123; <span class="built_in">printf</span>(<span class="string">"this is ccc\n"</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> __func = <span class="keyword">void</span>(lei::*)(<span class="keyword">void</span>); <span class="comment">// 别名</span></span><br><span class="line">    <span class="keyword">enum</span> en &#123; FUNC, AAA, BBB, CCC &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(en dx)</span> <span class="comment">// 传入常量，调用函数</span></span></span><br><span class="line"><span class="function">    </span>&#123; (<span class="keyword">this</span>-&gt;*Menu[dx])(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> __func Menu[]; <span class="comment">// 函数表</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">lei::__func lei::Menu[] = &#123;</span><br><span class="line">    &amp;lei::func,</span><br><span class="line">    &amp;lei::aaa,</span><br><span class="line">    &amp;lei::bbb,</span><br><span class="line">    &amp;lei::ccc</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc;</span><br><span class="line">    (<span class="keyword">void</span>)argv;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">lei</span> *<span class="title">obj</span> = <span class="title">new</span> <span class="title">lei</span>;</span></span><br><span class="line">    obj-&gt;move(lei::en::FUNC);</span><br><span class="line">    obj-&gt;move(lei::en::AAA);</span><br><span class="line">    obj-&gt;move(lei::en::BBB);</span><br><span class="line">    obj-&gt;move(lei::en::CCC);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="11.png" alt></p>
<h4 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h4><p>内层与外层类喺互相独立嘅。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span> <span class="comment">// 外层类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;&#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">cl</span>&#123;</span> <span class="comment">// 内层类</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc;</span><br><span class="line">    (<span class="keyword">void</span>)argv;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">lei</span> *<span class="title">obj</span> = <span class="title">new</span> <span class="title">lei</span>;</span> <span class="comment">// 外层类对象</span></span><br><span class="line">    obj-&gt;m();</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">lei</span>:</span>:cl *obj2 = <span class="keyword">new</span> lei::cl; <span class="comment">// 内层类对象</span></span><br><span class="line">    obj2-&gt;func();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h4><p>枚举喺表示整数类型嘅嘢</p>
<ul>
<li>枚举，成员拥有全局作用域。</li>
<li>限定作用域枚举，成员需要使用作用域访问</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 限定作用域枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">cen</span> &#123;</span></span><br><span class="line">    aa,</span><br><span class="line">    bb</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举</span></span><br><span class="line"><span class="keyword">enum</span> en&#123;</span><br><span class="line">    aa,</span><br><span class="line">    bb</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc;</span><br><span class="line">    (<span class="keyword">void</span>)argv;</span><br><span class="line">    </span><br><span class="line">    en obj_1 = aa;</span><br><span class="line"></span><br><span class="line">    cen obj_2 = cen::aa;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>指定枚举整数类型：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定枚举整数类型</span></span><br><span class="line"><span class="keyword">enum</span> en : <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>&#123;</span><br><span class="line">    aa = <span class="number">1U</span>L,</span><br><span class="line">    bb = <span class="number">2U</span>L</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc;</span><br><span class="line">    (<span class="keyword">void</span>)argv;</span><br><span class="line">    </span><br><span class="line">    en dx = aa;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="节省空间嘅union类"><a href="#节省空间嘅union类" class="headerlink" title="节省空间嘅union类"></a>节省空间嘅union类</h4><p>该类型只能存储一个成员嘅数据。</p>
<ul>
<li>默认成员访问权限为public</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> un&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc;</span><br><span class="line">    (<span class="keyword">void</span>)argv;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">union</span> un dx;</span><br><span class="line">    dx.i = <span class="number">11</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dx.i);</span><br><span class="line"></span><br><span class="line">    dx.d = <span class="number">1.1</span>;</span><br><span class="line">    <span class="comment">// 此时dx.i嘅值被删除了</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dx.i); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="12.png" alt></p>
<hr>
<ul>
<li>匿名union唔可以定义成员函数</li>
<li>匿名union成员可以直接访问</li>
<li>匿名union只能定义public成员</li>
</ul>
<hr>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul>
<li>数据抽象： 将接口与实现分离</li>
<li>继承： 创建功能相似嘅类类型</li>
<li>动态绑定： 喺一定程度忽略类型区别</li>
<li>父类都必须定义虚析构函数</li>
<li>子类初始化顺序： 首先初始化父类部分，最后在初始化自身特有部分</li>
<li>使用关键字<code>final</code>可以防止被继承</li>
</ul>
<h4 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fu</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> :</span> <span class="keyword">public</span> fu&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// =左边喺静态类型，=右边喺动态类型</span></span><br><span class="line">    <span class="comment">// 子类部分被忽略了</span></span><br><span class="line">    fu *obj = <span class="keyword">new</span> zi;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h4><p>使用<code>virtual</code>关键字，当使用子类指针调用虚函数时会触发动态绑定</p>
<ul>
<li>虚函数： 有父类版本与子类版本之分</li>
<li><code>override</code>关键字，表明子类覆盖了父类嘅虚函数</li>
<li><code>find</code>关键字也可以作用于虚函数，表明子类唔可以覆盖</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fu</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this is fu\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">void</span>)</span> final</span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> :</span> <span class="keyword">public</span> fu&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this is zi\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    fu *f = <span class="keyword">new</span> fu;</span><br><span class="line">    zi *z = <span class="keyword">new</span> zi;</span><br><span class="line">    f-&gt;func();</span><br><span class="line">    z-&gt;func();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"is ok\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    function();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<p><img src="5.png" alt></p>
<hr>
<p><strong>子类调用父类嘅虚函数</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fu</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this is fu\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> :</span> <span class="keyword">public</span> fu&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span> override</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this is zi\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    zi *z = <span class="keyword">new</span> zi;</span><br><span class="line">    z-&gt;fu::func();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"is ok\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    function();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="6.png" alt></p>
<blockquote>
<p>父类必须要有虚析构函数</p>
</blockquote>
<hr>
<h4 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h4><p>父类声明函数，子类实现函数。</p>
<p>含有纯虚函数嘅父类唔可以创建对象。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fu</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 父类声明纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">void</span>)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> :</span> <span class="keyword">public</span> fu&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 子类实现父类嘅纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">void</span>)</span> override</span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    zi *z = <span class="keyword">new</span> zi;</span><br><span class="line">    z-&gt;m();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="访问符控制符与继承"><a href="#访问符控制符与继承" class="headerlink" title="访问符控制符与继承"></a>访问符控制符与继承</h4><ul>
<li>class默认使用public继承</li>
</ul>
<table>
<thead>
<tr>
<th>访问</th>
<th>public</th>
<th>protected</th>
<th>private</th>
</tr>
</thead>
<tbody><tr>
<td>同一个类</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>派生类</td>
<td>yes</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td>外部的类</td>
<td>yes</td>
<td>no</td>
<td>no</td>
</tr>
</tbody></table>
<ul>
<li>public继承： 子类无法访问父类嘅private成员</li>
<li>protected继承： 子类无法访问父类嘅protected，private成员</li>
<li>private继承： 子类只能访问父类嘅public成员</li>
</ul>
<p>使用<code>using</code>关键字可以修改访问权限，使得private继承嘅子类可以访问父类嘅protected成员</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fu</span>&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> :</span> <span class="keyword">private</span> fu&#123;</span><br><span class="line">    <span class="keyword">using</span> fu::i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    zi *obj = <span class="keyword">new</span> zi;</span><br><span class="line">    obj-&gt;m();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><p>一个子类继承与多个父类。</p>
<p><code>注意</code>： 子类可以重复继承同一个父类。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei_A</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei_B</span>&#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> :</span> <span class="keyword">public</span> lei_A, <span class="keyword">public</span> lei_B &#123;&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>初始化顺序： lei_A， lei_B， zi</p>
</blockquote>
<ul>
<li>由于子类继承于多个父类，可能会出现名称相同嘅成员，所以每次调用成员时，需要加上作用域。</li>
</ul>
<h4 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h4><p>防止父类被重复继承。</p>
<p>虚继承父类初始化顺序优先级高于父类。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei_A</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei_B</span>&#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多重虚继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> :</span> <span class="keyword">public</span> <span class="keyword">virtual</span> lei_A, <span class="keyword">public</span> <span class="keyword">virtual</span> lei_B &#123;&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>模板，将类型抽象化。</p>
<ul>
<li>模板定义中，模板参数列表唔可以为空</li>
<li>模板参数列表中使用<code>class</code> 或 <code>typename</code>功能喺一样嘅</li>
<li>模板函数嘅声明与定义都要喺头文件度</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    func&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="非类型模板参数"><a href="#非类型模板参数" class="headerlink" title="非类型模板参数"></a>非类型模板参数</h4><p>模板参数列表为指定嘅类型，唔使用&lt;&gt;表明类型。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">size_t</span> N&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> (&amp;str)[N])</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    func(<span class="string">"aaa"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="模板类"><a href="#模板类" class="headerlink" title="模板类"></a>模板类</h4><p>作用于生成类嘅蓝图。</p>
<ul>
<li>实例化模板类： 显式定义类模板类型，可以睇成喺一个独立嘅类</li>
<li>假如需要访问其他lei<type>类型，可以用友元</type></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">lei</span>&lt;int&gt;;</span> <span class="comment">// 类模板实例化友元</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化模板类，与其他Lei&lt;T&gt;类型没有任何关联</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&lt;int&gt; &#123;</span>&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>模板类内嘅模板函数：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// head.hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __HEAD_HPP__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HEAD_HPP__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="comment">// 类嘅类型参数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; <span class="comment">// 函数嘅类型参数</span></span><br><span class="line"><span class="keyword">void</span> lei&lt;T&gt;::m(<span class="keyword">void</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __HEAD_HPP__</span></span></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"src/shifeihen/head.hpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">lei</span>&lt;int&gt; *<span class="title">obj</span>;</span></span><br><span class="line">    obj-&gt;m&lt;<span class="keyword">char</span>&gt;();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>当模板被使用时先会进行实例化，相同嘅实例化可能会出现喺多个文件入面，会造成严重嘅资源浪费。</p>
<p>通过声明嘅方式，控制实例化，避免资源浪费：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// head.hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __HEAD_HPP__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HEAD_HPP__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span> &#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&lt;int&gt;&#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">template</span> <span class="class"><span class="keyword">class</span> <span class="title">lei</span>&lt;int&gt;;</span> <span class="comment">// 实例化声明</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __HEAD_HPP__</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// head.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.hpp"</span></span></span><br><span class="line"><span class="keyword">template</span> <span class="class"><span class="keyword">class</span> <span class="title">lei</span>&lt;int&gt;;</span> <span class="comment">// 实例化定义</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"src/shifeihen/head.hpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">lei</span>&lt;int&gt; *<span class="title">obj</span>;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="友元模板类型参数"><a href="#友元模板类型参数" class="headerlink" title="友元模板类型参数"></a>友元模板类型参数</h4><p>使得模板参数类型可以访问类私有成员</p>
<p>例子1：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> T;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cl</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123; lei&lt;cl&gt;::m(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    cl *obj;</span><br><span class="line">    obj-&gt;func();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例子2：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">aaa</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> aaa;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">aaa</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        lei&lt;aaa&gt;::m();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    aaa *obj;</span><br><span class="line">    obj-&gt;func();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="模板别名"><a href="#模板别名" class="headerlink" title="模板别名"></a>模板别名</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> lei&lt;<span class="keyword">int</span>&gt; <span class="keyword">lei_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> lei_map = <span class="built_in">std</span>::<span class="built_in">map</span>&lt;T, T&gt;;</span><br></pre></td></tr></table></figure>

<h4 id="模板类类型成员"><a href="#模板类类型成员" class="headerlink" title="模板类类型成员"></a>模板类类型成员</h4><p>使得指定嘅泛型。</p>
<p>使用<code>typename</code>关键字话畀编译器知，该名称喺一个类型。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">aaa</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">size_t</span> value_type; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> T::value_type <span class="keyword">value_type_t</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> value_type_t <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> <span class="number">11</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    lei&lt;aaa&gt;::<span class="keyword">value_type_t</span> value = lei&lt;aaa&gt;::func();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="模板列表默认实参"><a href="#模板列表默认实参" class="headerlink" title="模板列表默认实参"></a>模板列表默认实参</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="keyword">int</span>&gt;</span><br><span class="line">class lei &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="keyword">char</span>&gt;</span><br><span class="line"><span class="keyword">void</span> func(<span class="keyword">void</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)&#123;</span><br><span class="line">    class lei&lt;&gt; *obj; <span class="comment">// 默认为lei&lt;int&gt;类型</span></span><br><span class="line"></span><br><span class="line">    func&lt;&gt;(); <span class="comment">// 默认为func&lt;char&gt;类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用函数重载模板函数"><a href="#使用函数重载模板函数" class="headerlink" title="使用函数重载模板函数"></a>使用函数重载模板函数</h4><p>有两个一样嘅功能时，优先选用非模板函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(T)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    func(<span class="number">11</span>);</span><br><span class="line">    func&lt;<span class="keyword">int</span>&gt;(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="参数可变模板（模板参数包）"><a href="#参数可变模板（模板参数包）" class="headerlink" title="参数可变模板（模板参数包）"></a>参数可变模板（模板参数包）</h4><p>模板参数包可以表示0个或n个参数</p>
<ul>
<li><code>sizeof...</code>关键字，可以查看参数包入面嘅参数数量</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">ostream&amp; <span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> T &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> os &lt;&lt; t; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Args&gt;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">ostream&amp; <span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> T &amp;t, <span class="keyword">const</span> Args&amp;... rest)</span></span>&#123;</span><br><span class="line">    os &lt;&lt; t &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">    <span class="keyword">return</span> print(os, rest...); <span class="comment">// 递归打印出模板参数包内嘅数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    print&lt;<span class="keyword">char</span>, <span class="keyword">int</span>, <span class="keyword">double</span>&gt;(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">'a'</span>, <span class="number">11</span>, <span class="number">1.1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>调用</th>
<th>t</th>
<th>rest</th>
</tr>
</thead>
<tbody><tr>
<td><strong>print(std::cout, ‘a’, 11, 1.1)</strong></td>
<td>`a`</td>
<td>11, 1.1</td>
</tr>
<tr>
<td><strong>printf(std::cout, 11, 1.1)</strong></td>
<td>11</td>
<td>1.1</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>调用</th>
<th>t</th>
</tr>
</thead>
<tbody><tr>
<td><strong>print(std::cout, 1.1)</strong></td>
<td>1.1</td>
</tr>
</tbody></table>
<p><img src="8.png" alt></p>
<p>结果：</p>
<p><img src="7.png" alt></p>
<h4 id="特例化"><a href="#特例化" class="headerlink" title="特例化"></a>特例化</h4><p>特例化本质喺实例化。</p>
<p><strong>函数特例化：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(T t)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;&#125; <span class="comment">// int类型特例化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc;</span><br><span class="line">    (<span class="keyword">void</span>)argv;</span><br><span class="line">    </span><br><span class="line">    func&lt;<span class="keyword">double</span>&gt;(<span class="number">1.1</span>);</span><br><span class="line">    func(<span class="number">11</span>); <span class="comment">// 调用特例化版本</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>部分特例化：</strong><br>实例化一部分数据，只能作用于类模板。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&lt;T&amp;&gt; &#123;</span>&#125;; <span class="comment">// 部分特例化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">void</span> lei&lt;<span class="keyword">int</span>&gt;::m(<span class="keyword">void</span>) &#123;&#125; <span class="comment">// 特例化成员</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>可以防止名称冲突。</p>
<ul>
<li>命名空间喺唔连续嘅（由多个唔连续空间组成嘅大空间）<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// head.hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __HEAD_HPP__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HEAD_HPP__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> __space&#123;</span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">1.1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __HEAD_HPP__</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"src/shifeihen/head.hpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> __space&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc;</span><br><span class="line">    (<span class="keyword">void</span>)argv;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; __space::d &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="作用于嵌套命名空间嘅内敛命名空间"><a href="#作用于嵌套命名空间嘅内敛命名空间" class="headerlink" title="作用于嵌套命名空间嘅内敛命名空间"></a>作用于嵌套命名空间嘅内敛命名空间</h4><p>外层命名空间可以直接调用内敛命名空间。</p>
<p><code>注意</code>： 头文件不要声明命名空间</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> __space&#123;</span><br><span class="line">    <span class="keyword">namespace</span> aaa&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">namespace</span> bbb&#123; <span class="comment">// 内敛命名空间</span></span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">1.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc;</span><br><span class="line">    (<span class="keyword">void</span>)argv;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, __space::aaa::i); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>, __space::d); <span class="comment">// 外层命名空间直接调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="匿名命名空间"><a href="#匿名命名空间" class="headerlink" title="匿名命名空间"></a>匿名命名空间</h4><p>该空间内嘅数据为全局静态类型，无需使用作用域直接使用（c++推荐使用匿名命名空间替代static嘅静态声明）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> i; <span class="comment">// C语言静态声明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// C++静态声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="声明命名空间-与-命名空间取别名"><a href="#声明命名空间-与-命名空间取别名" class="headerlink" title="声明命名空间 与 命名空间取别名"></a>声明命名空间 与 命名空间取别名</h4><p>声明后可以无需写上作用域，直接调用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> __space&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __space; <span class="comment">// 声明命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc;</span><br><span class="line">    (<span class="keyword">void</span>)argv;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 直接调用</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>命名空间取别名：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="获取运行时类型"><a href="#获取运行时类型" class="headerlink" title="获取运行时类型"></a>获取运行时类型</h3><ul>
<li>作用于指针时，返回结果为该指针嘅静态类型</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeid</span>(<span class="number">11</span>) == <span class="keyword">typeid</span>(<span class="number">22</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"ok\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="改善程序嘅做法"><a href="#改善程序嘅做法" class="headerlink" title="改善程序嘅做法"></a>改善程序嘅做法</h3><ul>
<li><p>class默认生成public访问权限嘅inline无参构造，拷贝构造，析构函数，假如设计嘅类唔需要尼滴函数，请删除。</p>
</li>
<li><p>唔可以喺构造同析构过程中调用虚函数，构造期间，虚函数唔喺虚函数。</p>
</li>
<li><p>operator=拷贝函数需要判断自赋值。【 if(this == &amp;obj)  】</p>
</li>
<li><p>凡喺使用new或malloc申请嘅内存，使用完后都必须释放（推荐使用智能指针）</p>
</li>
<li><p>传递参数时，使用常量引用传递代替值传递可以减少资源开销（STL迭代器与函数对象使用值传递嘅开销很小）</p>
</li>
<li><p>唔好返回临时对象嘅引用。</p>
</li>
<li><p>尽量以non-member，non-friend函数替换类member函数</p>
</li>
<li><p>假如类member函数所有参数皆需类型转换，就用non-member函数（对于类类型转换必须用non-member函数）</p>
</li>
<li><p>唔好返回一个指向类内成员嘅指针</p>
</li>
</ul>
<div class="note info"><h4 id="尽量使用编译器替换预处理器"><a href="#尽量使用编译器替换预处理器" class="headerlink" title="尽量使用编译器替换预处理器"></a>尽量使用编译器替换预处理器</h4><blockquote>
<p>因为#define唔被视为语言嘅一部分，对于单纯嘅常量尽量以const与enum替换宏常量，宏函数尽量用inline函数替换。</p>
</blockquote></div>

<div class="note info"><h4 id="尽量使用csont"><a href="#尽量使用csont" class="headerlink" title="尽量使用csont"></a>尽量使用csont</h4><p>const可以减少系统开销。</p>
<p>当const与non-const有相同嘅实现时，non-const调用const版本可以避免代码重复。</p>
<figure class="highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    lei(<span class="keyword">const</span> <span class="keyword">int</span> &amp;__i) : </span><br><span class="line">    i(__i) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">int</span>&amp; <span class="title">get</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span></span>; <span class="comment">// const</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span>&amp; <span class="title">get</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">// non-const</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; lei::get(<span class="keyword">void</span>) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;i; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>&amp; lei::get(<span class="keyword">void</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>&amp;&gt;(</span><br><span class="line">            <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> lei*&gt;(<span class="keyword">this</span>) <span class="comment">// 将当前对象强转成const</span></span><br><span class="line">            -&gt;get() <span class="comment">// 然后调用const版本函数</span></span><br><span class="line">        ); <span class="comment">// 最后将其返回值类型强转成non-const类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc; (<span class="keyword">void</span>)argv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> lei *c_obj;</span><br><span class="line">    c_obj-&gt;get(); <span class="comment">// 调用const版本</span></span><br><span class="line"></span><br><span class="line">    lei *obj;</span><br><span class="line">    obj-&gt;get(); <span class="comment">// 调用non-const版本</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<div class="note info"><h4 id="使用对象之前，要确保对象已经初始化"><a href="#使用对象之前，要确保对象已经初始化" class="headerlink" title="使用对象之前，要确保对象已经初始化"></a>使用对象之前，要确保对象已经初始化</h4><p>对需要初始化嘅成员，喺构造函数度使用初始化列表。</p>
<p>为了确保对象使用前被初始化，使用local static对象替换non-local static</p>
<figure class="highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">size_t</span> number(<span class="keyword">void</span>) <span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">size_t</span> lei::number() <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> <span class="number">11</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个local static嘅lei对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">lei&amp; <span class="title">get_lei_obj</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> lei obj; <span class="comment">// 定义并初始化local static对象</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">aaa</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    aaa()</span><br><span class="line">    &#123; <span class="built_in">printf</span>(<span class="string">"number=%d\n"</span>, get_lei_obj().number()); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个local static嘅aaa对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">aaa&amp; <span class="title">get_aaa_obj</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> aaa obj;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc; (<span class="keyword">void</span>)argv;</span><br><span class="line"></span><br><span class="line">    aaa obj = get_aaa_obj(); <span class="comment">// local static对象</span></span><br><span class="line">    aaa dx; <span class="comment">// non-local static对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="note info"><h4 id="为需要使用多态嘅父类声明虚析构函数"><a href="#为需要使用多态嘅父类声明虚析构函数" class="headerlink" title="为需要使用多态嘅父类声明虚析构函数"></a>为需要使用多态嘅父类声明虚析构函数</h4><p>先调用子类析构函数，然后在调用父类析构函数。</p>
<figure class="highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fu</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~fu()</span><br><span class="line">    &#123; <span class="built_in">printf</span>(<span class="string">"~fu()\n"</span>); <span class="built_in">free</span>(p); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> :</span> <span class="keyword">public</span> fu&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~zi()</span><br><span class="line">    &#123; <span class="built_in">printf</span>(<span class="string">"~zi()\n"</span>); <span class="built_in">free</span>(d); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> *d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc; (<span class="keyword">void</span>)argv;</span><br><span class="line"></span><br><span class="line">    zi *obj = <span class="keyword">new</span> zi;    </span><br><span class="line">    <span class="keyword">delete</span> obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="13.png" alt></p>
<p>当父类为non-virtual析构函数，静态类型为父类动态类型为子类时，delete对象只会调用父类析构忽略了子类析构，造成了内存泄漏。</p>
<figure class="highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fu</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     ~fu()</span><br><span class="line">    &#123; <span class="built_in">printf</span>(<span class="string">"~fu()\n"</span>); <span class="built_in">free</span>(p); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> :</span> <span class="keyword">public</span> fu&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     ~zi()</span><br><span class="line">    &#123; <span class="built_in">printf</span>(<span class="string">"~zi()\n"</span>); <span class="built_in">free</span>(d); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> *d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc; (<span class="keyword">void</span>)argv;</span><br><span class="line"></span><br><span class="line">    fu *obj = <span class="keyword">new</span> zi;    </span><br><span class="line">    <span class="keyword">delete</span> obj; <span class="comment">// 没有释放子类数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="14.png" alt></p></div>

<div class="note info"><h4 id="析构函数绝对唔可以出现异常"><a href="#析构函数绝对唔可以出现异常" class="headerlink" title="析构函数绝对唔可以出现异常"></a>析构函数绝对唔可以出现异常</h4><p>使用一个类来管理另一个类嘅析构。</p>
<figure class="highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 假设尼个析构函数可能会出异常</span></span><br><span class="line">    ~lei() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="built_in">printf</span>(<span class="string">"is close\n"</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">aaa</span>&#123;</span> <span class="comment">// 管理lei类型</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用lei嘅close()函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        obj.close();</span><br><span class="line">        b = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~aaa()&#123;</span><br><span class="line">        <span class="keyword">if</span>(!b)&#123; <span class="comment">// b为false时</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                obj.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span>(...)&#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">abort</span>(); <span class="comment">// 制作运转记录</span></span><br><span class="line">                <span class="comment">// 处理异常</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    lei obj;</span><br><span class="line">    <span class="keyword">bool</span> b; <span class="comment">// 记录close()是否成功执行</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc; (<span class="keyword">void</span>)argv;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">lei</span> *<span class="title">obj</span> = <span class="title">new</span> <span class="title">lei</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">aaa</span> *<span class="title">o</span> = <span class="title">new</span> <span class="title">aaa</span>;</span></span><br><span class="line"></span><br><span class="line">    o-&gt;close();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<div class="note info"><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>将类内所有数据都拷贝一份出来。</p>
<p>子类嘅拷贝函数需要拷贝父类部分。</p>
<figure class="highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fu</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 默认拷贝函数</span></span><br><span class="line">    fu&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> fu&amp;) = <span class="keyword">default</span>;</span><br><span class="line">    fu(<span class="keyword">int</span> __i, <span class="keyword">double</span> __d) :</span><br><span class="line">    i(__i), d(__d) &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> :</span> <span class="keyword">public</span> fu&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    zi(<span class="keyword">const</span> zi&amp;); <span class="comment">// 拷贝构造</span></span><br><span class="line">    zi&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> zi&amp;);</span><br><span class="line">    zi(<span class="keyword">char</span> __c, <span class="keyword">long</span> __l) :</span><br><span class="line">    fu(<span class="number">0</span>, <span class="number">0.0</span>), c(__c), l(__l) &#123;&#125; <span class="comment">// 同时初始化父类部分</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">long</span> l;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zi::zi(<span class="keyword">const</span> zi &amp;obj) : </span><br><span class="line">fu(obj), c(obj.c), l(obj.l) &#123;&#125; <span class="comment">// 同时拷贝父类部分</span></span><br><span class="line"></span><br><span class="line">zi&amp; zi::<span class="keyword">operator</span>=(<span class="keyword">const</span> zi &amp;obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> == &amp;obj) <span class="comment">// 自赋值</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    fu::<span class="keyword">operator</span>=(obj); <span class="comment">// 拷贝父类部分</span></span><br><span class="line">    <span class="comment">// 拷贝子类部分</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;c = obj.c;</span><br><span class="line">    <span class="keyword">this</span>-&gt;l = obj.l;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc; (<span class="keyword">void</span>)argv;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">zi</span> *<span class="title">obj</span> = <span class="title">new</span> <span class="title">zi</span>('<span class="title">a</span>', 1<span class="title">L</span>);</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">zi</span> *<span class="title">obj2</span> = <span class="title">obj</span>;</span></span><br><span class="line">    <span class="function">class zi *<span class="title">obj3</span><span class="params">(obj2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>


<div class="note info"><h4 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h4><p>有效的对资源进行管理。</p>
<ul>
<li><p>拷贝或转移资源对象权限都可以通过智能指针实现。</p>
</li>
<li><p>智能指针可以通过<code>get()</code>函数，转换成普通指针，对原始资源进行管理。（当智能指针被删除时，这个普通指针也会被删除）</p>
</li>
<li><p>智能指针嘅初始化最好米掺杂其他嘢。（一旦掺杂其他嘢并且掺杂物出现异常，就会造成内存泄漏）</p>
</li>
</ul></div>

<div class="note info"><h4 id="编写自己嘅swap-函数"><a href="#编写自己嘅swap-函数" class="headerlink" title="编写自己嘅swap()函数"></a>编写自己嘅swap()函数</h4><ul>
<li>条件1： 唔可以抛异常</li>
<li>条件2： 类嘅拷贝函数必须要喺深拷贝</li>
</ul>
<figure class="highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(lei*, lei*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(lei*, lei*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    lei(<span class="keyword">const</span> <span class="keyword">int</span> &amp;__i) :</span><br><span class="line">    i(__i) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    lei(<span class="keyword">const</span> lei &amp;obj) :</span><br><span class="line">    i(obj.i) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">int</span>&amp; <span class="title">get</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;i; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意，参数为值传递</span></span><br><span class="line">    lei&amp; <span class="keyword">operator</span> =(lei obj)&#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == &amp;obj)</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        swap(<span class="keyword">this</span>, &amp;obj);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(lei *o1, lei *o2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::swap;</span><br><span class="line">    swap(o1-&gt;i, o2-&gt;i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    (<span class="keyword">void</span>)argc; (<span class="keyword">void</span>)argv;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">lei</span> *<span class="title">obj</span> = <span class="title">new</span> <span class="title">lei</span>(11);</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">lei</span> *<span class="title">obj2</span> = <span class="title">new</span> <span class="title">lei</span>(22);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"o1=%d, o2=%d\n"</span>, obj-&gt;get(), obj2-&gt;get());</span><br><span class="line">    swap(obj, obj2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"o1=%d, o2=%d\n"</span>, obj-&gt;get(), obj2-&gt;get());</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">lei</span> *<span class="title">obj3</span> = <span class="title">obj</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"o3=%d\n"</span>, obj3-&gt;get());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="15.png" alt></p></div>

<h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>静态，使用该关键字嘅数据都会被存储喺<code>静态区域</code>，并且只有程序结束时先会被释放。</p>
<ul>
<li>static member函数唔可以用this指针。</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>c/c++</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Unix高级环境笔记</title>
    <url>/2019/10/18/Unix%E9%AB%98%E7%BA%A7%E7%8E%AF%E5%A2%83%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2019/10/18/Unix高级环境笔记/封面.gif">

<p>基于<code>cent8</code>与<code>Unix高级环境编程第三版</code></p>
<a id="more"></a>

<hr>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><blockquote>
<p>运行一个a.out文件，就是创建一个进程，进程可以使用<code>exit()</code>进行结束。</p>
</blockquote>
<p><strong>查看a.out的进程id</strong><br><img src="1.png" alt></p>
<hr>
<div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><a href="#1-1">taexit()</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1-1"><blockquote>
<p>终止处理程序：为进程注册一个退出时要执行的函数（被标记多次则会被多次调用），该函数返回0表示成功</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// test.c</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">void m()&#123;</span><br><span class="line">    printf(&quot;m\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void m2()&#123;</span><br><span class="line">    printf(&quot;m2\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line">    atexit(m);</span><br><span class="line">    atexit(m2);</span><br><span class="line">    atexit(m2);</span><br><span class="line">    printf(&quot;is main\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong><br><img src="2.png" alt></p>
</div></div></div>



<hr>
]]></content>
      <categories>
        <category>Unix</category>
      </categories>
  </entry>
  <entry>
    <title>套接字笔记</title>
    <url>/2019/10/17/Unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E5%A5%97%E6%8E%A5%E5%AD%97%E8%81%94%E7%BD%91API%EF%BC%89%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2019/10/17/Unix网络编程（套接字联网API）笔记/封面.gif">

<ul>
<li>操作系统: CentOs8</li>
<li>gcc版本: 9.3</li>
<li>gdb版本: 9.1</li>
</ul>
<a id="more"></a>

<hr>
<p>套接字（soccket），使用协议将双方进行连接的通信技术</p>
<hr>
<h3 id="对数据结构与数组进行清空操作"><a href="#对数据结构与数组进行清空操作" class="headerlink" title="对数据结构与数组进行清空操作"></a>对数据结构与数组进行清空操作</h3><p>函数原型:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;string.h&gt;</span><br><span class="line">void* memset(void *__s, int __c, size_t __n)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 对数据结构与数组进行清空操作</span><br><span class="line">memset(数组/结构, 0, sizeof(数组/结构))</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="pthread"><a href="#pthread" class="headerlink" title="pthread"></a>pthread</h3><p>线程创建函数。</p>
<blockquote>
<p>可能会出现嘅问题： 线程创建成功，但无执行对应嘅线程函数。<br><strong>解决</strong>： 喺pthread_create()后添加sleep()让其阻塞 或 使用pthread_join()让主线程等待子线程结束</p>
</blockquote>
<p>方法1：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(pthread_create(&amp;thread, <span class="literal">nullptr</span>, (<span class="keyword">void</span>*(*)(<span class="keyword">void</span>*))func, <span class="literal">nullptr</span>) == <span class="number">-1</span> &amp;&amp; sleep(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>方法2：（推荐）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(pthread_create(&amp;thread, <span class="literal">nullptr</span>, (<span class="keyword">void</span>*(*)(<span class="keyword">void</span>*))func, <span class="literal">nullptr</span>) == <span class="number">-1</span>);</span><br><span class="line">pthread_join(thread, <span class="literal">nullptr</span>); <span class="comment">// 等待子线程结束</span></span><br></pre></td></tr></table></figure>

<h4 id="pthread-create传入多个函数参数"><a href="#pthread-create传入多个函数参数" class="headerlink" title="pthread_create传入多个函数参数"></a>pthread_create传入多个函数参数</h4><p>将函数参数封装成结构，使用结构作为参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct st&#123;</span><br><span class="line">    void *arg1;</span><br><span class="line">    void *arg2;</span><br><span class="line">    void *arg3;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void* func(void*);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    st st_obj = new st;</span><br><span class="line">    st-&gt;arg1 = 初始化;</span><br><span class="line">    st-&gt;arg2 = 初始化;</span><br><span class="line">    st-&gt;arg3 = 初始化;</span><br><span class="line"></span><br><span class="line">    pthread_t thr = 0;</span><br><span class="line">    pthread_create(&amp;thr, NULL, func, (void*)st);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="pthread-create调用类成员出现类型参数唔兼容错误"><a href="#pthread-create调用类成员出现类型参数唔兼容错误" class="headerlink" title="pthread_create调用类成员出现类型参数唔兼容错误"></a>pthread_create调用类成员出现类型参数唔兼容错误</h4><p><img src="1.png" alt></p>
<p>解决方法: 只需要将该函数定义成静态函数即可解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static void* accept_request(void*);</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
  </entry>
  <entry>
    <title>linux基础笔记</title>
    <url>/2019/10/08/linux%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src="/2019/10/08/linux笔记/封面.gif">

<p>基于<code>Cent8</code>与书籍<code>鸟哥的LINUX私房菜基础篇第四版</code></p>
<a id="more"></a>

<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p><code>tab按键</code>名称补全</p>
<p><code>ctrl按键+c</code>中断目前程序</p>
<p><code>ctrl按键+d</code>exit</p>
<p><code>shift按键+page up</code>上一页</p>
<p><code>shift按键+page down</code>下一页</p>
<p><code>date</code>时间</p>
<p><code>cal</code>日历</p>
<p><code>clear</code>清屏</p>
<p><code>su [用户名]</code>切换用户，不输入用户名则切换到root</p>
<p><code>ls [-aid]</code>查看当前目录所有文件的名称，<code>a</code>显示隐藏目录和文件<code>i</code>查看节点编号<code>d</code>区块存储大小</p>
<p><code>ll [-aid]</code>查看当前目录所有文件的名称和权限</p>
<p><code>man [命令]</code>获取该命令的使用说明</p>
<p><code>cp 文件 指定目录</code>拷贝文件</p>
<p><code>mv 文件 指定目录</code>移动文件</p>
<p><code>rm [-rf] 文件</code>删除文件/目录<code>r</code>递归<code>f</code>强制删除</p>
<p><code>cd 目录</code>.表示当前目录，..表示父目录</p>
<p><code>pwd</code>查看当前目录</p>
<p><code>mkdir 名称</code>创建目录</p>
<p><code>touch 名称</code>创建文件</p>
<p><code>chmod 权限 文件</code>修改文件的权限</p>
<p><code>file 文件</code>查看文件类型</p>
<table>
<thead>
<tr>
<th align="left">r</th>
<th align="left">w</th>
<th align="left">x</th>
<th align="left">0</th>
<th align="left">5</th>
<th align="left">7</th>
</tr>
</thead>
<tbody><tr>
<td align="left">读</td>
<td align="left">写</td>
<td align="left">可执行</td>
<td align="left">权限清空</td>
<td align="left">读与可执行</td>
<td align="left">全部权限</td>
</tr>
</tbody></table>
<p><strong>注意：数字最多只能有三个，分别表示：用户，组，其他用户</strong></p>
<table>
<thead>
<tr>
<th align="left">写法</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">u-rwx</td>
<td align="left">取消用户的读取，写入，执行</td>
</tr>
<tr>
<td align="left">g-rwx</td>
<td align="left">取消组的读取，写入，执行</td>
</tr>
<tr>
<td align="left">o-rwx</td>
<td align="left">取消其他用户的读取，写入，执行</td>
</tr>
<tr>
<td align="left">u+rwx</td>
<td align="left">添加用户的读取，写入，执行</td>
</tr>
<tr>
<td align="left">g+rwx</td>
<td align="left">添加组的读取，写入，执行</td>
</tr>
<tr>
<td align="left">o+rwx</td>
<td align="left">添加其他用户的读取，写入，执行</td>
</tr>
</tbody></table>
<p><strong>注意：rwx是可选择的，不一定要全写，写入你希望的权限就行了</strong></p>
<p><code>yum list</code>查看可以使用yum能下载的软件，通过<code>yum install 软件名</code>进行下载，install换成remove则是删除</p>
<p><code>find 查找目录 [-name] &quot;查找名称&quot;</code>查找文件，find的使用条件所查找的路径必须具有读权限</p>
<p><code>grep [-iv] 需要查找的字符串 文件</code>过滤，往指定文件查找字符串，<code>i</code>忽略大小写<code>v</code>查出不包含字符串的结果</p>
<p><code>管道符|</code>将一个进程的输出作为另一个进程的输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 显示所有在/my_test目录找到的有关键字main.cpp的文件，并输出详细信息</span><br><span class="line">ll /my_test | grep -i main.cpp</span><br></pre></td></tr></table></figure>

<p><code>reboot</code>重启</p>
<p><code>shutdown [-h] [时间]</code>设置关机时间，时间处设置<code>now</code>则立刻关机</p>
<p><code>ping [-c&lt;n&gt;] 网页</code>测试这个网页的ping，<code>c</code>测试测试次数</p>
<p><code>ifconfig</code>查看和配置当前机器的网络参数信息</p>
<p><code>chattr [+-=] [ai] 文件或目录</code>设置隐藏属性<code>a</code>只能增加数据，不能删和改<code>i</code>不能删改写只有root才能设置</p>
<p><strong><code>+</code>添加特设参数，<code>-</code>删除特殊参数，<code>=</code>直接设置特殊参数</strong></p>
<hr>
<h1 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h1><p><code>vim 文件名</code>如果没有该文件就会创建一个空文本</p>
<p>按<code>:</code>输入使用命令</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">wq</td>
<td align="left">保存</td>
</tr>
<tr>
<td align="left">q!</td>
<td align="left">不保存，并退出vim</td>
</tr>
<tr>
<td align="left">i</td>
<td align="left">往文件输入内容</td>
</tr>
<tr>
<td align="left">esc按钮</td>
<td align="left">取消当前命令，进入重新输入命令界面</td>
</tr>
</tbody></table>
<hr>
<h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><p><code>echo 环境变量名</code>查看该环境变量里所有的路径</p>
<p><code>export 环境变量名=路径:$环境变量名</code>设置临时环境变量`设置临时环境变量</p>
<p><strong>注意：多个路径用<code>:</code>进行分隔</strong></p>
<p><strong>设置永久环境变量</strong></p>
<blockquote>
<p>打开<code>vim /etc/profile</code>文件<br>在文件末尾处输入临时环境变量<br>保存<br>命令行输入<code>source /etc/profile</code>立即使用该配置文件</p>
</blockquote>
<h1 id="linux的ext2文件系统"><a href="#linux的ext2文件系统" class="headerlink" title="linux的ext2文件系统"></a>linux的ext2文件系统</h1><p>这是linux最传统的磁盘文件</p>
<p><code>数据区块</code>是用来存放文件数据的地方</p>
<p><strong>ext2支持的区块</strong></p>
<table>
<thead>
<tr>
<th align="left">限制</th>
<th align="left">1K区块</th>
<th align="left">2K区块</th>
<th align="left">4K区块</th>
</tr>
</thead>
<tbody><tr>
<td align="left">最大单一文件</td>
<td align="left">16G</td>
<td align="left">256G</td>
<td align="left">2TB</td>
</tr>
<tr>
<td align="left">最大文件系统总容量</td>
<td align="left">2TB</td>
<td align="left">8TB</td>
<td align="left">16TB</td>
</tr>
</tbody></table>
<ul>
<li><p>如果需要修改区块大小与数量，必须格式化</p>
</li>
<li><p>每个区块只能存放一个文件的数据，如果一个文件的数量大于区块的大小，则这个文件会占用多个区块，<br>如果这个文件小于区块的大小，这个区块的剩余容量将不能被使用，造成了空间浪费</p>
</li>
<li><p>文件系统最前面有个可以安装引导的启动扇区</p>
</li>
</ul>
<h2 id="inode-节点-表"><a href="#inode-节点-表" class="headerlink" title="inode(节点)表"></a>inode(节点)表</h2><p>记录文件属性以及文件实际数据存放的区块</p>
<ul>
<li><p>文件的读写属性</p>
</li>
<li><p>文件拥有者与组</p>
</li>
<li><p>文件大小</p>
</li>
<li><p>文件建立与修改时间</p>
</li>
<li><p>最后一次读取时间</p>
</li>
<li><p>最近修改时间</p>
</li>
<li><p>文件的特性标识</p>
</li>
<li><p>文件真正内容的指向</p>
</li>
<li><p>每个文件只会占用一个inode，能建立的文件数量与节点数量有关</p>
</li>
<li><p>系统读取文件先找inode并分析所记录的权限与用户是否符合，符合则读取区块的内容</p>
</li>
<li><p>inode固定大小为128，256B，记录一个数据需要4B，假如超出inode大小则会出现间接记录区</p>
</li>
</ul>
<p><code>间接分区</code>就是再拿一块分区来当作记录区块号码的记录区，文件太大就会使用间接的分区来记录编号</p>
<p><img src="inode.jpg" alt></p>
<p>节点 -&gt; [间接区块] -&gt; 区块</p>
<h2 id="superblock超级区块"><a href="#superblock超级区块" class="headerlink" title="superblock超级区块"></a>superblock超级区块</h2><p>记录整个文件系统相关信息，没有超级区块就没有文件系统</p>
<ul>
<li><p>区块与inode的总量</p>
</li>
<li><p>未使用的inode与区块数量</p>
</li>
<li><p>区块与inode的大小（区块为1k,2k,4k,inode为128b,256b）</p>
</li>
<li><p>文件系统的挂载时间，系统信息</p>
</li>
<li><p>有效位数值，被挂载为0，未挂载为1</p>
</li>
</ul>
<hr>
<h1 id="VFS"><a href="#VFS" class="headerlink" title="VFS"></a>VFS</h1><p>用来管理所有的文件系统，了解即可</p>
<hr>
<h1 id="xfs文件系统"><a href="#xfs文件系统" class="headerlink" title="xfs文件系统"></a>xfs文件系统</h1><p>日志文件系统，文件系统恢复速度，创建速度快</p>
<p><strong>主要规划为：</strong></p>
<p><code>数据区</code>有节点，数据区块，超级区块数据，区块可在512b-64k调整，节点可在256b-2m调整</p>
<p><code>文件系统活动登陆区</code>文件的变化会被记录，直到变化完整写入到数据区，该记录才会结束。假如发生意外<br>（例如停电）导致文件系统损坏，系统会拿这个登录区进行校验，查看在系统出意外前，文件系统在做什么操作，<br>借此快速修复文件系统 </p>
<p><code>实时运行区</code>当文件要被建立时，会在这个区段里找数个extent区块，将文件存放到这个区块，等分配完后，<br>在写入到数据段和节点与区块中，这个extent的大小在格式化时先指定，4K-1G，extent的调整可能会影响到<br>物理硬盘的性能</p>
<hr>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>用于文件的共享</p>
<h2 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h2><p>通过系统的节点链接产生新文件名</p>
<p><strong>硬链接只是在某个目录下新增一条文件名，链接到某个节点编号的关联记录</strong></p>
<p><code>ln 源文件 目标文件</code>建立硬链接</p>
<p>硬链接的限制为：不能跨文件系统于链接目录</p>
<h2 id="符号链接（软链接）"><a href="#符号链接（软链接）" class="headerlink" title="符号链接（软链接）"></a>符号链接（软链接）</h2><p>类似于快捷键</p>
<p>软连接就是建立一个独立文件，这个文件会让数据的读取指向它链接的那个文件的文件名，由于只是利用文件<br>来做为指向的操作，当源文件被删除，软链接的文件就会打不开</p>
<p><code>ln -sf 源文件 目标文件</code>添加了<code>s</code>选项就变成了软链接，<code>f</code>为强制执行</p>
<hr>
<h1 id="观察磁盘分区状态"><a href="#观察磁盘分区状态" class="headerlink" title="观察磁盘分区状态"></a>观察磁盘分区状态</h1><p><code>lsblk [-] 设备</code>列出所有磁盘列表</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-i</td>
<td align="left">ASCII字符输出</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">列出设置的完整名称</td>
</tr>
</tbody></table>
<ul>
<li><p><code>NAME</code>设备名</p>
</li>
<li><p><code>MAJ:MIN</code>内核识别设备</p>
</li>
<li><p><code>RM</code>设备是否可卸载（比如移动硬盘之类的）</p>
</li>
<li><p><code>SIZE</code>容量</p>
</li>
<li><p><code>RO</code>是否为只读</p>
</li>
<li><p><code>TYPE</code>类型，disk为磁盘，partition为分区，rom只读存储器</p>
</li>
<li><p><code>MOUNTPOINT</code>挂载点</p>
</li>
</ul>
<h2 id="列出设备的UUID（全局唯一标识符）"><a href="#列出设备的UUID（全局唯一标识符）" class="headerlink" title="列出设备的UUID（全局唯一标识符）"></a>列出设备的UUID（全局唯一标识符）</h2><p>该标识符是独一无二的，可以拿来挂载或使用这个设备的文件系统</p>
<p><code>blkid</code>列出设备的UUID</p>
<h2 id="列出分区类型与信息"><a href="#列出分区类型与信息" class="headerlink" title="列出分区类型与信息"></a>列出分区类型与信息</h2><p><code>parted 磁盘名称 print</code></p>
<ul>
<li><p><code>Model</code>磁盘模块名称</p>
</li>
<li><p><code>Disk</code>磁盘总容量</p>
</li>
<li><p><code>Sector size</code>磁盘的每个逻辑、物理扇区容量</p>
</li>
<li><p><code>partition Table</code>分区表格式</p>
</li>
</ul>
<hr>
<h1 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h1><h2 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h2><p>MBR用该分区</p>
<p><code>fdisk 磁盘名</code>打开fdisk</p>
<h2 id="gdisk"><a href="#gdisk" class="headerlink" title="gdisk"></a>gdisk</h2><p>GPT用该分区</p>
<p><code>gdisk 磁盘名</code>打开fdisk</p>
<ul>
<li><p><code>d</code>删除一个分区</p>
</li>
<li><p><code>n</code>增加一个分区</p>
</li>
<li><p><code>p</code>打印出分区表</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Number</td>
<td align="left">分区编号，/dev/xx1这样计算</td>
</tr>
<tr>
<td align="left">Start</td>
<td align="left">每个分区的开始扇区位置</td>
</tr>
<tr>
<td align="left">End</td>
<td align="left">每个分区的结束扇区位置，End-Start可获取分区总容量</td>
</tr>
<tr>
<td align="left">Size</td>
<td align="left">分区容量</td>
</tr>
<tr>
<td align="left">Code</td>
<td align="left">分区文件类型，Linux为8300，swap为8200，这只是一个提示</td>
</tr>
</tbody></table>
<ul>
<li><p><code>q</code>不保存分区直接离开</p>
</li>
<li><p><code>w</code>保存操作后离开</p>
</li>
</ul>
<h3 id="新增分区"><a href="#新增分区" class="headerlink" title="新增分区"></a>新增分区</h3><p>打开<code>gisk</code>输入<code>p</code>查看磁盘信息，以此信息为主来进行新分区的设置</p>
<p>输入<code>n</code>新增分区</p>
<p><img src="gdisk.png" alt></p>
<p>最后按<code>w</code>保存</p>
<h2 id="删除分区"><a href="#删除分区" class="headerlink" title="删除分区"></a>删除分区</h2><p>输入<code>d</code>删除分区</p>
<p><img src="gdisk2.png" alt></p>
<p>最后按<code>w</code>保存</p>
<hr>
<h1 id="磁盘格式化"><a href="#磁盘格式化" class="headerlink" title="磁盘格式化"></a>磁盘格式化</h1><h2 id="XFS文件系统mkfs-xfs"><a href="#XFS文件系统mkfs-xfs" class="headerlink" title="XFS文件系统mkfs.xfs"></a>XFS文件系统mkfs.xfs</h2><p><code>mkfs.xfs 分区编号</code>对该分区进行格式化</p>
<p><strong>为格式化添加cpu参数，可增加速度</strong></p>
<p><code>grep &#39;processor&#39; /proc/cpionfo</code>查看cpu数量</p>
<p><code>mkfs.xfs -f -d agcount=cpu数量 分区编号</code>为分区设置cpu参数<code>d</code>重要的相关参数<code>f</code>强制格式化</p>
<table>
<thead>
<tr>
<th align="left">-d可以设置的常用参数</th>
</tr>
</thead>
<tbody><tr>
<td align="left">agcount=数值，设置存储群组，与cpu有关</td>
</tr>
<tr>
<td align="left">su=数值，有RAID时，分区区块stripe数值的意思，与sw配合使用</td>
</tr>
<tr>
<td align="left">sw=数值</td>
</tr>
<tr>
<td align="left">swidth=数值，就是su*sw的数值，以几个sector（512b大小）来设置</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">-r指定realtime section相关设置</th>
</tr>
</thead>
<tbody><tr>
<td align="left">extsize=数值，一般不设置，有RAID时最好设置与swidth的数值相同，最小4k最大1G</td>
</tr>
</tbody></table>
<p><strong>XFS for RAID性能优化</strong></p>
<p>文件 -&gt; 分成许多小型的分区区块 -&gt; 存储到磁盘阵列的所有硬盘里</p>
<p><code>RAID</code>磁盘阵列，多块硬盘组成一大块硬盘，利用同步写入技术，可以加快写入速度，并且出现坏盘时整个<br>文件系统还可以继续运行，提高容错率与速度</p>
<p>磁盘阵列就是将文件细分为多个小型的<code>分区区块stripe</code>然后将众多的分区区块放到磁盘阵列里面的所有磁盘，所以<br>一个文件会同时写入到多个磁盘里，为了安全，会保留数个与磁盘阵列的规划有关的校验磁盘，以及一个或以上<br>的备用磁盘</p>
<p><code>数据宽度swidth</code> = <code>分区区块stripe</code> * <code>磁盘数量（需要扣除备份与备用盘）</code></p>
<p><code>extent大小</code> = <code>数据宽度swidth</code></p>
<p><code>sunit</code> = <code>分区区块</code> / 512b * 1024b/k = <code>sector扇区</code></p>
<p><code>swidth数据宽度</code> = <code>磁盘数量（需要扣除备份与备用盘）</code> * <code>sunit</code> = <code>sector扇区</code></p>
<h2 id="ext4文件系统mkfs-ext4"><a href="#ext4文件系统mkfs-ext4" class="headerlink" title="ext4文件系统mkfs.ext4"></a>ext4文件系统mkfs.ext4</h2><p><code>mkfs.ext4 [-bL] 设备名称</code>使用mkfs.ext4<code>b</code>设置区块大小1k，2k，4k<code>L</code>格式化为ext4文件系统</p>
<h2 id="其他文件系统"><a href="#其他文件系统" class="headerlink" title="其他文件系统"></a>其他文件系统</h2><p><code>mkfs 按两下tab</code>查看其他文件系统</p>
<p><code>mkfs [-t] 文件系统格式 分区</code>格式化分区为指定格式</p>
<hr>
<h1 id="文件系统校验"><a href="#文件系统校验" class="headerlink" title="文件系统校验"></a>文件系统校验</h1><p>系统死机导致文件错乱时使用，可以检查和修复系统，修复时该文件系统不能挂载，必须要处于卸载的状态</p>
<h2 id="xfs-repair处理XFS系统"><a href="#xfs-repair处理XFS系统" class="headerlink" title="xfs_repair处理XFS系统"></a>xfs_repair处理XFS系统</h2><p><code>xfs_repair [-fnd] 设备名</code>校验/修复设备<code>f</code>是文件不是设备<code>n</code>检查<code>d</code>单人维护模式下，强制校验，针对<br>根目录进行检查与修复，不要随意用</p>
<h2 id="fsck-ext4处理ext4文件系统"><a href="#fsck-ext4处理ext4文件系统" class="headerlink" title="fsck.ext4处理ext4文件系统"></a>fsck.ext4处理ext4文件系统</h2><p><code>fsck.ext4 [-pf] [-b 超级区块] 设备名</code>检查/修复设置<code>p</code>自动回复y<code>f</code>强制检查</p>
<hr>
<h1 id="文件系统挂载与卸载"><a href="#文件系统挂载与卸载" class="headerlink" title="文件系统挂载与卸载"></a>文件系统挂载与卸载</h1><ul>
<li><p>单一文件系统不应该被重复挂载在不同的挂载点（目录）中</p>
</li>
<li><p>单一目录不应该重复挂载多个系统</p>
</li>
<li><p>作为挂载点的目录，需要为空目录</p>
</li>
</ul>
<h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p><code>mount [-alo] [-t 文件系统 &lt;UUID=&#39;&#39; 挂载点&gt;]</code> <code>a</code>依照配置文件将/etc/fstab的所有未挂载的磁盘都挂载<br><code>l</code>显示目前挂载的信息<code>o</code>额外参数</p>
<p><strong>-o的额外参数</strong></p>
<table>
<thead>
<tr>
<th align="left">写法</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">async</td>
<td align="left">文件系统非同步写入（默认）</td>
</tr>
<tr>
<td align="left">sync</td>
<td align="left">文件系统同步写入</td>
</tr>
<tr>
<td align="left">atime</td>
<td align="left">修改文件读取时间</td>
</tr>
<tr>
<td align="left">noatime</td>
<td align="left">不修改文件读取时间</td>
</tr>
<tr>
<td align="left">ro</td>
<td align="left">挂载系统只读</td>
</tr>
<tr>
<td align="left">rw</td>
<td align="left">挂载系统可读写</td>
</tr>
<tr>
<td align="left">auto</td>
<td align="left">允许系统以mount -a自动挂载</td>
</tr>
<tr>
<td align="left">noauto</td>
<td align="left">不允许系统以mount -a自动挂载</td>
</tr>
<tr>
<td align="left">dev</td>
<td align="left">文件系统可建立设备文件</td>
</tr>
<tr>
<td align="left">nodev</td>
<td align="left">文件系统不可建立设备文件</td>
</tr>
<tr>
<td align="left">remount</td>
<td align="left">重新挂载</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#挂载文件系统</span><br><span class="line">mount UUID=&quot;&quot; 空目录</span><br><span class="line"></span><br><span class="line">#挂载CD或DVD</span><br><span class="line">mount 需要挂载的DVD/CD 空目录</span><br><span class="line"></span><br><span class="line">#挂载vfat中文U盘</span><br><span class="line">#codepage=950：codepage用来处理vfat，950为中文语系代码</span><br><span class="line">#iocharset指定文件Unicode</span><br><span class="line">mount -o codepage=950 iocharset=utf8 UUID=&quot;&quot; 空目录</span><br><span class="line"></span><br><span class="line">#重新挂载根目录</span><br><span class="line">mount -o remount,rw,auto /</span><br><span class="line"></span><br><span class="line">#将某个目录挂载到另一个目录，额外挂载</span><br><span class="line">mount --bind 源目录 目录</span><br></pre></td></tr></table></figure>

<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p><code>umount -[fn] 设备文件或挂载点</code>卸载<code>f</code>强制卸载<code>n</code>不更新/etc/mtab情况下卸载</p>
<p><a href="https://www.runoob.com/linux/linux-comm-mount.html" target="_blank" rel="noopener"><strong>详细</strong></a></p>
<hr>
<h1 id="磁盘-文件系统参数自定义"><a href="#磁盘-文件系统参数自定义" class="headerlink" title="磁盘/文件系统参数自定义"></a>磁盘/文件系统参数自定义</h1><p>通过修改文件的<code>major</code>与<code>minor</code>数值，实现文件代表设备</p>
<p><code>mknod 磁盘/文件 [-b&lt;设备代码,次要设备代码&gt;]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#建立一个FIFO文件</span><br><span class="line">#这个文件的文件类型是p，也就是prw-rw----注意最前面这个p</span><br><span class="line">mknod 文件 p</span><br></pre></td></tr></table></figure>

<h2 id="修改XFS文件系统的UUID与Lable-name"><a href="#修改XFS文件系统的UUID与Lable-name" class="headerlink" title="修改XFS文件系统的UUID与Lable name"></a>修改XFS文件系统的UUID与Lable name</h2><p><code>xfs_admin [-lu] [-L lbale] [-U uuid] 设备名</code>  <code>l</code>列出lable name<code>u</code>这个设备的uuid<code>L</code>设置新的lable<br><code>U</code>设置新的uuid</p>
<h2 id="修改ext4的lable与uuid"><a href="#修改ext4的lable与uuid" class="headerlink" title="修改ext4的lable与uuid"></a>修改ext4的lable与uuid</h2><p><code>tune2fs [-l] [-L lable] [-U uuid]</code> <code>l</code>将超级区块内的数据读出来</p>
<hr>
<h1 id="生成uuid"><a href="#生成uuid" class="headerlink" title="生成uuid"></a>生成uuid</h1><p><code>uuidgen</code></p>
<hr>
<h1 id="设置启动挂载"><a href="#设置启动挂载" class="headerlink" title="设置启动挂载"></a>设置启动挂载</h1><p>系统挂载的限制：</p>
<ul>
<li><p>根目录必须挂载，优先级最高</p>
</li>
<li><p>其他挂载点必须为已建立的目录</p>
</li>
<li><p>所有挂载点在同一时间内只能挂载一次</p>
</li>
<li><p>所有磁盘在同一时间内，只能被挂载一次</p>
</li>
<li><p>如果需要卸载，必须将工作目录移动到挂载点的子目录之外</p>
</li>
</ul>
<p>直接到<code>/etc/fstab</code>进行设置，可以添加启动挂载，文件内容的6个字段非常重要</p>
<p><code>设备/UUID</code> <code>挂载点</code> <code>文件系统</code> <code>文件系统参数</code> <code>dump备份命令</code> <code>fsck校验扇区</code></p>
<h2 id="特殊设备loop挂载"><a href="#特殊设备loop挂载" class="headerlink" title="特殊设备loop挂载"></a>特殊设备loop挂载</h2><p>比如镜像文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount -o loop 源目录 挂载点目录</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="使用物理分区创建内存交换分区（swap）"><a href="#使用物理分区创建内存交换分区（swap）" class="headerlink" title="使用物理分区创建内存交换分区（swap）"></a>使用物理分区创建内存交换分区（swap）</h1><p>创建分区 -&gt; 格式化为swap格式 -&gt; 启动挂载 -&gt; 创建内存交换文件 -&gt; 格式化为内存交换文件格式 -&gt; 启动</p>
<ul>
<li><p>使用gdisk或其他划分出给系统的内存交换分区</p>
</li>
<li><p>创建swap格式</p>
<p>  <code>mkswap 分区名</code></p>
</li>
<li><p>观察与加载</p>
<p>  <code>free</code></p>
<p>  <code>swapon 分区名</code>然后在<code>free</code></p>
</li>
<li><p>创建内存交换文件</p>
<p>  //创建大文件<br>  <code>dd if=分区名 of=交换分区名 bs=1M count=需要创建的大小</code></p>
</li>
<li><p>格式化为交换文件的文件格式</p>
<p>  <code>mkswap 目录 Setting up swapspace version 1, size = 数值 no lable, UUID=你的uuid</code></p>
</li>
<li><p>启动</p>
<p>  <code>swapon 目录</code><br>  <code>swapon -s</code></p>
</li>
</ul>
<ul>
<li><p>关闭</p>
<p>  <code>swapoff 目录 分区</code></p>
</li>
</ul>
<hr>
<h1 id="GNU的parted分区"><a href="#GNU的parted分区" class="headerlink" title="GNU的parted分区"></a>GNU的parted分区</h1><p><code>parted 设备 [命令 [参数] ]</code></p>
<p>详细：<code>man parted</code></p>
<hr>
<h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><p><code>tar -jcv 文件/目录 [-C 文件存放目录]</code>添加压缩文件</p>
<hr>
<h1 id="命令行模式的shell"><a href="#命令行模式的shell" class="headerlink" title="命令行模式的shell"></a>命令行模式的shell</h1><p>shell是所有Linux通用的</p>
<p>由于内核是受保护区域，需要通过shell与内核沟通</p>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p><code>locale -a</code>查看支持的编码</p>
<p>打开<code>/etc/locale.conf</code>可以设置编码格式</p>
<h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p><code>ulimit [选项] [配额]</code></p>
<h2 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h2><p><code>alias 别名=‘命令’</code>设置命令别名</p>
<p><code>alias</code>查看所有被取别名的命令</p>
<p><code>unalias 别名</code>删除命令别名</p>
<h2 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h2><p><code>history [显示数量] [选项]</code></p>
<p><code>! [第几条命令]</code></p>
<p><code>!!</code>执行上一条命令</p>
<p><code>!str</code>执行以str开头的命令</p>
<p>命令记录文件存放在<code>~/.bash_history</code></p>
<h2 id="bash登陆欢迎界面"><a href="#bash登陆欢迎界面" class="headerlink" title="bash登陆欢迎界面"></a>bash登陆欢迎界面</h2><p>在<code>/etc/issue</code></p>
<h2 id="锁定与解锁"><a href="#锁定与解锁" class="headerlink" title="锁定与解锁"></a>锁定与解锁</h2><blockquote>
<p>ctrl+s锁定<br>ctrl+q解锁</p>
</blockquote>
<h1 id="数据流重定向"><a href="#数据流重定向" class="headerlink" title="数据流重定向"></a>数据流重定向</h1><blockquote>
<p><code>&lt;</code>覆盖式输入，<code>&lt;&lt;</code>续写式输入</p>
</blockquote>
<p>标准输入流：<code>&lt;</code>或<code>&lt;&lt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#追加输入</span><br><span class="line">cat &gt;&gt; file &lt;&lt; 文件/&quot;&quot;</span><br><span class="line">#输入追加内容，按ctrl+d结束输入</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><code>&gt;</code>覆盖式输出，<code>&gt;&gt;</code>续写式输出</p>
</blockquote>
<p>标准输出流：<code>&gt;</code>或<code>&gt;&gt;</code><br>多个文件同时输出：<code>&amp;&gt;</code>或<code>&amp;&gt;&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#将ll输出的内容，输出到file里</span><br><span class="line">ll / &gt;&gt; file</span><br><span class="line"></span><br><span class="line">#多个ll同时输入到file里</span><br><span class="line">ll / /home &gt;&gt; file</span><br><span class="line"></span><br><span class="line">#创建一个文件</span><br><span class="line">cat &gt;&gt; 文件名</span><br><span class="line">#输入内容，按ctrl+d结束输入</span><br></pre></td></tr></table></figure>

<p>标准错误输出流：<code>2</code>或<code>2&gt;</code>或<code>2&gt;&gt;</code></p>
<h2 id="命令执行的判断根据"><a href="#命令执行的判断根据" class="headerlink" title="命令执行的判断根据"></a>命令执行的判断根据</h2><p><code>;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#;为语句结束符，执行完ll /后执行ll /home</span><br><span class="line">ll /; ll /home</span><br></pre></td></tr></table></figure>

<p><code>&amp;&amp;</code>与<code>||</code>或，判断符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#两个为true则执行ll /usr</span><br><span class="line">ll / &amp;&amp; ll /home ll /usr</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#其中一个ture就执行ll /usr</span><br><span class="line">ll / || ll /home ll /usr</span><br></pre></td></tr></table></figure>

<h2 id="选取命令"><a href="#选取命令" class="headerlink" title="选取命令"></a>选取命令</h2><p><code>cut [选项]</code></p>
<p><code>grep [选项] 查找字符</code></p>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><code>sort [选项] [file or stdin]</code>排序</p>
<p><code>uniq [选项]</code>排序完后，将重复的数据仅列出一个显示</p>
<p><code>wc [选项]</code>查看文件有多少字，多少行，多少字符</p>
<h2 id="双向重定向"><a href="#双向重定向" class="headerlink" title="双向重定向"></a>双向重定向</h2><p>同时将数据流分送到文件与屏幕（在屏幕输出一次，并写入到文件）</p>
<p><code>tee -a file</code> <code>a</code>追加到file</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#将ll /追加到file，并在屏幕输出追加内容</span><br><span class="line">ll / | tee -a file | more</span><br></pre></td></tr></table></figure>

<h2 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h2><h3 id="tr删除或替换一段文字"><a href="#tr删除或替换一段文字" class="headerlink" title="tr删除或替换一段文字"></a>tr删除或替换一段文字</h3><p><code>tr [ds] SET1 ...</code>将SET1替换成…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#将ll /输出的内容，小写全部替换成大写</span><br><span class="line">ll / | tr &apos;[a-z]&apos; &apos;[A-Z]&apos;</span><br><span class="line"></span><br><span class="line">#将a.txt文件输出的信息中，将root给删除</span><br><span class="line">cat a.txt | tr -d &apos;root&apos;</span><br></pre></td></tr></table></figure>

<h3 id="col将其他按键替换成空格"><a href="#col将其他按键替换成空格" class="headerlink" title="col将其他按键替换成空格"></a>col将其他按键替换成空格</h3><p><code>col [-xb]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#将文件里的[tab]键，也就是^I的符号，替换成空格</span><br><span class="line">cat /etc/man_db.conf | col -x | cat -A | more</span><br></pre></td></tr></table></figure>

<h3 id="join处理多个文件中，相同的数据"><a href="#join处理多个文件中，相同的数据" class="headerlink" title="join处理多个文件中，相同的数据"></a>join处理多个文件中，相同的数据</h3><p>使用前需要排序</p>
<p><code>join [选项] file file2</code></p>
<h3 id="paste将数据相同的行粘在一起，并以-tab-键隔开"><a href="#paste将数据相同的行粘在一起，并以-tab-键隔开" class="headerlink" title="paste将数据相同的行粘在一起，并以[tab]键隔开"></a>paste将数据相同的行粘在一起，并以[tab]键隔开</h3><p><code>paste [-d] file file2</code></p>
<h3 id="expand自动将tab转成空格"><a href="#expand自动将tab转成空格" class="headerlink" title="expand自动将tab转成空格"></a>expand自动将tab转成空格</h3><p><code>expand [-t] file</code></p>
<h2 id="划分split"><a href="#划分split" class="headerlink" title="划分split"></a>划分split</h2><p>将一个大文件，分成多个小文件</p>
<p><code>split [-bl] file PREFIX</code> <code>b</code>划分成的文件大小，可加单位例如b,k,m等<code>l</code>以行数进行划分</p>
<h2 id="参数代换"><a href="#参数代换" class="headerlink" title="参数代换"></a>参数代换</h2><p>为命令提供标准输入</p>
<p>参数某个命令的参数</p>
<p><code>xargs [参数] command</code></p>
<hr>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>条件正确则表达的式子</p>
<p><img src="regx.png" alt></p>
<p><a href="https://www.runoob.com/regexp/regexp-syntax.html" target="_blank" rel="noopener"><strong>详细</strong></a></p>
<h2 id="配合grep使用正则表达式"><a href="#配合grep使用正则表达式" class="headerlink" title="配合grep使用正则表达式"></a>配合grep使用正则表达式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查找所有a为开头的文件</span><br><span class="line">ll / | grep -n &apos;^a.*&apos;</span><br></pre></td></tr></table></figure>

<h2 id="sed将数据增删，替换，选取特点行等功能"><a href="#sed将数据增删，替换，选取特点行等功能" class="headerlink" title="sed将数据增删，替换，选取特点行等功能"></a>sed将数据增删，替换，选取特点行等功能</h2><p><code>seq [选项] [操作]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#列出行号，并删除2-5行</span><br><span class="line">nl /etc/passwd | sed &apos;2,5d&apos;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="文件格式化与相关处理"><a href="#文件格式化与相关处理" class="headerlink" title="文件格式化与相关处理"></a>文件格式化与相关处理</h1><h2 id="格式化打印printf"><a href="#格式化打印printf" class="headerlink" title="格式化打印printf"></a>格式化打印printf</h2><p><code>printf &#39;打印格式&#39; 实际内容</code></p>
<p><a href="https://www.runoob.com/linux/linux-shell-printf.html" target="_blank" rel="noopener"><strong>详细</strong></a></p>
<h2 id="awk数据处理工具"><a href="#awk数据处理工具" class="headerlink" title="awk数据处理工具"></a>awk数据处理工具</h2><p><code>awk &#39;条件类型1{操作1} 条件类型2{操作2}&#39; file</code></p>
<p><a href="https://www.runoob.com/linux/linux-comm-awk.html" target="_blank" rel="noopener"><strong>详细</strong></a></p>
<h2 id="文件比对工具"><a href="#文件比对工具" class="headerlink" title="文件比对工具"></a>文件比对工具</h2><p>用于比较两个不同版本的软件包，比较配置文件与原始文件的差异</p>
<p><code>diff [-bBi] 原始文件 目标文件</code>用于同一文件/目录的新旧版本差异</p>
<p><code>cmp [-l] file1 file2</code>用字节单位或二进制进行对比</p>
<hr>
<h1 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h1><ul>
<li><p>自动化管理</p>
</li>
<li><p>跟踪与管理系统</p>
</li>
<li><p>入侵检测</p>
</li>
<li><p>连续命令单一化</p>
</li>
<li><p>数据处理</p>
</li>
<li><p>跨平台支持</p>
</li>
</ul>
<h2 id="编写格式"><a href="#编写格式" class="headerlink" title="编写格式"></a>编写格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建一个shell脚本</span><br><span class="line">vim xx.sh</span><br><span class="line"></span><br><span class="line">符号#是注释</span><br><span class="line"></span><br><span class="line">#第一行需要备注，使用哪一种shell脚本</span><br><span class="line"></span><br><span class="line">#脚本的内容与功能介绍，版本信息，建立日期，历史记录，作者信息</span><br><span class="line"></span><br><span class="line">#注意环境变量的声明</span><br><span class="line"></span><br><span class="line">#设置重要的环境变量</span><br><span class="line"></span><br><span class="line">#内容</span><br></pre></td></tr></table></figure>

<p><strong>hellow word shell脚本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash #使用到的shell脚本</span><br><span class="line">#Program: #功能介绍</span><br><span class="line">#	this is &quot;hellow word&quot;</span><br><span class="line">#History: #时间</span><br><span class="line">#2019/10/12</span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin </span><br><span class="line">export PATH #主要环境变量声明</span><br><span class="line">echo -e &quot;hellow word \a\n&quot; #向终端输出字符串</span><br><span class="line">read -p &quot;请输入内容： &quot; 变量名 #键盘输入，内容输入到变量</span><br><span class="line">echo -e &quot;\n$&#123;变量名&#125;&quot;	#将键盘输入，将变量里的内容输出到屏幕</span><br><span class="line">exit 0 #结束程序，并返回0</span><br></pre></td></tr></table></figure>

<h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><p><code>sh hellow.sh</code>执行脚本</p>
<p><code>echo $(( 1 + 1 ))</code>进行整数算术运算</p>
<p><code>echo &quot;1.1*2.2&quot; | bc</code>进行小数算术运算</p>
<h2 id="子进程与父进程"><a href="#子进程与父进程" class="headerlink" title="子进程与父进程"></a>子进程与父进程</h2><p>未使用<code>source</code>写入父进程的话，自己写的写的脚本则会是子进程，直接调用<code>echo</code>是无法执行的</p>
<p><code>source xx.sh</code>将自己写的脚本写进父进程</p>
<p><img src="source.jpg" alt></p>
<h2 id="test测试功能"><a href="#test测试功能" class="headerlink" title="test测试功能"></a>test测试功能</h2><p><code>test [选项]</code></p>
<p><strong>判断文件是否存在，如果存在则输出</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/12</span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">判断是否真的有输入字符</span><br><span class="line">read -p &quot;输入文件名: &quot; filename</span><br><span class="line">test -z $&#123;filename&#125; &amp;&amp; echo &quot;请输入文件名&quot; &amp;&amp; exit 0</span><br><span class="line"></span><br><span class="line">#判断文件是否存在</span><br><span class="line">test ! -e $&#123;filename&#125; &amp;&amp; echo &quot;文件 `$&#123;filename&#125;` 不存在&quot; &amp;&amp; exit 0</span><br><span class="line"></span><br><span class="line">#判断文件类型与属性</span><br><span class="line">test -f $&#123;filename&#125; &amp;&amp; filetype=&quot;regulare file&quot; #是否为文件，是否存在</span><br><span class="line">test -d $&#123;filename&#125; &amp;&amp; filetype=&quot;directory&quot; #是否为目录，是否存在</span><br><span class="line">test -r $&#123;filename&#125; &amp;&amp; perm=&quot;readble&quot; #读权限</span><br><span class="line">test -w $&#123;filename&#125; &amp;&amp; perm=&quot;$&#123;perm&#125; writable&quot; #写权限</span><br><span class="line">test -x $&#123;filename&#125; &amp;&amp; perm=&quot;$&#123;perm&#125; executable&quot; #可执行权限</span><br><span class="line"></span><br><span class="line">#输出信息</span><br><span class="line">echo &quot;文件名: $&#123;filename&#125; 的类型是 $&#123;filetype&#125;&quot;</span><br><span class="line">echo &quot;可执行的权限: $&#123;perm&#125;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="使用-进行数据判断"><a href="#使用-进行数据判断" class="headerlink" title="使用 [] 进行数据判断"></a>使用 [] 进行数据判断</h2><p><strong>让用户输入y/n的程序，输入其他则输出一个其他的提示信息</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/13</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">#提示输入</span><br><span class="line">read -p &quot;please input y/n: &quot; yn</span><br><span class="line"></span><br><span class="line">#判断输入</span><br><span class="line">#-o是或者的意思，用来连接两个判断</span><br><span class="line">#y/n不区分大小写</span><br><span class="line">[ &quot;$&#123;yn&#125;&quot; == &quot;Y&quot; -o &quot;$&#123;yn&#125;&quot; == &quot;y&quot; ] &amp;&amp; echo &quot;ok!&quot; &amp;&amp; exit 0</span><br><span class="line">[ &quot;$&#123;yn&#125;&quot; == &quot;N&quot; -o &quot;$&#123;yn&#125;&quot; == &quot;n&quot; ] &amp;&amp; echo &quot;no!&quot; &amp;&amp; exit 0</span><br><span class="line"></span><br><span class="line">#y/n以外的其他字符</span><br><span class="line">echo &quot;???&quot; &amp;&amp; exit 0</span><br></pre></td></tr></table></figure>

<h2 id="shell的默认变量"><a href="#shell的默认变量" class="headerlink" title="shell的默认变量"></a>shell的默认变量</h2><ul>
<li><p><code>$0</code>执行的脚本文件名</p>
</li>
<li><p><code>$#</code>参数个数</p>
</li>
<li><p><code>$@</code>每个变量都是独立的，用””括起来</p>
</li>
<li><p><code>$*</code>每个变量用分隔符分隔，默认是空格</p>
</li>
</ul>
<p><img src="shell%E5%8F%82%E6%95%B0.png" alt></p>
<p><strong>输出程序的文件名，参数数量，参数小于2则输出提示信息，输出全部参数，输出第一个和第二个参数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/13</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">#输出文件名</span><br><span class="line">echo &quot;The script name is        ==&gt; $&#123;0&#125;&quot;</span><br><span class="line"></span><br><span class="line">#输出参数数量</span><br><span class="line">echo &quot;Total parameter number is ==&gt; $#&quot;</span><br><span class="line"></span><br><span class="line">#判断参数数量，-lt 2表示，$#参数个数小于2</span><br><span class="line">[ &quot;$#&quot; -lt 2 ] &amp;&amp; echo &quot;THe number of parameter is lee than 2. Stop here.&quot; &amp;&amp; exit 0</span><br><span class="line"></span><br><span class="line">#输出每个参数</span><br><span class="line">echo &quot;Your whole parameter is   ==&gt; &apos;$@&apos;&quot; </span><br><span class="line"></span><br><span class="line">#输出第一个参数</span><br><span class="line">echo &quot;The 1st parameter         ==&gt; $&#123;1&#125;&quot;</span><br><span class="line"></span><br><span class="line">#输出第二个参数</span><br><span class="line">echo &quot;The 2st parameter         ==&gt; $&#123;2&#125;&quot;</span><br><span class="line"></span><br><span class="line">#如果传入了更多的参数，也只会输出前两个参数，因为这里只输出两个参数</span><br></pre></td></tr></table></figure>

<h2 id="参数号码偏移"><a href="#参数号码偏移" class="headerlink" title="参数号码偏移"></a>参数号码偏移</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/13</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">echo &quot;number    ==&gt; $#&quot;</span><br><span class="line">echo &quot;parameter ==&gt; &apos;$@&apos;&quot;</span><br><span class="line"></span><br><span class="line">#偏移2个参数</span><br><span class="line">shift 2</span><br><span class="line"></span><br><span class="line">echo &quot;number    ==&gt; $#&quot;</span><br><span class="line">echo &quot;parameter ==&gt; &apos;$@&apos;&quot;</span><br></pre></td></tr></table></figure>

<p><img src="%E5%81%8F%E7%A7%BB.png" alt></p>
<h2 id="if-than判断式"><a href="#if-than判断式" class="headerlink" title="if than判断式"></a>if than判断式</h2><p>感觉和判断预处理宏差不多</p>
<p>有成立结果的都要加上then</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ 判断 ]; then</span><br><span class="line"></span><br><span class="line">elif [ 判断 ]; then</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">fi #结束if</span><br></pre></td></tr></table></figure>

<p><strong>提示输入hellow</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#       2019/10/14</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">#第一个参数输入hellow则true</span><br><span class="line">if [ &quot;$&#123;1&#125;&quot; == &quot;hellow&quot; ]; then</span><br><span class="line">        echo &quot;hellow, how are you?&quot;</span><br><span class="line">		</span><br><span class="line">#输入空字符返回错误信息</span><br><span class="line">elif [ &quot;$&#123;1&#125;&quot; == &quot;&quot; ]; then</span><br><span class="line">        echo &quot;$&#123;0&#125; someword&quot;</span><br><span class="line">		</span><br><span class="line">#输入了其他字符，显示错误信息</span><br><span class="line">else</span><br><span class="line">        echo &quot;please input \&quot;hellow \&quot;&quot;</span><br><span class="line">		</span><br><span class="line">#结束if</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="查询主机的网络端口"><a href="#查询主机的网络端口" class="headerlink" title="查询主机的网络端口"></a>查询主机的网络端口</h2><p><code>netstat -tuln</code>获取主机启动的服务，并获取信息</p>
<p><img src="netstat.png" alt></p>
<ul>
<li><p>Proto封包格式</p>
</li>
<li><p>Local Address本地IP:端口</p>
</li>
<li><p>Foreign Address远程IP:端口</p>
</li>
<li><p>State是否监听</p>
</li>
</ul>
<p><strong>常见的端口与相关网络服务</strong></p>
<ul>
<li><p>80: WWW</p>
</li>
<li><p>22: ssh</p>
</li>
<li><p>21： ftp</p>
</li>
<li><p>25： mail</p>
</li>
<li><p>111: RPC(远程过程调用)</p>
</li>
<li><p>631: CUPS(打印服务功能)</p>
</li>
</ul>
<p><strong>通过netstat检测网络服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#       2019/10/14</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">#测试结果存放到文件net.txt（当文件不存在则自动创建），testfile是一个变量名，</span><br><span class="line">testfile=/my_test/shell_script/net.txt</span><br><span class="line"></span><br><span class="line">#将netstat -tuln的结果输入到变量testfile</span><br><span class="line">netstat -tuln &gt;&gt; $&#123;testfile&#125;</span><br><span class="line"></span><br><span class="line">#testing是一个变量名，存储在变量testfile，grep &quot;:80 &quot;的结果</span><br><span class="line">testing=$(grep &quot;:80 &quot; $&#123;testfile&#125;)</span><br><span class="line"></span><br><span class="line">#变量testing不是空字符串</span><br><span class="line">if [ &quot;$&#123;testing&#125;&quot; != &quot;&quot; ];</span><br><span class="line">		#终端输出字符串</span><br><span class="line">        echo &quot;www&quot;</span><br><span class="line">#结束if</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">testing=$(grep &quot;:22 &quot; $&#123;testfile&#125;)</span><br><span class="line">if [ &quot;$&#123;testing&#125;&quot; != &quot;&quot; ]; then</span><br><span class="line">        echo &quot;ssh&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">testing=$(grep &quot;:21 &quot; $&#123;testfile&#125;)</span><br><span class="line">if [ &quot;$&#123;testing&#125;&quot; != &quot;&quot; ]; then</span><br><span class="line">        echo &quot;ftp&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">testing=$(grep &quot;:25 &quot; $&#123;testfile&#125;)</span><br><span class="line">if [ &quot;$&#123;testing&#125;&quot; != &quot;&quot; ]; then</span><br><span class="line">        echo &quot;mail&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="求剩余时间的练习"><a href="#求剩余时间的练习" class="headerlink" title="求剩余时间的练习"></a>求剩余时间的练习</h2><p><code>declare</code>用于声明shell变量</p>
<p><a href="https://www.runoob.com/linux/linux-comm-declare.html" target="_blank" rel="noopener"><strong>详细</strong></a></p>
<p>双小括号 <code>(( ))</code></p>
<blockquote>
<p>1.整数扩展。这种扩展计算是整数型的计算，不支持浮点型。((exp))结构扩展并计算一个算术表达式的值，<br>如果表达式的结果为0，那么返回的退出状态码为1，或者 是”假”，而一个非零值的表达式所返回的退出<br>状态码将为0，或者是”true”。若是逻辑判断，表达式exp为真则为1,假则为0。</p>
<p>2.只要括号中的运算符、表达式符合C语言运算规则，都可用在$((exp))中，甚至是三目运算符。作不同进<br>位(如二进制、八进制、十六进制)运算时，输出结果全都自动转化成了十进制。如：echo $((16#5f)) 结果<br>为95 (16进位转十进制)</p>
<p>3.单纯用 (( )) 也可重定义变量值，比如 a=5; ((a++)) 可将 $a 重定义为6</p>
<p>4.常用于算术运算比较，双括号中的变量可以不使用$符号前缀。括号内支持多个表达式用逗号分开。 只要<br>括号中的表达式符合C语言运算规则,比如可以直接使用for((i=0;i&lt;5;i++)), 如果不使用双括号, 则<br>为for i in `seq 0 4`或者for i in {0..4}。再如可以直接使用if (($i&lt;5)), 如果不使用双括<br>号, 则为if [ $i -lt 5 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/15</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">read -p &quot;YYYMMDD ex&gt;20191015 &quot; date2</span><br><span class="line"></span><br><span class="line">#测试输入内容是否正确，grep &apos;[0-9]\&#123;8\&#125;查看是否有8个数字</span><br><span class="line">date_d=$(echo $&#123;date2&#125; | grep &apos;[0-9]\&#123;8\&#125;&apos;)</span><br><span class="line"></span><br><span class="line">if [ &quot;$&#123;date_d&#125;&quot; == &quot;&quot; ]; then</span><br><span class="line">        echo &quot;input error&quot;</span><br><span class="line">        exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#计算日期</span><br><span class="line">declare -i date_dem=$(date --date=&quot;$&#123;date2&#125;&quot; +%s) #输入未来时间，获取秒数</span><br><span class="line">declare -i date_now=$(date +%s) #现在日期秒数</span><br><span class="line">declare -i date_total_s=$(($&#123;date_dem&#125;-$&#123;date_now&#125;)) #剩余秒数统计</span><br><span class="line">#一天的总秒数（24h*60m*60s）</span><br><span class="line">declare -i date_d=$(($&#123;date_total_s&#125;/60/60/24)) #转为日数</span><br><span class="line"></span><br><span class="line">#判断是否到达时间（已经没有剩余的时间）</span><br><span class="line">if [ &quot;$&#123;date_total_s&#125;&quot; -lt &quot;0&quot; ]; then</span><br><span class="line">        echo &quot;: &quot;$((-1*$&#123;date_d&#125;))&quot; ago &quot;</span><br><span class="line">else	#60/60/24为一天的总秒数（24h*60m*60s）</span><br><span class="line">        declare -i date_h=$(($(($&#123;date_total_s&#125;-$&#123;date_d&#125;*60*60*24))/60/60))</span><br><span class="line">        echo &quot;$&#123;date_d&#125; days and $&#123;date_h&#125; hours&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="case判断"><a href="#case判断" class="headerlink" title="case判断"></a>case判断</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case $变量名 in</span><br><span class="line">	&quot;变量内容&quot;)</span><br><span class="line">	#内容</span><br><span class="line">	;;</span><br><span class="line">	</span><br><span class="line">	&quot;变量内容&quot;)</span><br><span class="line">	#内容</span><br><span class="line">	;;</span><br><span class="line">	</span><br><span class="line">	*) #c++的switch里的default</span><br><span class="line">	#内容</span><br><span class="line">	;;</span><br><span class="line">#结束case</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p><strong>例子</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/15</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">#判断参数2</span><br><span class="line">case $&#123;1&#125; in</span><br><span class="line">        &quot;h&quot;)</span><br><span class="line">                echo &quot;hellow&quot;</span><br><span class="line">                ;;</span><br><span class="line">        &quot;&quot;)</span><br><span class="line">                echo &quot;please input&quot;</span><br><span class="line">                ;;</span><br><span class="line">        *)#通配符</span><br><span class="line">                echo &quot;???&quot;</span><br><span class="line">                ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function 函数名()&#123;</span><br><span class="line">	#功能</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#使用函数</span><br><span class="line">函数名;</span><br></pre></td></tr></table></figure>

<p><strong>例子</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/15</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">function print()&#123;</span><br><span class="line">        echo &quot;hellow word.&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#内置变量版</span><br><span class="line">function print2()&#123;</span><br><span class="line">        echo &quot;$&#123;1&#125;&quot; #输出函数参数，也就是输出1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case $&#123;1&#125; in</span><br><span class="line">        &quot;h&quot;)</span><br><span class="line">				#使用函数</span><br><span class="line">                print;</span><br><span class="line">                ;;</span><br><span class="line">		</span><br><span class="line">		&quot;one&quot;)</span><br><span class="line">				#使用内置变量版函数</span><br><span class="line">				print2 1; #1是这个函数的参数</span><br><span class="line">				;;</span><br><span class="line"></span><br><span class="line">        *)</span><br><span class="line">                echo &quot;no function.&quot;</span><br><span class="line">                ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p><img src="function.png" alt></p>
<h2 id="循环-loop"><a href="#循环-loop" class="headerlink" title="循环(loop)"></a>循环(loop)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while [表达式]</span><br><span class="line">#循环的开始</span><br><span class="line">do</span><br><span class="line">	#功能</span><br><span class="line">#循环的结束</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><strong>当表达式成立则停止循环</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">until [表达式]</span><br><span class="line">do</span><br><span class="line">	#功能</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><strong>求1+到10的数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/15</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">i=0</span><br><span class="line">sum=0</span><br><span class="line">while [ &quot;$&#123;i&#125;&quot; != 10  ]</span><br><span class="line">do</span><br><span class="line">        i=$(( $i+1 ))</span><br><span class="line">        sum=$(( $sum+$i ))</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;sum = $sum&quot;</span><br></pre></td></tr></table></figure>

<h2 id="for-do-done（固定循环）"><a href="#for-do-done（固定循环）" class="headerlink" title="for do done（固定循环）"></a>for do done（固定循环）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#第一次循环$var为c1，第二次循环$var为c2，以此类推</span><br><span class="line">for var in c1 c2 c3 ...</span><br><span class="line">do</span><br><span class="line">	#功能</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><strong>例子</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/15</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">for num in a1 b2 c3</span><br><span class="line">do</span><br><span class="line">	echo -e &quot;$&#123;num&#125;\n&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><strong>输出所有系统账户</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/15</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line">#cut -d &apos;:&apos; -f1，:作为分割符，取出1段字符串</span><br><span class="line">users=$(cut -d &apos;:&apos; -f1 /etc/passwd)</span><br><span class="line">for username in $&#123;users&#125;</span><br><span class="line">do</span><br><span class="line">		#输出所有账户</span><br><span class="line">        id $&#123;username&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h3 id="数值处理版本"><a href="#数值处理版本" class="headerlink" title="数值处理版本"></a>数值处理版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (( 初始值；限制值; 赋值运算 ))</span><br><span class="line">do</span><br><span class="line">	#功能</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><strong>输出1-10</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/15</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">for (( i=0; i != 11; i=i+1 ))</span><br><span class="line">do</span><br><span class="line">        echo -e &quot;$i\n&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h2 id="输出一个范围的数字或字母"><a href="#输出一个范围的数字或字母" class="headerlink" title="输出一个范围的数字或字母"></a>输出一个范围的数字或字母</h2><p><code>$(seq 1 10)</code>输出1-10的数字</p>
<p><code>{1..10}</code>输出1-10的数字</p>
<p><code>{a..z}</code>输出a-z的字母</p>
<h2 id="搭配随机数与数组"><a href="#搭配随机数与数组" class="headerlink" title="搭配随机数与数组"></a>搭配随机数与数组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Program:</span><br><span class="line">#       this is test</span><br><span class="line">#History:</span><br><span class="line">#2019/10/15</span><br><span class="line"></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">n[1]=&quot;a&quot;</span><br><span class="line">n[2]=&quot;b&quot;</span><br><span class="line">n[3]=&quot;c&quot;</span><br><span class="line">num=3</span><br><span class="line"></span><br><span class="line">#生产随机数索引</span><br><span class="line">c=$(( $&#123;RANDOM&#125;*$&#123;num&#125;/32767+1 ))</span><br><span class="line">echo &quot;: $&#123;n[$&#123;c&#125;]&#125;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="shell脚本的跟踪与调试"><a href="#shell脚本的跟踪与调试" class="headerlink" title="shell脚本的跟踪与调试"></a>shell脚本的跟踪与调试</h2><p><code>sh [-nvx] xx.sh</code> <code>n</code>不执行脚本，仅查询语法的文件<code>v</code>执行脚本前，将脚本内容输出到屏幕<code>x</code>将使用到的脚本<br>输出到屏幕</p>
<hr>
<h1 id="账户管理"><a href="#账户管理" class="headerlink" title="账户管理"></a>账户管理</h1><p>ID与账户保存在<code>/etc/passwd</code></p>
<p>组保存在<code>/etc/group</code></p>
<p><code>/etc/shadow</code>存储用户的密码文件</p>
<p><code>id 账户名</code>查看该账户的UID，GID，groups</p>
<ul>
<li><p>UID：用户ID</p>
</li>
<li><p>GID：用户组ID</p>
</li>
<li><p>groups：组 </p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">ID范围</th>
<th align="left">ID特性</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">root</td>
</tr>
<tr>
<td align="left">1-999</td>
<td align="left">系统账户，1-200 Linux自行建立账户 201-999 若用户有系统账户需求，可以用的账户UID</td>
</tr>
<tr>
<td align="left">1000-60000</td>
<td align="left">可登陆用户</td>
</tr>
</tbody></table>
<ul>
<li>添加用户</li>
</ul>
<p><code>useradd [-u 你的UID] [-g 你的组名] 用户名</code>创建用户</p>
<p><code>passwd [选项] 用户</code>为新用户添加密码</p>
<p><code>passwd 密码</code>修改密码</p>
<ul>
<li>chage拥有详细的显示密码参数的功能</li>
</ul>
<p><code>chage [选项] 用户名</code></p>
<ul>
<li>usermod微调用户参数</li>
</ul>
<p><code>usermod [选项] 用户名</code></p>
<ul>
<li>删除用户</li>
</ul>
<p><code>userdel -r 用户名</code></p>
<ul>
<li>查询UID/GID</li>
</ul>
<p><code>id 用户名</code></p>
<ul>
<li>创建用户组</li>
</ul>
<p><code>groupadd [-g gid] 组名</code></p>
<ul>
<li>修改组参数</li>
</ul>
<p><code>groupmod 组名</code></p>
<ul>
<li>删除组</li>
</ul>
<p><code>groupdel 组名</code></p>
<ul>
<li>组管理员</li>
</ul>
<p><code>gpasswd 组名</code></p>
<hr>
<h1 id="主机的详细权限规划，ACL的使用"><a href="#主机的详细权限规划，ACL的使用" class="headerlink" title="主机的详细权限规划，ACL的使用"></a>主机的详细权限规划，ACL的使用</h1><p>ACL访问控制列表，主要针对用户，组，默认属性</p>
<p>主要使用<code>getfacl</code>与<code>setfacl</code>这两命令</p>
<hr>
<h1 id="用户切换"><a href="#用户切换" class="headerlink" title="用户切换"></a>用户切换</h1><p><code>su</code>切换到root</p>
<p><code>su 用户名</code>切换到指定用户</p>
<p><code>sudo 命令</code>使用管理员权限执行该命令（需要通过管理员的审核，审核文件在/etc/sudoers）</p>
<hr>
<h1 id="PAM用户验证"><a href="#PAM用户验证" class="headerlink" title="PAM用户验证"></a>PAM用户验证</h1><hr>
<h1 id="用户信息传递"><a href="#用户信息传递" class="headerlink" title="用户信息传递"></a>用户信息传递</h1><p><code>w</code>目前在该设备登陆的用户</p>
<p><code>lastlog</code>最近登陆用户的时间</p>
<h2 id="用户对谈"><a href="#用户对谈" class="headerlink" title="用户对谈"></a>用户对谈</h2><p><code>write</code>对话信息发送</p>
<p><code>mesg</code>不接收任何人的信息</p>
<p><code>wall</code>广播</p>
<h2 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h2><p><code>mail</code></p>
<hr>
<h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><p>程序：通常为二进制程序，以物理文件的形式存储</p>
<p>进程：程序被触发，执行者的权限与属性会被加载在内存中，操作系统会给予该内存一个PID</p>
<p><img src="%E8%BF%9B%E7%A8%8B.jpg" alt></p>
<p>父进程与子进程，一般子进程的PPID和父进程的PID是一样的</p>
<p><img src="%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B.png" alt></p>
<p><img src="%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B2.png" alt></p>
<p><code>ctrl+z</code>当目前进程丢进后台【暂停】</p>
<p><code>kill(fg) % n</code>删除（返回）指定暂停的程序,通常配合ps和pstree</p>
<p><code>jobs</code>查看后排任务状态</p>
<p><code>bg % 1</code>程序在后台运行</p>
<p><code>nohup</code>及时设备注销后，程序依然运行</p>
<p><code>ps</code>查看静态进程</p>
<p><code>top</code>查看动态进程</p>
<p><code>pstree</code>子进程砍不掉时，获取其父进程</p>
<table>
<thead>
<tr>
<th align="left">代号</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">启动被终止的程序</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">强制终止程序，未完成部分以一个文件的形式保留下来</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left">正常方式终止程序</td>
</tr>
</tbody></table>
<p><code>killall</code>删除服务</p>
<p><code>nice</code>调整程序优先级</p>
<p><code>renice</code>修改已存在程序优先级</p>
<p><code>free</code>查看内存使用情况</p>
<p><code>uname</code>查看系统与内核信息</p>
<p><code>uptime</code>系统启动时间与任务负载</p>
<p><code>netstat</code>追踪网络或socket文件，被用于网络监控方面</p>
<p><code>dmesg</code>内核产生的信息</p>
<p><code>vmstat</code>系统资源变化</p>
<p><code>fuser</code>找出在使用该文件的进程</p>
<p><code>losf</code>列出被进程使用的文件名</p>
<p><code>pidof</code>找出正在执行程序的PID</p>
<hr>
<h1 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h1><p>安全强化版Linux</p>
<p><code>安全上下文</code></p>
<blockquote>
<p>身份识别（用户是否受限制）<br>类型（判断主程序是否可以读取程序）<br>角色（数据属于进程，文件资源代表用户）</p>
</blockquote>
<p><img src="selinux%E6%B5%81%E7%A8%8B.png" alt></p>
<p><code>getsebool</code>查看系统规则是否开启</p>
<p><code>setsebool [-P] 规则名 [0|1]</code>修改规则</p>
<p><code>chcon</code>手动修改文件的SELinux类型</p>
<p><code>restorecon</code>恢复文件的SELinux</p>
<p><code>semanage</code>默认目录的安全上下文查询与修改</p>
<h2 id="vsftpd默认FTP服务器软件"><a href="#vsftpd默认FTP服务器软件" class="headerlink" title="vsftpd默认FTP服务器软件"></a>vsftpd默认FTP服务器软件</h2><p>终端输入<code>vsftpd</code>下载软件</p>
<p><strong>给用户下载的FTP文件会放在<code>/var/fpt/pub目录</code></strong></p>
<p><code>curl</code>简单的终端浏览器</p>
<hr>
<h1 id="daemon与服务"><a href="#daemon与服务" class="headerlink" title="daemon与服务"></a>daemon与服务</h1><p>daemon与服务可以视为相同的东西</p>
<p>查看进程时，{xxx}d通常是deamon的进程</p>
<p>所有的服务启动脚本放置在<code>/etc/init.d</code>目录</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">start</td>
<td align="left">启动</td>
</tr>
<tr>
<td align="left">stop</td>
<td align="left">关闭</td>
</tr>
<tr>
<td align="left">restart</td>
<td align="left">重启</td>
</tr>
<tr>
<td align="left">status</td>
<td align="left">查看状态</td>
</tr>
</tbody></table>
<p><code>/etc/init.d/deamon 命令</code></p>
<p><strong>服务启动分类</strong></p>
<ul>
<li><p>独立启动，服务常驻在内存，反应快</p>
</li>
<li><p>超级守护进程，由特殊的xinetd或inetd提供socket对应或端口对应的管理</p>
</li>
</ul>
<h2 id="通过systemctl管理服务"><a href="#通过systemctl管理服务" class="headerlink" title="通过systemctl管理服务"></a>通过systemctl管理服务</h2><p><code>systemctl [command] [unit]</code></p>
<hr>
<h1 id="查找指定进程与强制结束指定进程"><a href="#查找指定进程与强制结束指定进程" class="headerlink" title="查找指定进程与强制结束指定进程"></a>查找指定进程与强制结束指定进程</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查找指定进程</span><br><span class="line">pidof name</span><br><span class="line"></span><br><span class="line">#强制结束进程</span><br><span class="line">kill -s 9 pid</span><br></pre></td></tr></table></figure>

<p>-s 9 制定了传递给进程的信号是９，即强制、尽快终止进程|<br>-|-</p>
<hr>
<h1 id="命令行浏览网页"><a href="#命令行浏览网页" class="headerlink" title="命令行浏览网页"></a>命令行浏览网页</h1><ul>
<li><strong>curl</strong><blockquote>
<p>直接读取网站HTML代码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https://www.baidu.com/</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h1 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#重启后防火墙依然生效</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line">#开机禁用防火墙（永久禁用防火墙）</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="vim编辑器-1"><a href="#vim编辑器-1" class="headerlink" title="vim编辑器"></a>vim编辑器</h3><ul>
<li>显示行号: <code>set number</code></li>
</ul>
<hr>
<h3 id="睡眠命令"><a href="#睡眠命令" class="headerlink" title="睡眠命令"></a>睡眠命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sleep 5s #睡眠5秒</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="逐行比较文件diff"><a href="#逐行比较文件diff" class="headerlink" title="逐行比较文件diff"></a>逐行比较文件diff</h3><hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>cent8联网并安装GUI</title>
    <url>/2019/10/02/cent8%E8%81%94%E7%BD%91%E5%B9%B6%E5%AE%89%E8%A3%85GUI/</url>
    <content><![CDATA[<img src="/2019/10/02/cent8联网并安装GUI/封面.jpg">

<p>基于<code>cent8</code>最小化安装</p>
<a id="more"></a>

<h1 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens32</span><br></pre></td></tr></table></figure>

<p><code>ifcfg-ens32</code>文件后面的数字可能会不一样，实际情况按你自己<code>network-scripts</code>目录下<br>的<code>ifcfg-ensXX</code>文件为主</p>
<ul>
<li>修改<code>NOBOOT</code>选项为<code>yes</code></li>
</ul>
<p><img src="ensxx.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmcli c reload	//重启网卡</span><br></pre></td></tr></table></figure>

<h2 id="nmcli命令解释"><a href="#nmcli命令解释" class="headerlink" title="nmcli命令解释"></a>nmcli命令解释</h2><p><code>用法</code>nmcli [选项] 对象</p>
<table>
<thead>
<tr>
<th align="left"><code>选项</code></th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-o[verview]</td>
<td align="left">概览模式（隐藏默认值）</td>
</tr>
<tr>
<td align="left">-t[erse]</td>
<td align="left">简洁输出</td>
</tr>
<tr>
<td align="left">-p[retty]</td>
<td align="left">整齐输出</td>
</tr>
<tr>
<td align="left">-m[ode] tabular</td>
<td align="left">multiline</td>
</tr>
<tr>
<td align="left">-c[olors] auto</td>
<td align="left">yes</td>
</tr>
<tr>
<td align="left">-e[scape] yes</td>
<td align="left">no</td>
</tr>
<tr>
<td align="left">-a[sk]</td>
<td align="left">询问缺少的参数</td>
</tr>
<tr>
<td align="left">-s[how-secrets]</td>
<td align="left">允许显示密码</td>
</tr>
<tr>
<td align="left">-w[ait]</td>
<td align="left">为完成的操作设置超时等待时间</td>
</tr>
<tr>
<td align="left">-v[ersion]</td>
<td align="left">显示程序版本</td>
</tr>
<tr>
<td align="left">-h[elp]</td>
<td align="left">输出此帮助</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left"><code>对象</code></th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">对象：</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">g[eneral]</td>
<td align="left">网络管理器（NetworkManager）的常规状态和操作</td>
</tr>
<tr>
<td align="left">n[etworking]</td>
<td align="left">整体联网控制</td>
</tr>
<tr>
<td align="left">r[adio]</td>
<td align="left">网络管理器无线电开关</td>
</tr>
<tr>
<td align="left">c[onnection]</td>
<td align="left">网络管理器的连接</td>
</tr>
<tr>
<td align="left">d[evice]</td>
<td align="left">由网络管理器管理的设备</td>
</tr>
<tr>
<td align="left">a[gent]</td>
<td align="left">网络管理器的密钥（secret）代理或 polkit 代理</td>
</tr>
<tr>
<td align="left">m[onitor]</td>
<td align="left">监视网络管理器更改</td>
</tr>
</tbody></table>
<hr>
<h1 id="安装GUI"><a href="#安装GUI" class="headerlink" title="安装GUI"></a>安装GUI</h1><ul>
<li><p><strong>科普</strong></p>
<blockquote>
<p>install为安装一个软件<br>groupinstall为安装一组软件</p>
</blockquote>
</li>
<li><p>使用<code>yum group list</code>查看可以安装的软件组</p>
</li>
</ul>
<p><img src="GUI.png" alt></p>
<ul>
<li>安装GUI</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//-y的意义是遇到所有选择y/n的选项，都选择y</span><br><span class="line">yum -y groupinstall &quot;Server with GUI&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动GUI</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">startx</span><br></pre></td></tr></table></figure>

<ul>
<li>GUI与命令行的切换<blockquote>
<p>图形界面到命令行界面：<code>Ctrl+Alt+F2</code><br>命令行界面到图形界面：<code>Ctrl+Alt+F1</code></p>
</blockquote>
</li>
</ul>
<h2 id="可能会出现的异常"><a href="#可能会出现的异常" class="headerlink" title="可能会出现的异常"></a>可能会出现的异常</h2><p>错误：事务测试失败，需要安装两个rpm</p>
<p>解决：更新<code>rpm</code>?反正我是直接把有关rpm的全部安装，然后在安装GUI就成功了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install rpm*</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>在linux搭建c/c++编译环境</title>
    <url>/2019/10/02/%E5%9C%A8linux%E6%90%AD%E5%BB%BAc-c-%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<img src="/2019/10/02/在linux搭建c-c-编译环境/封面.jpg">

<p>基于<code>Cent8</code>虚拟机下，搭建<code>gcc/g++</code>，<code>gdb</code>并使用<code>vs code</code>进行c/c++程序的开发</p>
<a id="more"></a>


<details>
<summary>旧版</summary>

<h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><ul>
<li><strong>下载gcc/g++的依赖库（需要按顺序安装）</strong></li>
</ul>
<div class="tabs" id="步骤"><ul class="nav-tabs"><li class="tab active"><a href="#步骤-1">步骤 1</a></li><li class="tab"><a href="#步骤-2">步骤 2</a></li><li class="tab"><a href="#步骤-3">步骤 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="步骤-1"><p><a class="btn" href="https://mirrors.tuna.tsinghua.edu.cn/gnu/gmp/?C=M&O=D" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载gmp</a></p>
</div><div class="tab-pane" id="步骤-2"><p><a class="btn" href="https://mirrors.tuna.tsinghua.edu.cn/gnu/mpfr/" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载mpfr</a></p>
</div><div class="tab-pane" id="步骤-3"><p><a class="btn" href="https://mirrors.tuna.tsinghua.edu.cn/gnu/mpc/" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载mpc</a></p>
</div></div></div>

<ul>
<li><strong>gdb依赖库texinfo</strong></li>
</ul>
<a class="btn" href="https://mirrors.tuna.tsinghua.edu.cn/gnu/texinfo/?C=M&O=D" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载texinfo</a>

<ul>
<li><strong>下载gcc</strong></li>
</ul>
<blockquote>
<a class="btn" href="https://mirrors.tuna.tsinghua.edu.cn/gnu/gcc/?C=M&O=D" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载gcc</a>
</blockquote>
<ul>
<li><strong>下载gdb</strong></li>
</ul>
<blockquote>
<a class="btn" href="https://mirrors.tuna.tsinghua.edu.cn/gnu/gdb/?C=M&O=D" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载gdb</a>
</blockquote>
<ul>
<li><strong>下载vs code</strong></li>
</ul>
<blockquote>
<a class="btn" href="https://code.visualstudio.com/" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载vs code</a>
</blockquote>
<hr>
<h1 id="安装gcc依赖库"><a href="#安装gcc依赖库" class="headerlink" title="安装gcc依赖库"></a>安装gcc依赖库</h1><ul>
<li><p>安装<code>make</code>（有的话就不用安装了，使用<code>make -v</code>查看make版本）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install make</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装<code>m4</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install m4</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><code>安装依赖库之前需要使用yum安装gcc/g++</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure>

<p><img src="yumc-c++.png" alt></p>
<ul>
<li><p>安装<code>gmp</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/目录</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装<code>mpfr</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/目录 --with-gmp=/gmp目录</span><br><span class="line">make </span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装<code>mpc</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/目录 --with-gmp=/gmp目录 with-mpfr=/mpfr目录</span><br><span class="line">make </span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">//在末尾处添加自己的bin目录</span><br><span class="line">export LD_LIBRARY_PATH=/gmp/bin:/mpfr/bin:/mpc/bin:$LD_LIBRARY_PATH</span><br><span class="line">//刷新环境变量</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h1 id="安装gcc与gdb"><a href="#安装gcc与gdb" class="headerlink" title="安装gcc与gdb"></a>安装gcc与gdb</h1><h2 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/目录 --with-gmp=/gmp目录 with-mpfr=/mpfr目录 --with-mpc=/mpc目录</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p><code>在执行configure时，如果遇到错误</code><br>“I suspect your system does not have 32-bit development<br> libraries (libc and headers). If you have them, rerun configure with –enable-multilib.<br> If you do not have them, and want to build a 64-bit-only compiler, rerun configure with –disable-multilib”，<br> <span class="label default"> 表示系统不支持32位程序，这样在执行configure时需为它支持参数“--disable-multilib"</span></p>
<p>改成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/目录 --with-gmp=/gmp目录 with-mpfr=/mpfr目录 --with-mpc=/mpc目录 --disable-multilib</span><br></pre></td></tr></table></figure>

<p><code>在执行make时，如果遇到错误</code><br>“error while loadin g shared libraries: libmpfr.so.6: cannot open shared object<br>file: No such file or directory”</p>
<span class="label default"> /lib64目录缺少一个名为`libmpfr.so.6`的文件，把`mpfr/lib/libmpfr.so.6`复制到`/lib64`目录，</span>
<span class="label default"> 如果更高级的libmpfr则一并复制过去，并用ln链接指向低级的libmpfr</span>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//使用ln软链接</span><br><span class="line">ln -sf 被指向 指向</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<blockquote>
<p>ln -sf A B<br>结果为：B -&gt; A<br>B指向了A</p>
</blockquote>
<ul>
<li>配置环境变量<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">//末尾处添加</span><br><span class="line">export PATH=/gcc/bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH=/gcc/lib64:$LD_LIBRARY_PATH</span><br><span class="line">export MANPATH=/gcc/share/man:$MANPATH</span><br><span class="line">//刷新环境变量</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>编译命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//-std=指定c++版本，生成的编译文件的文件名</span><br><span class="line">g++ -g -std=c++17 xxx.cpp -o a.out</span><br><span class="line">//编译</span><br><span class="line">./a.out</span><br></pre></td></tr></table></figure>

<h2 id="安装gdb"><a href="#安装gdb" class="headerlink" title="安装gdb"></a>安装gdb</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/目录</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p><code>出现错误makeinfo: command not found</code></p>
<p>WARNING: ‘makeinfo’ is missing on your system.<br>You should only need it if you modified a ‘.texi’ file, or<br>any other file indirectly affecting the aspect of the manual.<br>You might want to install the Texinfo package:<br><a href="http://www.gnu.org/software/texinfo/" target="_blank" rel="noopener">http://www.gnu.org/software/texinfo/</a><br>The spurious makeinfo call might also be the consequence of<br>using a buggy ‘make’ (AIX, DU, IRIX), in which case you might<br>want to install GNU make<br>缺少makeinfo文件，需要安装texinfo，详细如上</p>
<hr>
<h1 id="安装并使用vs-code"><a href="#安装并使用vs-code" class="headerlink" title="安装并使用vs code"></a>安装并使用vs code</h1><p>直接解压即可使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar [选项] vscode -C 解压目录</span><br></pre></td></tr></table></figure>

<p>启动vs code</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo /vscode/bin/code --user-data-dir</span><br></pre></td></tr></table></figure>

<p><code>如果出现错误</code><br>error while loading shared libraries: libXss.so.1: cannot open shared object<br>file: No such file or directory<br>安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install libXScrnSaver</span><br></pre></td></tr></table></figure>

<p><strong>vs code安装c++语法</strong><br><img src="vsc.png" alt></p>
<p><strong>设置配置文件：</strong></p>
<blockquote>
<p>按F1输入<code>launch.json</code> -&gt; gdb -&gt; <code>debug配置文件</code><br>按F1输入<code>tasks</code> -&gt; <code>configure tasks</code> -&gt; <code>create</code> -&gt; <code>others</code>生成编<code>译配置文件</code></p>
</blockquote>
<p><strong>launch.json</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;(gdb) Launch&quot;,					//名字，随便起</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/a.out&quot;,	//debug当前目录下的a.out文件</span><br><span class="line">            &quot;args&quot;: [],	// 带参数main函数的参数（使用例子：&quot;args&quot;: [&quot;参数1&quot;,&quot;参数2&quot;]）</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: false,</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;build&quot;,				//生成编译文件，与tasks.json的&quot;label&quot;一样，名字也可以随便取</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;/GNU/gdb/bin/gdb&quot;  	//gdb路径</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>tasks.json</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;build&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;/GNU/gcc/bin/g++&quot;,		//g++目录</span><br><span class="line">            &quot;args&quot;:[							//生成编译文件的命令</span><br><span class="line">                &quot;-g&quot;,</span><br><span class="line">                &quot;-std=c++17&quot;,</span><br><span class="line">                &quot;main.cpp&quot;,</span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;a.out&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;group&quot;: &#123;</span><br><span class="line">                &quot;kind&quot;: &quot;build&quot;,</span><br><span class="line">                &quot;isDefault&quot;: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="include的查找"><a href="#include的查找" class="headerlink" title="#include的查找"></a>#include的查找</h2><p>你会发现每个头文件下面都有个波浪线，找不到这个头文件</p>
<p><img src="include.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//终端输入</span><br><span class="line">gcc -v -E -x c++ -</span><br></pre></td></tr></table></figure>

<p><strong>复制红色框内所有的路径</strong><br><img src="include2.png" alt></p>
<p><strong>生成路径配置文件：</strong></p>
<blockquote>
<p>按F1输入<code>configuration</code> -&gt; <code>edit configurations.json</code><br>将红框内所有路径复制到<code>includePath</code>里，注意添加冒号和逗号</p>
</blockquote>
<h2 id="设置vs-code默认以最新版本的c"><a href="#设置vs-code默认以最新版本的c" class="headerlink" title="设置vs code默认以最新版本的c++"></a>设置vs code默认以最新版本的c++</h2><p><img src="c++new.png" alt></p>
<hr>
<h1 id="gcc-g-编译命令"><a href="#gcc-g-编译命令" class="headerlink" title="gcc/g++编译命令"></a>gcc/g++编译命令</h1><table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-W</td>
<td>显示编译器认为的错误与警告</td>
</tr>
<tr>
<td>-Wall</td>
<td>编译后显示所有的错误与警告</td>
</tr>
<tr>
<td>-lpthread</td>
<td>使用线程时，必须添加表示在链接阶段链接到pthread.h</td>
</tr>
<tr>
<td>-g</td>
<td>使用gdb</td>
</tr>
<tr>
<td>-o</td>
<td>指定输出文件</td>
</tr>
</tbody></table>
<hr>
</details>








<hr>
<details>
<summary>新版</summary>

<p>让新版本与旧版本同时存在。</p>
<hr>
<p>安装旧版本的gcc/g++与gdb:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++ gdb -y</span><br></pre></td></tr></table></figure>

<p>去<a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener"><font color="green">清华大学镜像源</font></a>的<code>gnu目录</code>下载<code>gmp</code> <code>mpfp</code> <code>mpc</code> <code>gcc</code> <code>texinfo</code> <code>gdb</code></p>
<ul>
<li><strong>安装顺序:</strong><blockquote>
<p>gmp –&gt; mpfr –&gt; mpc –&gt; gcc</p>
</blockquote>
</li>
</ul>
<hr>
<p>创建一个主目录，在里面创建以下一堆目录，并解压下载好嘅包:</p>
<ul>
<li><p>主目录: gnu</p>
<blockquote>
<p><img src="1.png" alt></p>
</blockquote>
</li>
<li><p>追加多个<code>texinfo</code>目录</p>
</li>
</ul>
<hr>
<div class="note info"><p><strong>安装gmp</strong></p>
<p>进入解压后开目录，并执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 配置安装文件</span><br><span class="line">./configure --prefix=/my_file/gnu/gmp</span><br><span class="line"></span><br><span class="line"># 编译并安装</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></div>

<div class="note info"><p><strong>安装mpfr</strong></p>
<p>进入解压后开目录，并执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 配置安装文件，并设置gmp目录</span><br><span class="line">./configure --prefix=/my_file/gnu/mpfr/ --with-gmp=/my_file/gnu/gmp</span><br><span class="line"></span><br><span class="line"># 编译并安装</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></div>

<div class="note info"><p><strong>安装mpc</strong></p>
<p>进入解压后开目录，并执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 配置安装文件，并设置gmp与mpfr目录</span><br><span class="line">./configure --prefix=/my_file/gnu/mpc --with-gmp=/my_file/gnu/gmp --with-mpfr=/my_file/gnu/mpfr</span><br><span class="line"></span><br><span class="line"># 编译并安装</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></div>

<div class="note info"><p><strong>安装gcc</strong></p>
<p>复制<code>libmpfr.so.6</code>文件:<br>将文件<code>/my_file/gnu/mpfr/lib/libmpfr.so.6</code>拷贝一份到<code>/lib64</code><br>或者:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在/lib64创建一个libmpfr.so.6文件</span><br><span class="line">touch /lib64/libmpfr.so.6</span><br><span class="line"></span><br><span class="line"># 使用连接连接到mpfr里的libmpfr.so.6甚至更高级的版本</span><br><span class="line">ln -sf /mpfr目录/lib/libmpfr.so.6 /lib64/libmpfr.so.6 </span><br></pre></td></tr></table></figure>

<hr>
<p>进入解压后开目录，并执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 配置安装文件，并设置gmp，mpfr，mpc目录</span><br><span class="line">./configure --prefix=/my_file/gnu/gcc --with-gmp=/my_file/gnu/gmp --with-mpfr=/my_file/gnu/mpfr --with-mpc=/my_file/gnu/mpc --disable-multilib</span><br><span class="line"></span><br><span class="line"># 编译并安装</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></div>

<div class="note info"><p><strong>安装gdb</strong></p>
<p>安装gdb前需要安装<code>texinfo</code>（texinfo依赖perl）</p>
<ul>
<li>perl安装: <code>yum install perl</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 配置安装文件</span><br><span class="line">./configure --prefix=/my_file/texfino</span><br><span class="line"></span><br><span class="line"># 编译并安装</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"># 配置环境变量</span><br><span class="line">vim /etc/profile</span><br><span class="line"># 在最后面添加</span><br><span class="line">export PATH=$PATH:/my_file/gnu/texfino/bin</span><br><span class="line"># 刷新</span><br><span class="line">source /etc/profile</span><br><span class="line"># 将命令添加至开机启动</span><br><span class="line">vim /etc/rc.local</span><br><span class="line"># 写入</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p>进入解压后开目录，并执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建目录并进入</span><br><span class="line">mkdir build; cd ./build;</span><br><span class="line"></span><br><span class="line"># 配置安装文件</span><br><span class="line">../configure --prefix=/my_file/gnu/gdb</span><br><span class="line"></span><br><span class="line"># 编译并安装</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></div>

</details>

<h1 id="vs-code库文件配置"><a href="#vs-code库文件配置" class="headerlink" title="vs_code库文件配置"></a>vs_code库文件配置</h1><p><img src="2.png" alt></p>
<p><img src="3.png" alt></p>
<hr>
<h1 id="安装c-c-库"><a href="#安装c-c-库" class="headerlink" title="安装c/c++库"></a>安装c/c++库</h1><ul>
<li>C库： <code>glibc</code>linux c语言源码</li>
<li>C++库： <code>libstdc++</code> （gcc自带）</li>
</ul>
<hr>
<ul>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/gnu/glibc/?C=M&O=D" target="_blank" rel="noopener"><font color="green">[<strong>glibc下载</strong>]</font></a></li>
</ul>
<p>安装:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 进入解压文件目录后创建文件并进入</span><br><span class="line">mkdir build; cd build</span><br><span class="line"></span><br><span class="line">// 安装配置</span><br><span class="line">../configure --prefix=/glibc目录/build/</span><br><span class="line"></span><br><span class="line">// 安装</span><br><span class="line">make &amp;&amp; make isntall</span><br></pre></td></tr></table></figure>

<p>出现错误:<br><img src="4.png" alt></p>
<blockquote>
<p>python3，bison版本过低 或者 没有安装</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum isntall python3 bison -y</span><br><span class="line"></span><br><span class="line"># 或</span><br><span class="line"></span><br><span class="line">yun update python3 bison -y</span><br></pre></td></tr></table></figure>

<p>然后在次执行<code>make install</code>即可</p>
<hr>
<h3 id="设置动态库与静态库嘅全局变量"><a href="#设置动态库与静态库嘅全局变量" class="headerlink" title="设置动态库与静态库嘅全局变量"></a>设置动态库与静态库嘅全局变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 动态库</span><br><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/gcc目录/lib:/gcc目录/lib64</span><br><span class="line"></span><br><span class="line"># 静态库</span><br><span class="line">export LIBRARY_PATH=$LIBRARY_PATH:/gcc目录/lib:/gcc目录/lib64</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="使用指定glibc"><a href="#使用指定glibc" class="headerlink" title="使用指定glibc"></a>使用指定glibc</h3><ul>
<li>-Wl,–rpath: 动态库目录</li>
<li>-Wl,–dynamic-linker: 动态库文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc main.c -Wl,--rpath=/glibc目录/lib -Wl,--dynamic-linker=/glibc目录/lib/ld-linux-x86-64.so.2</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>参考</title>
    <url>/2019/10/01/%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<img src="/2019/10/01/参考/封面.jpg">

<a id="more"></a>

<h1 id="博客的美化参考"><a href="#博客的美化参考" class="headerlink" title="博客的美化参考"></a>博客的美化参考</h1><div class="tabs" id="参考"><ul class="nav-tabs"><li class="tab active"><a href="#参考-1">参考 1</a></li><li class="tab"><a href="#参考-2">参考 2</a></li><li class="tab"><a href="#参考-3">参考 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="参考-1"><p><a href="http://xyua.top/Hexo/hexo_next_blog.html#写在前面" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
</div><div class="tab-pane" id="参考-2"><p><a href="https://leafjame.github.io/posts/2114475547.html" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
</div><div class="tab-pane" id="参考-3"><p><a href="https://io-oi.me/tech/hexo-next-optimization/" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
</div></div></div>


<hr>
<h3 id="文章写法的参考"><a href="#文章写法的参考" class="headerlink" title="文章写法的参考"></a>文章写法的参考</h3><p><a href="https://blog.csdn.net/wsmrzx/article/details/81478945" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
<hr>
<h3 id="docker搭建wordpress参考"><a href="#docker搭建wordpress参考" class="headerlink" title="docker搭建wordpress参考"></a>docker搭建wordpress参考</h3><p><a href="https://www.jianshu.com/p/2faca4e1f6fb" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
<hr>
<h3 id="Linux系统C语言分段错误-Segmentation-fault"><a href="#Linux系统C语言分段错误-Segmentation-fault" class="headerlink" title="Linux系统C语言分段错误(Segmentation fault)"></a>Linux系统C语言分段错误(Segmentation fault)</h3><p><a href="https://blog.csdn.net/cs_polebear/article/details/38904783" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
<hr>
<h3 id="Nginx上配置CGI"><a href="#Nginx上配置CGI" class="headerlink" title="Nginx上配置CGI"></a>Nginx上配置CGI</h3><p><a href="https://www.godaner.com/blog/19/" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
<hr>
<h3 id="C-参考手册"><a href="#C-参考手册" class="headerlink" title="C++参考手册"></a>C++参考手册</h3><p><a href="https://zh.cppreference.com/" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
<hr>
<h3 id="分离式编译"><a href="#分离式编译" class="headerlink" title="分离式编译"></a>分离式编译</h3><p><a href="https://imzlp.me/posts/27118/" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
<hr>
<h3 id="静-动态库"><a href="#静-动态库" class="headerlink" title="静/动态库"></a>静/动态库</h3><p><a href="https://www.cnblogs.com/codingmengmeng/p/6046481.html" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
<hr>
<h3 id="Linux下服务器端开发流程及相关工具介绍-C"><a href="#Linux下服务器端开发流程及相关工具介绍-C" class="headerlink" title="Linux下服务器端开发流程及相关工具介绍(C++)"></a>Linux下服务器端开发流程及相关工具介绍(C++)</h3><p><a href="https://www.cnblogs.com/Jack47/p/c-program-develop-under-linux.html" target="_blank" rel="noopener"><strong><code>点击转到</code></strong></a></p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>相关下载</title>
    <url>/2019/10/01/%E7%9B%B8%E5%85%B3%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<img src="/2019/10/01/相关下载/封面.jpg">

<a id="more"></a>

<h1 id="我的整个next主题"><a href="#我的整个next主题" class="headerlink" title="我的整个next主题"></a>我的整个next主题</h1><a class="btn" href="https://pan.baidu.com/s/1-ZNihHTC0HeQk1O_e25clA" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>我的next主题</a>

<hr>
<h1 id="黑群晖6-17与安装所需工具"><a href="#黑群晖6-17与安装所需工具" class="headerlink" title="黑群晖6.17与安装所需工具"></a>黑群晖6.17与安装所需工具</h1><a class="btn" href="https://pan.baidu.com/s/1D-biTMeb8zf33qrzb34uew" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>下载黑群晖6.17与安装所需的工具</a>

<hr>
<h1 id="程序员常用工具"><a href="#程序员常用工具" class="headerlink" title="程序员常用工具"></a>程序员常用工具</h1><details>
<summary>折叠</summary>

<ol>
<li><p>IntelliJ IDEA</p>
<blockquote>
<p>JAVA编程语言开发的集成环境，收费的</p>
</blockquote>
</li>
<li><p>Navicat</p>
<blockquote>
<p>数据可视化，收费的</p>
</blockquote>
</li>
<li><p>Postman</p>
<blockquote>
<p>API&amp;HTTP请求调试工具，用来测接口</p>
</blockquote>
</li>
<li><p>TypeAndRun</p>
<blockquote>
<p>快速启动工具，可以用热键呼出的控制台</p>
</blockquote>
</li>
<li><p>Everything</p>
<blockquote>
<p>速度最快的文件搜索软件</p>
</blockquote>
</li>
<li><p>HiJson</p>
<blockquote>
<p>快速查看JSON字符串</p>
</blockquote>
</li>
<li><p>Sublime Text</p>
<blockquote>
<p>跨平台代码编辑器</p>
</blockquote>
</li>
<li><p>Fiddler</p>
<blockquote>
<p>http协议调试代理工具</p>
</blockquote>
</li>
<li><p>FinalShell</p>
<blockquote>
<p>网络管理软件</p>
</blockquote>
</li>
<li><p>WinSCP </p>
<blockquote>
<p>Windows环境下使用SSH的开源图形化SFTP客户端</p>
</blockquote>
</li>
<li><p>有道云笔记</p>
<blockquote>
<p>云同步笔记</p>
</blockquote>
</li>
<li><p>Todoist</p>
<blockquote>
<p>任务管理应用程序和在线待办事项列表</p>
</blockquote>
</li>
<li><p>XMind ZEN</p>
<blockquote>
<p>思维导图软件，收费的</p>
</blockquote>
</li>
<li><p>source insight</p>
<blockquote>
<p>编辑器</p>
</blockquote>
</li>
<li><p>Mindmanager</p>
<blockquote>
<p>思维导图</p>
</blockquote>
</li>
<li><p>MarkdownPad</p>
<blockquote>
<p>windows上最好用的Markdown编辑器</p>
</blockquote>
</li>
<li><p>Snipaste截图</p>
<blockquote>
<p>简单但强大的截图工具</p>
</blockquote>
</li>
<li><p>Kafka Tool</p>
<blockquote>
<p>Kafka的可视化客户端工具，可以非常方便的查看Topic的队列信息以及消费者信息以及kafka节点信息</p>
</blockquote>
</li>
<li><p>redisDesktopManager</p>
<blockquote>
<p>redis数据库管理软件</p>
</blockquote>
</li>
<li><p>数据结构和算法动态可视化</p>
<blockquote>
<p><strong><a href="https://visualgo.net/zh" target="_blank" rel="noopener">网站</a></strong></p>
</blockquote>
</li>
<li><p>果核剥壳</p>
<blockquote>
<p>一个良心软件下载网站；界面清晰，软件超多</p>
</blockquote>
</li>
<li><p>爱资料在线工具</p>
<blockquote>
<p>为开发运维提供全面的在线工具箱,已开发工具270款,包含开发工具,运维工具,常用工具,SEO站长工具等,是好用,方便的在线工具网站</p>
</blockquote>
</li>
<li><p>DogeDoge搜索</p>
<blockquote>
<p>搜索结果准确率高，不含广告，页面简洁、干净。百度搜索的替代品</p>
</blockquote>
</li>
<li><p>processon</p>
<blockquote>
<p>在线作图工具的聚合平台</p>
</blockquote>
</li>
<li><p>EVERSQL</p>
<blockquote>
<p>sql在线优化工具</p>
</blockquote>
</li>
<li><p>yaml与properties互转工具</p>
<blockquote>
<p><strong><a href="https://www.toyaml.com/index.html" target="_blank" rel="noopener">网站</a></strong></p>
</blockquote>
</li>
<li><p>ShowDoc接口文档 </p>
<blockquote>
<p>在线文档分享工具</p>
</blockquote>
</li>
<li><p>sourceCRT</p>
<blockquote>
<p>SSH远程连接软件</p>
</blockquote>
</li>
<li><p>vs code</p>
<blockquote>
<p>微软的强大文本编辑器</p>
</blockquote>
</li>
<li><p>vmware fusion</p>
<blockquote>
<p>虚拟机</p>
</blockquote>
</li>
<li><p>dash</p>
<blockquote>
<p>开发文档管理器</p>
</blockquote>
</li>
<li><p>wireshark</p>
<blockquote>
<p>捉包工具</p>
</blockquote>
</li>
</ol>


<hr>
</details>]]></content>
  </entry>
  <entry>
    <title>学习路线</title>
    <url>/2019/10/01/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<img src="/2019/10/01/学习路线/封面.jpg">

<p>基于<code>c/c++</code>服务器开发的学习路线</p>
<a href="/2020/02/12/比较高效的学习方式/" title="比较高效的学习方式">比较高效的学习方式</a>

<a id="more"></a>

<details>
<summary>路线1</summary>

<ul>
<li>基础语言<blockquote>
<p>C/C++<br>C primer plus<br>C语言基础</p>
<p>c++ primer<br>C++基础</p>
<p>effective c++<br>为了能写出高效的C++代码</p>
<p>STL源码解剖<br>了解STL的原理</p>
<p>深度探索C++对象模型<br>如其名</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li>linux基础<blockquote>
<p>鸟哥linux私房菜<br>学会linux的操作</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li>数据结构与算法<blockquote>
<p>为了写出更好的程序</p>
<p>大话数据结构</p>
<p>数据结构与算法分析</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li><p>设计模式</p>
<blockquote>
<p>大话设计模式</p>
</blockquote>
</li>
<li><p>脚本语言</p>
<blockquote>
<p>开发的时候会和脚本语言混合使用</p>
<p>lua程序设计</p>
<p>lua设计与实现</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li>linux系统编程<blockquote>
<p>深入了解操作系统</p>
<p>unix环境高级编程</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li>linux网络编程<blockquote>
<p>了解网络编程</p>
<p>unix网络编程（一共两卷）</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li>数据库<blockquote>
<p>数据的存储</p>
<p>mysql必知必会</p>
<p>mysql技术内幕</p>
<p>高性能mysql</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li>分布式<blockquote>
<p>将大问题划分为多个小问题处理</p>
<p>redis设计与实现</p>
<p>redis实战</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li>网络库<blockquote>
<p>网络编程</p>
<p>muduo c++网络库</p>
</blockquote>
</li>
</ul>
<hr>
</details>


<details>
<summary>路线2</summary>

<p>1、c/c++相关<br>c++虚函数原理<br>智能指针<br>c语言如何实现c++对象以及私有成员<br>c++多态实现<br>new和malloc的区别以及底层实现原理<br>STL中的vector怎么扩容<br>虚函数指针的初始化过程<br>c++11原子变量介绍<br>c++11特性有哪些，说用过的<br>怎么理解重载与重写<br>怎么理解c++中的static关键字<br>vector和list 的区别<br>c++的内存分配<br>map与set的底层实现<br>类静态变量的初始化<br>析构函数可以是虚函数？为什么<br>深拷贝与浅拷贝<br>指针常量，常量指针的区别<br>c语言语法推荐书籍: 《c专家编程》《c与指针》</p>
<p>c++语言语言推荐书籍:《c++ primer》《effect c++》</p>
<p>c++语言stl底层原理：《STL源码剖析》</p>
<p>2 、计算机网络<br>介绍下proactor和reactor<br>reactor的组成<br>TIME_WAIT危害<br>TIME_WAIT时长，为什么？<br>IP为什么要分片<br>项目中说用到线程池，开多大，为什么运用线程池？<br>select和epoll区别<br>select什么情况返回0<br>epoll可读情况有哪些<br>什么时候需要TCP四次挥手？<br>如何设置非阻塞<br>什么是零拷贝？<br>tcp与udp的区别以及应用场景<br>如何设计一个可靠的udp<br>粘包如何解决<br>讲一下拥塞控制和流量控制<br>http和https区别<br>是否了解中间人劫持原理<br>http协议格式，几种方法，功能是什么<br>chunked块了解？介绍下<br>有chunked的时候contentlength是什么样子<br>半连接在哪个阶段<br>三次握手四次握手详细过程，越详细越好<br>libevent结构，内部实现<br>tcp的可靠性体现在哪里<br>ARP协议工作流程<br>epoll中的ET和LT模式<br>介绍下滑动窗口<br>指针与引用的区别<br>Accept发生在三次握手哪个阶段<br>Udp的接收缓冲区和发送缓冲区和tcp的区别<br>http长连接与短连接的区别<br>udp包长度<br>一次url访问会经历哪些过程<br>数据包乱序会处理？<br>seq为1000，发送了1000个数据，下一个seq是多少?<br>syn如果丢了，重传多少次<br>tcp/ip相关推荐书籍:《tcp/详解：1》</p>
<p>熟悉使用wireshark捕包工具，加深印象可以使用python的一个库，scapy/dpkt.</p>
<p>3、数据结构相关<br>hash处理冲突的方法<br>二分查找及其变种<br>数组与链表的区别<br>redis数据结构用过哪些，了解跳表？<br>红黑树比平衡二叉树有哪些优点<br>二叉树，b+树，hash，二叉查找树区别<br>说说红黑树的特性<br>各种树，排序的时间复杂度<br>数据库索引，事务，事务级别<br>不考虑事务的隔离性会出现什么问题<br>事务隔离级别<br>索引的类型<br>AC自动机时间复杂度<br>数据结构书籍《大话数据结构》</p>
<p>极客时间王大佬/谭大佬专栏</p>
<p>4、数据库相关<br>如何提高查询速度？<br>加了索引就快了？<br>数据库索引底层结构<br>mysql与memcache的区别<br>mysql常见三种存储引擎的<br>MySQL B+Tree索引和Hash索引的区别？<br>B+树索引和哈希索引的明显区别是：<br>非关系型数据库和关系型数据库区别，优势比较？<br>mysql常见查询优化方案<br>mysql书籍推荐:《mysql必知必会》，《高性能Mysql》，《mysql45讲》</p>
<p>5、操作系统<br>进程与线程的区别<br>多进程与多线程区别，应用场景<br>volatile和原子变量的区别<br>proc文件系统<br>自旋锁与普通锁的区别<br>虚拟内存<br>进程的内存分布<br>栈内存为什么由系统自动分配和释放<br>守护进程如何创建<br>进程间的通信方式及其区别，应用场景<br>死锁条件和解除<br>进程调度方式<br>对编译连接的理解<br>共享内存实现原理<br>僵尸进程是什么，如何处理<br>自旋锁在单cpu与多cpu下的使用<br>用户态与内核态<br>操作系统推荐书籍:《深入理解操作系统》，《Linux内核设计与实现》</p>
<p>6、Linux基础知识及应用编程(后台必备！)<br>如何查看进程打开的文件<br>介绍下nm与ldd命令<br>shell命令查内存，端口 ，io访问量，读写速率<br>awk grep具体应用<br>硬链接与软连接，目录可不可以用硬链接<br>常见命令netstat iptable tcpdump top<br>makefile介绍下(cmake介绍下)<br>gdb查看堆栈中所有遍历<br>gdb查看shared_ptr<br>指向的内容<br>gdb如何调试多进程多线程<br>g++和gcc编译出来有什么区别<br>死锁怎么调试<br>core文件中是什么，gdb调试core文件<br>如何读取一个10G文件，cat一个10g文件会发生什么<br>Linux基础命令推荐书籍:《Linux就该这么学》</p>
<p>Linux应用编程推荐书籍：《后台开发核心技术与应用实践》《Linux多线程服务端编程》《高性能Linux服务器编程》 《linux环境编程:从应用到内核》《unix高级环境编程》</p>
<p>补充资料:gdb手册和makefile详解</p>
<p>7、大数问题<br>有200亿qq，但实际只有25亿用户，找到重复的qq</p>
<p>25亿qq占用内存多大</p>
<p>1-100万，计算找出所有的质数（计算密集型任务），用单线程与多线程怎么处理</p>
<p>1个G的文件写程序，从A机器发送到B机器，怎么发？</p>
<p>100G的文本，每行80k还是80字符，提示用多个机器，多进程，多线程，求出重复最多的行。一个机器内存8G，计算每个机器大概分多少？能读取100G的文本吗？找重复率前十的文本</p>
<p>三个有序的序列，查找公共的部分，第一次我说用哈希表，他说序列太大，空间复杂度要低点，我说了二分查找，他问三个序列查找的顺序和时间复杂度。（时间复杂度为N*logN *logN）</p>
<p>100WURL，如何存储</p>
<p>10台服务器，100w用户，如何进行负载均衡，如何有个服务器挂掉了咋办</p>
<p>10000个数据查找最小的100个？时间复杂度？</p>
<p>场景题：QQ的服务器会保存登录用户的QQ号，只要有登录，文件里面就会有记录，现在需要统计哪些QQ号登录过，怎么做？（先说了分治用小文件，他说除了这个了，我说bit数组，他就问需要多大内存？）</p>
<p>大数问题通常的套路是hash,分治，布隆，bitmap，如果推荐的话还是上面数据结构相关资料.当然如果能了解下比如hdfs文件系统，mapreduce，spark/flink流式计算最佳哈</p>
<p>8、手撕算法(递归非递归)<br>链表有无环判断<br>实现一个单例模式<br>给一个字符串判断单词数<br>开方算法<br>青蛙跳台阶<br>常用排序(快排和归并要写吐)<br>反转链表<br>两个链表，寻找公共节点<br>查找字符串中不重复的最长子串<br>LRU<br>手写求树的深度的代码<br>手写生产者消费者<br>编程实现string类<br>两个数组A,B，A有的B都有，求B-A；<br>输入一个字符串，输出它的全排列<br>统计完全二叉树多少个节点<br>memcpy实现<br>算法学习书籍推荐《剑指offer》，建议三遍哈。</p>
<p>leetcode分专栏练习几题，不在多，在于精。</p>
<p>9、针对项目相关<br>介绍一个你做的比较的项目，几个人做的，担任什么角色<br>项目的技术点在哪里<br>项目不足在哪里<br>你在项目中学到了什么<br>让你优化项目中的一点，如何做<br>项目什么架构<br>测过系统性能吗，挂掉怎么办？<br>最好是自己做过的项目，即时不是也需要弄明白其架构，为什么这么做，有什么优点，什么优化方案？</p>
<p>10、场景题<br>给一个场景，设计一下定时对url进行爬虫，比如对新浪1个小时爬虫n次，然后某些博客可能1个星期爬虫1次。<br>给一个场景，设计服务器实现爬虫的url去重，如何让多个服务器对一个url爬虫指定次数<br>好多小文件，设计一个服务器来实现如何存储<br>设计两地高效传文件<br>11、架构/分布式/中间件相关<br>常用负载均衡策略<br>一致性hash原理<br>缓存容灾中数据一致性问题<br>了解cap理论吗<br>介绍下高可用，高性能，可伸缩基本概念。。<br>了解微服务？docker？k8s?<br>Nginx了解到什么程度，nginx配置更新实现，事件模型<br>推荐书籍：《redis设计与实现》《从0开始学架构》《docker入门到实践》《大型网站技术架构-核心原理与案例分析》</p>
</details>



<details>
<summary>路线3</summary>

<p>轻量级入门教程</p>
<p>看书技巧：<br>用两天时间，快速把书本浏览一遍，记录大概的知识点，哪些知识点用到了就去看。</p>
<h3 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h3><p>首先需要搭建学习的环境。</p>
<ul>
<li>安装Linux操作系统</li>
<li>安装gcc/g++  （C/C++编译器）</li>
<li>gdb    ​    ​    ​   （Debug）​</li>
<li>cmake / ​make（编译工具）<br>​* 一个用得顺手的编辑器</li>
</ul>
<hr>
<h3 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h3><p>学习Linux基础的使用方法（毕竟操作系统都不会用，确实会非常不方便）<br><code>注意</code>： 这里并不推荐使用GUI进行学习</p>
<ul>
<li>开关机</li>
<li>文件 / 目录 的增删改查,拷贝（touch, mkdir, rm, mv, ls, cp）</li>
<li>yum命令的用法</li>
<li>各种类型的解压包安装方法（如.tar, .xz）</li>
<li>环境变量</li>
<li>man命令 与 –help命令</li>
<li>fdisk与gdisk命令</li>
</ul>
<h2 id="书籍推荐《鸟哥的Linux私房菜》"><a href="#书籍推荐《鸟哥的Linux私房菜》" class="headerlink" title="书籍推荐《鸟哥的Linux私房菜》"></a>书籍推荐《鸟哥的Linux私房菜》</h2><h3 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h3><p>C语言:<br>    ​&gt;函数，数组，指针，内存管理</p>
<p>C++：<br>    ​&gt;const,  引用， 推导类型， 友元 / 内敛 / 构造 / 深拷贝与浅拷贝 / 析构 / 虚 / 纯虚 / 重载 /     ​函数, new和delete与malloc和free的区别，类访问限定符，类继承， static，template，STL</p>
<p>书籍推荐《C Primer Plus》《C++ Primer》《effective c++》《STL源码剖析》</p>
<hr>
</details>]]></content>
  </entry>
  <entry>
    <title>使用vmare创建CentOS虚拟机</title>
    <url>/2019/09/30/%E4%BD%BF%E7%94%A8vmare%E5%88%9B%E5%BB%BACentOS%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<img src="/2019/09/30/使用vmare创建CentOS虚拟机/封面.jpg">

<p>使用<code>VMware Workstation Pro 15.5.0</code>创建<code>Cent8</code>虚拟机</p>
<a id="more"></a>

<h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><ul>
<li><p>安装<code>VMware Workstation</code><br>  <a href="https://my.vmware.com/en/web/vmware/info/slug/desktop_end_user_computing/vmware_workstation_pro/15_0?wd=&eqid=b6b2275d002558e3000000065d8cd9de" target="_blank" rel="noopener"><strong><font color="green">下载地址</font></strong></a></p>
</li>
<li><p>下载CentOS镜像<br>  <a href="https://www.centos.org/" target="_blank" rel="noopener"><strong><font color="green">CentOS官网</font></strong></a></p>
</li>
</ul>
<hr>
<h1 id="使用vmare创建虚拟机"><a href="#使用vmare创建虚拟机" class="headerlink" title="使用vmare创建虚拟机"></a>使用vmare创建虚拟机</h1><ol>
<li><p>创建虚拟机，选择<code>自定义</code></p>
</li>
<li><p>硬件兼容（我选的是最新的版本Workstaion）</p>
</li>
<li><p>选择稍后安装操作系统（这样做的原因是，你的镜像可能版本过高，vmare不能识别）</p>
</li>
<li><p><code>客户机操作系统</code>选<code>其他</code></p>
</li>
<li><p>自定义虚拟机名称，和选择虚拟机存储位置</p>
</li>
<li><p>自定义cpu性能</p>
</li>
<li><p>自定义内存大小</p>
</li>
<li><p>选择网络类型（我选的是<code>NAT</code>）</p>
</li>
<li><p>选择IO控制器类型（我选推荐的）</p>
</li>
<li><p>选择磁盘类型（我选择推荐）</p>
</li>
<li><p>虚拟机磁盘类型（看个人爱好，我选择创建虚拟硬盘）</p>
</li>
<li><p>设置容量，和选择虚拟磁盘（虚拟磁盘我选择单文件）</p>
</li>
<li><p>设置虚拟硬盘名称</p>
</li>
<li><p>虚拟机设置好后，选择”编辑虚拟机设置”，找到<code>CD/DVD</code>选项，选择<code>使用ISO镜像</code>，设置为：你的虚拟机镜像</p>
</li>
<li><p>打开虚拟机，进入到安装界面，<code>软件选择</code>选项，设置为：最小化安装</p>
</li>
<li><p>进入<code>磁盘分区</code>选项，选择”自定义分区“，按<code>+</code>号进行添加分区，分区如下：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">设置大小</th>
</tr>
</thead>
<tbody><tr>
<td align="left">biosboot</td>
<td align="left">2M左右</td>
</tr>
<tr>
<td align="left">/boot</td>
<td align="left">1G</td>
</tr>
<tr>
<td align="left">swap</td>
<td align="left">虚拟机内存的两倍大小</td>
</tr>
<tr>
<td align="left">/home</td>
<td align="left">1G以上，文件常规为:LVM</td>
</tr>
<tr>
<td align="left">/</td>
<td align="left">10G以上，文件常规为:LVM</td>
</tr>
</tbody></table>
<p>注意：为了开发和调试，一般选择<code>Performance Tools</code>和<code>Development Tools</code>即可</p>
<ol start="17">
<li>安装时可以设置<code>root</code>（超级用户）密码，和设置普通用户</li>
</ol>
<hr>
<h1 id="优化虚拟机速度"><a href="#优化虚拟机速度" class="headerlink" title="优化虚拟机速度"></a>优化虚拟机速度</h1><ol>
<li><p><code>vamre</code>里，<code>编辑</code> -&gt; <code>首选项</code> -&gt; <code>内存</code> -&gt; <code>额外内存</code>设置为：<code>调整所有虚拟机内存使其适应预留主机RAM</code></p>
</li>
<li><p><code>vamre</code>里，<code>编辑</code> -&gt; <code>首选项</code> -&gt; <code>优先级</code> -&gt; <code>默认进程优先级</code> -&gt; <code>捉取的输入内容</code>设置为：<code>高</code></p>
</li>
<li><p><code>编辑虚拟机设置</code> -&gt; <code>选项</code>，<code>高级</code> -&gt; <code>进程优先级</code> -&gt; <code>捉取的输入内容</code>设置为：<code>高</code></p>
</li>
<li><p><code>编辑虚拟机设置</code> -&gt; <code>选项</code>，<code>高级</code> -&gt; <code>收集调试信息</code> -&gt; <code>禁用内存页面修正</code> -&gt; <code>打勾</code></p>
</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>基于next主题，美化hexo博客</title>
    <url>/2019/09/27/%E5%9F%BA%E4%BA%8Enext%E4%B8%BB%E9%A2%98%EF%BC%8C%E7%BE%8E%E5%8C%96hexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<img src="/2019/09/27/基于next主题，美化hexo博客/封面.jpg">

<p>美化<code>hexo</code>博客</p>
<a id="more"></a> 

<h1 id="next使用文档"><a href="#next使用文档" class="headerlink" title="next使用文档"></a>next使用文档</h1><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener"><font color="green"><strong>官方文档</strong></font></a></p>
<hr>
<h1 id="设置next主题"><a href="#设置next主题" class="headerlink" title="设置next主题"></a>设置next主题</h1><p><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener"><font color="green"><strong>下载主题</strong></font></a></p>
<blockquote>
<p>将主题解压到<font color="red">blog</font>下的<strong>themes</strong>目录</p>
</blockquote>
<ul>
<li><p>修改<font color="red">_config.yml</font>配置文件</p>
<p>  theme: <strong>你主题的目录名</strong></p>
</li>
</ul>
<p><img src="%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE.png" alt></p>
<hr>
<h1 id="更改主题布局"><a href="#更改主题布局" class="headerlink" title="更改主题布局"></a>更改主题布局</h1><ul>
<li>next目录下的<font color="red">_config.yml</font>配置文件</li>
</ul>
<p>把<font color="red">#</font>去掉即可使用该布局</p>
<p><code><strong>Schemes:</strong></code><strong>选项</strong></p>
<blockquote>
<p>#scheme: Muse</p>
<p>#scheme: Mist</p>
<p>#scheme: Pisces</p>
<p>#scheme: Gemini</p>
</blockquote>
<p><img src="%E4%B8%BB%E9%A2%98%E6%A0%B7%E5%BC%8F.png" alt></p>
<hr>
<h1 id="添加标签与分类菜单"><a href="#添加标签与分类菜单" class="headerlink" title="添加标签与分类菜单"></a>添加标签与分类菜单</h1><ul>
<li>next目录下的_config.yml配置文件</li>
</ul>
<p>把<font color="red">#</font>去掉即可使用该菜单</p>
<p><code><strong>menu:</strong></code><strong>选项</strong></p>
<blockquote>
<p>home: / || home</p>
<p>#about: /about/ || user<br>tags: /tags/ || tags<br>categories: /categories/ || th<br>archives: /archives/ || archive</p>
<p>#schedule: /schedule/ || calendar</p>
<p>#sitemap: /sitemap.xml || sitemap</p>
<p>#commonweal: /404/ || heartbeat</p>
</blockquote>
<p><img src="%E8%8F%9C%E5%8D%95.png" alt></p>
<p><strong>git终端输入：</strong></p>
<blockquote>
<p>hexo n page tags<br>hexo n page categories</p>
</blockquote>
<ul>
<li>执行完后会在<font color="red">blog</font>下的<strong>source</strong>，会自动生成<strong>tags</strong>与<strong>categories</strong>目录</li>
</ul>
<p>打开<font color="red">blog/source/categories</font>下的<strong>index.md</strong>文件</p>
<blockquote>
<p>title: 分类<br>type: categories    //需要自己添加</p>
</blockquote>
<p><img src="%E5%88%86%E7%B1%BB.png" alt></p>
<p>打开<font color="red">blog/source/tags</font>下的<strong>index.md</strong>文件</p>
<blockquote>
<p>title: 标签<br>type: tags    //需要自己添加</p>
</blockquote>
<p><img src="%E6%A0%87%E7%AD%BE.png" alt></p>
<p>使用方法：<strong>在文章的最顶端</strong></p>
<blockquote>
<p>tags:<br>- A<br>categories:<br>- B</p>
</blockquote>
<p><img src="%E5%88%86%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8.png" alt></p>
<hr>
<h1 id="设置默认为简体中文显示"><a href="#设置默认为简体中文显示" class="headerlink" title="设置默认为简体中文显示"></a>设置默认为简体中文显示</h1><p><font color="red">blog</font>下的<font color="red">_config.yml</font>配置文件</p>
<p><code><strong>language:</strong></code><strong>选项</strong></p>
<blockquote>
<p>zh-Hans</p>
</blockquote>
<p><img src="%E8%AE%BE%E7%BD%AE%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87.png" alt></p>
<hr>
<h1 id="修改网页样式"><a href="#修改网页样式" class="headerlink" title="修改网页样式"></a>修改网页样式</h1><h3 id="修改展开侧栏后的文章页宽"><a href="#修改展开侧栏后的文章页宽" class="headerlink" title="修改展开侧栏后的文章页宽"></a>修改展开侧栏后的文章页宽</h3><ul>
<li>打开<font color="red">blog/themes/next/source/css/_variables/base.sty</font>文件</li>
</ul>
<p><strong><code>$content-desktop-large</code></strong>选项</p>
<p>我这里使用的是700px，按个人需求调整</p>
<p><img src="%E6%96%87%E7%AB%A0%E9%A1%B5%E5%AE%BD.png" alt></p>
<h3 id="修改小型代码块颜色"><a href="#修改小型代码块颜色" class="headerlink" title="修改小型代码块颜色"></a>修改小型代码块颜色</h3><ul>
<li>打开<font color="red">blog/themes/next/source/css/_variables/base.sty</font>文件</li>
</ul>
<p><strong>找到位置：</strong></p>
<blockquote>
<p>// Colors<br>// colors for use across theme.<br>// ————————————————–</p>
<p><strong>加入自定义颜色：</strong></p>
<p>$my-code-foreground = #dd0055          // 用 <font color="red">``</font> 围出的代码块字体颜色<br>$my-code-background = #eee          // 用 <font color="red">``</font> 围出的代码块背景颜色</p>
</blockquote>
<p><img src="%E5%B0%8F%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%9D%97%E9%A2%9C%E8%89%B2.png" alt></p>
<ul>
<li>打开<code>blog/themes/next/source\css/_custom/custom.styl</code>文件</li>
</ul>
<p><strong>加入自定义样式：</strong></p>
<blockquote>
<p>// 文章 <font color="red">``</font> 代码块<strong>(等同于 <font color="red">&lt;code&gt;&lt;/code&gt;</font> 代码块)</strong>的自定义样式<br>code {<br>   margin: 0px 3px;<br>   // 外围边框的大小与颜色<br>   border: 1px solid #999;<br>}</p>
</blockquote>
<p><img src="%E5%B0%8F%E5%9E%8B%E4%BB%A3%E7%A0%81%E5%9D%97%E9%A2%9C%E8%89%B22.png" alt></p>
<table>
<thead>
<tr>
<th align="left">代码块</th>
<th align="left">预览</th>
</tr>
</thead>
<tbody><tr>
<td align="left">`预览`</td>
<td align="left"><code>预览</code></td>
</tr>
<tr>
<td align="left">&lt;code&gt;预览&lt;/code&gt;</td>
<td align="left"><code>预览</code></td>
</tr>
</tbody></table>
<h3 id="修改-Read-More-按钮样式（-阅读全文-按钮样式）"><a href="#修改-Read-More-按钮样式（-阅读全文-按钮样式）" class="headerlink" title="修改[Read More]按钮样式（[阅读全文]按钮样式）"></a>修改[Read More]按钮样式（[阅读全文]按钮样式）</h3><ul>
<li>打开<code>blog\themes\next\source\css\_custom\custom.styl</code>文件</li>
</ul>
<p><strong>加入自定义样式：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// [Read More]按钮样式</span><br><span class="line">.post-button .btn &#123;</span><br><span class="line">	color: #555 !important;</span><br><span class="line">	background-color: rgb(255, 255, 255);</span><br><span class="line">	border-radius: 3px;</span><br><span class="line">	font-size: 15px;</span><br><span class="line">	box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35);</span><br><span class="line">	border: none !important;</span><br><span class="line">	transition-property: unset;</span><br><span class="line">	padding: 0px 15px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-button .btn:hover &#123;</span><br><span class="line">	color: rgb(255, 255, 255) !important;</span><br><span class="line">	border-radius: 3px;</span><br><span class="line">	font-size: 15px;</span><br><span class="line">	box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35);</span><br><span class="line">	background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87%E6%8C%89%E9%92%AE.png" alt></p>
<p><strong>预览：</strong></p>
<p><img src="%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87%E6%8C%89%E9%92%AE%E9%A2%84%E8%A7%88.png" alt></p>
<h3 id="标签云样式"><a href="#标签云样式" class="headerlink" title="标签云样式"></a>标签云样式</h3><p>搜索<strong><code>&lt;div class=&quot;tag-cloud-tags&quot;&gt;</code></strong></p>
<pre><code>// 修改这里
默认： {{ tagcloud({min_font: 12, max_font: 30, amount: 300, color: true, start_color: '#ccc', end_color: '#111'}) }}    
&lt;/div&gt;</code></pre><p><strong>将内容修改为：</strong></p>
<pre><code>自定义：{{ tagcloud({min_font: 13, max_font: 31, amount: 1000, color: true, start_color: '#9733EE', end_color: '#FF512F'}) }}</code></pre><p><img src="%E6%A0%87%E7%AD%BE%E9%A2%9C%E8%89%B2code.png" alt></p>
<p><strong>预览：</strong></p>
<p><img src="%E6%A0%87%E7%AD%BE%E4%BA%91%E9%A2%84%E8%A7%88.png" alt></p>
<p>详细参数请参考：<a href="https://hexo.io/zh-cn/docs/helpers.html#tagcloud" target="_blank" rel="noopener"><strong><font color="green">Hexo官方文档-tagcloud样式</font></strong></a></p>
<h3 id="修改文章底部-号标签，改为图标"><a href="#修改文章底部-号标签，改为图标" class="headerlink" title="修改文章底部 # 号标签，改为图标"></a>修改文章底部 # 号标签，改为图标</h3><p>打开<code>blog/themes/next/layout/_macro/post.swig</code>文件</p>
<p>搜索<strong><code>rel=&quot;tag&quot;&gt;#</code></strong></p>
<blockquote>
<p>将<code>#</code>换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>
</blockquote>
<p><img src="%E6%96%87%E7%AB%A0%E6%9C%80%E5%BA%95%E4%B8%8B%E7%9A%84%E6%A0%87%E7%AD%BEcode.png" alt></p>
<p><strong>预览：</strong></p>
<p><img src="%E6%96%87%E7%AB%A0%E6%9C%80%E5%BA%95%E4%B8%8B%E7%9A%84%E6%A0%87%E7%AD%BE.png" alt></p>
<h3 id="设置头像为圆形，头像旋转"><a href="#设置头像为圆形，头像旋转" class="headerlink" title="设置头像为圆形，头像旋转"></a>设置头像为圆形，头像旋转</h3><p>打开<code>blog\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code></p>
<p><strong>添加样式：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 自定义头像样式</span><br><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">//设置圆形</span><br><span class="line">  border-radius: 80%;</span><br><span class="line">  transition: 2s all;</span><br><span class="line">&#125;</span><br><span class="line">//头像旋转</span><br><span class="line"> .site-author-image:hover&#123;</span><br><span class="line">   transform: rotate(360deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="%E5%A4%B4%E5%83%8F%E6%A0%B7%E5%BC%8Fcode.png" alt></p>
<p><strong>效果预览：</strong></p>
<video width="100%" height="400" src="/v/旋转头像.mp4" controls="controls">
</video>

<h3 id="隐藏底部”强力驱动”内容"><a href="#隐藏底部”强力驱动”内容" class="headerlink" title="隐藏底部”强力驱动”内容"></a>隐藏底部”强力驱动”内容</h3><ul>
<li><p>打开<code>blog/themes/next/_config.yml</code></p>
</li>
<li><p>将<code>powered</code>与<code>enable</code>设置为：<code>false</code></p>
</li>
</ul>
<p><img src="%E9%9A%90%E8%97%8F%E5%BC%BA%E5%8A%9B%E9%A9%B1%E5%8A%A8.png" alt></p>
<p><strong>预览：</strong></p>
<p><img src="%E9%9A%90%E8%97%8F%E5%BC%BA%E5%8A%9B%E9%A9%B1%E5%8A%A82.png" alt></p>
<h3 id="文章末尾添加”本文结束”标记"><a href="#文章末尾添加”本文结束”标记" class="headerlink" title="文章末尾添加”本文结束”标记"></a>文章末尾添加”本文结束”标记</h3><ul>
<li>打开blog/themes/next/layout/_macro/post.swig文件</li>
</ul>
<p>在<strong><code>{% if theme.wechat_subscriber.enabled and not is_index %}</code></strong>上一行添加：</p>
<pre><code>&lt;div style=&quot;text-align:center;color: #DC143C;font-size:25px;&quot;&gt; 自定义结束标记 &lt;/div&gt;</code></pre><p><img src="%E6%96%87%E6%9C%AC%E7%BB%93%E6%9D%9F%E6%A0%87%E8%AE%B0.png" alt></p>
<h3 id="添加背景图片"><a href="#添加背景图片" class="headerlink" title="添加背景图片"></a>添加背景图片</h3><p>打开<code>blog\themes\next\source\css\_custom\custom.styl</code>文件</p>
<p><strong>添加：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//背景</span><br><span class="line">body &#123;</span><br><span class="line">	background:url(/路径/图片);</span><br><span class="line">	background-repeat: no-repeat;</span><br><span class="line">	background-attachment:fixed;</span><br><span class="line">	background-position:50% 50%;</span><br><span class="line">	background-size: cover;</span><br><span class="line">	-webkit-background-size: cover;</span><br><span class="line">	-o-background-size: cover;</span><br><span class="line">	-moz-background-size: cover;</span><br><span class="line">	-ms-background-size: cover;</span><br><span class="line"></span><br><span class="line">	/*这是设置底部文字, 看个人需要修改*/</span><br><span class="line">	#footer &gt; div &gt; div &#123;</span><br><span class="line">		color:#eee;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//background-size:cover为可能有助于大分辨率下背景图的显示</span><br><span class="line">//修改不透明度（可加可不加，看实际效果）</span><br><span class="line">//因为next主题的背景是纯透明的，这样子就造成背景图片的影响看不见文字。</span><br><span class="line">//调整背景的不透明度可以更加美观，参数opacity:建议调整0.8至0.95之间。</span><br><span class="line">.main-inner &#123; </span><br><span class="line">	margin-top: 60px;</span><br><span class="line">	padding: 60px 60px 60px 60px;</span><br><span class="line">	background: #fff;</span><br><span class="line">	opacity: 0.9;</span><br><span class="line">	min-height: 500px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文章与右侧栏的设置"><a href="#文章与右侧栏的设置" class="headerlink" title="文章与右侧栏的设置"></a>文章与右侧栏的设置</h3><p>打开<code>blog\themes\next\source\css\_custom\custom.styl</code>文件</p>
<p><strong>选择性添加：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// Custom styles.</span><br><span class="line">/*******************文章样式*****************************/</span><br><span class="line">// 文章</span><br><span class="line">.post &#123;</span><br><span class="line">	margin-bottom: 50px;</span><br><span class="line">	padding: 45px 36px 36px 36px;</span><br><span class="line">	box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5);</span><br><span class="line">	background-color: rgb(255, 255, 255);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 文章标题字体</span><br><span class="line">.posts-expand .post-title &#123;</span><br><span class="line">	font-size: 26px;</span><br><span class="line">	font-weight: 700;</span><br><span class="line">&#125;</span><br><span class="line">// 文章标题动态效果</span><br><span class="line">.posts-expand .post-title-link::before &#123;</span><br><span class="line">	background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);</span><br><span class="line">&#125;</span><br><span class="line">// 文章元数据（meta）留白更改</span><br><span class="line">.posts-expand .post-meta &#123;</span><br><span class="line">	margin: 10px 0px 20px 0px;</span><br><span class="line">&#125;</span><br><span class="line">// 文章的描述description</span><br><span class="line">.posts-expand .post-meta .post-description &#123;</span><br><span class="line">	font-style: italic;</span><br><span class="line">	font-size: 14px;</span><br><span class="line">	margin-top: 30px;</span><br><span class="line">	margin-bottom: 0px;</span><br><span class="line">	color: #666;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 去除在页面文章之间的分割线</span><br><span class="line">.posts-expand .post-eof &#123;</span><br><span class="line">	margin: 0px;</span><br><span class="line">	background-color: rgba(255, 255, 255, 0);</span><br><span class="line">&#125;</span><br><span class="line">// 去除页面底部页码上面的横线</span><br><span class="line">.pagination &#123;</span><br><span class="line">	border: none;</span><br><span class="line">	margin: 0px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 文章内标题样式（左边的竖线）</span><br><span class="line">.post-body h2, h3, h4, h5, h6 &#123;</span><br><span class="line">	border-left: 4px solid rgb(161, 102, 171);</span><br><span class="line">	margin-left: -36px;</span><br><span class="line">	padding-left: 32px;</span><br><span class="line">&#125;</span><br><span class="line">// 去掉图片边框</span><br><span class="line">.posts-expand .post-body img &#123;</span><br><span class="line">	border: none;</span><br><span class="line">	padding: 0px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//文章内链接文本样式</span><br><span class="line">.post-body p a&#123;</span><br><span class="line">color: #0593d3;</span><br><span class="line">border-bottom: none;</span><br><span class="line">border-bottom: 1px solid #0593d3;</span><br><span class="line">&amp;:hover &#123;</span><br><span class="line">	color: #fc6423;</span><br><span class="line">	border-bottom: none;</span><br><span class="line">	border-bottom: 1px solid #fc6423;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 自定义的文章摘要图片样式</span><br><span class="line">img.img-topic &#123;</span><br><span class="line">	width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*************************侧栏样式****************************/</span><br><span class="line"></span><br><span class="line">// 右下角侧栏按钮样式（正方形里面有3个横杠的按钮）</span><br><span class="line">.sidebar-toggle &#123;</span><br><span class="line">	right: 10px;</span><br><span class="line">	bottom: 43px;</span><br><span class="line">	background-color: rgba(255, 127, 80, 0.75);	// 正方形的颜色</span><br><span class="line">	border-radius: 5px;</span><br><span class="line">	box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.35);</span><br><span class="line">&#125;</span><br><span class="line">.page-post-detail .sidebar-toggle-line &#123;</span><br><span class="line">	background: rgb(220,220,220); // 三条横杠的颜色</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 右下角返回顶部按钮样式（有个↑的按钮）</span><br><span class="line">.back-to-top &#123;</span><br><span class="line">	line-height: 1.5;</span><br><span class="line">	right: 10px;</span><br><span class="line">	padding-right: 5px;</span><br><span class="line">	padding-left: 5px;</span><br><span class="line">	padding-top: 2.5px;</span><br><span class="line">	padding-bottom: 2.5px;</span><br><span class="line">	background-color: rgba(255, 127, 80, 0.75, 0.75); //正方形颜色</span><br><span class="line">	border-radius: 5px;</span><br><span class="line">	box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.35); // ↑颜色</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侧栏（侧栏的背景色）</span><br><span class="line">.sidebar &#123;</span><br><span class="line">	box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.5);</span><br><span class="line">	background-color: rgba(0,0,0, 0.75); // 背景颜色</span><br><span class="line">&#125;</span><br><span class="line">.sidebar-inner &#123;</span><br><span class="line">	margin-top: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侧栏顶部文字（文章目录，站点概览的颜色）</span><br><span class="line">.sidebar-nav li &#123;</span><br><span class="line">	font-size: 15px;</span><br><span class="line">	font-weight: bold;</span><br><span class="line">	color: rgb(255, 127, 80);</span><br><span class="line">&#125;</span><br><span class="line">.sidebar-nav li:hover &#123;</span><br><span class="line">	color: rgb(161, 102, 171);</span><br><span class="line">&#125;</span><br><span class="line">.sidebar-nav .sidebar-nav-active &#123;</span><br><span class="line">	color: rgb(153,50,204); </span><br><span class="line">	border-bottom-color: rgb(161, 102, 171);</span><br><span class="line">	border-bottom-width: 1.5px;</span><br><span class="line">&#125;</span><br><span class="line">.sidebar-nav .sidebar-nav-active:hover &#123;</span><br><span class="line">	color: rgb(100,149,237); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">// 侧栏站点作者名</span><br><span class="line">.site-author-name &#123;</span><br><span class="line">	// display: none; //这个选项为不显示作者名</span><br><span class="line">	color: rgb(220,220,220); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侧栏站点文章、分类、标签</span><br><span class="line">.site-state &#123;</span><br><span class="line">	line-height: 1.3;</span><br><span class="line">	margin-left: 12px;</span><br><span class="line">&#125;</span><br><span class="line">.site-state-item &#123;</span><br><span class="line">	padding: 0px 15px;</span><br><span class="line">	border-left: 1.5px solid rgb(161, 102, 171);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侧栏目录链接样式</span><br><span class="line">.post-toc ol a &#123;</span><br><span class="line">	color: rgb(0,255,255); // 未被选中时的颜色</span><br><span class="line">	border-bottom: 1px solid rgb(96, 125, 139);</span><br><span class="line">&#125;</span><br><span class="line">.post-toc ol a:hover &#123;</span><br><span class="line">	color: rgb(250,235,215); // 被鼠标选中但不点击时的颜色</span><br><span class="line">	border-bottom-color: rgb(161, 102, 171);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侧栏目录链接样式之当前目录</span><br><span class="line">.post-toc .nav .active &gt; a &#123;</span><br><span class="line">	color: rgb(161, 102, 171);</span><br><span class="line">	border-bottom-color: rgb(205,92,92); //被选中时下划线的颜色</span><br><span class="line">&#125;</span><br><span class="line">.post-toc .nav .active &gt; a:hover &#123;</span><br><span class="line">	color: rgb(161, 102, 171);</span><br><span class="line">	border-bottom-color: rgb(30,144,255); //鼠标指针指向但未点击，下划线的颜色</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 修侧栏目录bug，如果主题配置文件_config.yml的toc是wrap: true */</span><br><span class="line">.post-toc ol &#123;</span><br><span class="line">	padding: 0px 10px 5px 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 侧栏目录默认全展开，已注释</span><br><span class="line">.post-toc .nav .nav-child &#123;</span><br><span class="line">	display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/************************移动端样式*******************************/</span><br><span class="line">@media (max-width: 1023px) &#123;</span><br><span class="line">	.container &#123;</span><br><span class="line">		background-color: rgba(0, 0, 0, 0);</span><br><span class="line">	&#125;</span><br><span class="line">	.sidebar &#123;</span><br><span class="line">		// box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5);</span><br><span class="line">		border-top-left-radius: 5px;</span><br><span class="line">		border-bottom-left-radius: 5px;</span><br><span class="line">	&#125;</span><br><span class="line">	.feed-link &#123;</span><br><span class="line">		display: none !important;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">@media (max-width: 767px) &#123;</span><br><span class="line">	.main &#123;</span><br><span class="line">		padding-bottom: 120px;</span><br><span class="line">	&#125;</span><br><span class="line">	.posts-expand &#123;</span><br><span class="line">		margin: 0px;</span><br><span class="line">		padding-top: 10px;</span><br><span class="line">	&#125;</span><br><span class="line">	.posts-expand .post-title &#123;</span><br><span class="line">		font-size: 22px;</span><br><span class="line">	&#125;</span><br><span class="line">	.posts-expand .post-meta &#123;</span><br><span class="line">		font-size: 10px;</span><br><span class="line">	&#125;</span><br><span class="line">	.post &#123;</span><br><span class="line">		margin-bottom: 30px !important;</span><br><span class="line">		padding: 20px 15px 15px 15px !important;</span><br><span class="line">	&#125;</span><br><span class="line">	.post-body h2, h3, h4, h5, h6 &#123;</span><br><span class="line">		margin-left: -15px;</span><br><span class="line">		padding-left: 11px;</span><br><span class="line">	&#125;</span><br><span class="line">	.posts-expand .post-tags &#123;</span><br><span class="line">		margin-top: 10px;</span><br><span class="line">	&#125;</span><br><span class="line">	.post-widgets &#123;</span><br><span class="line">		margin-top: 10px;</span><br><span class="line">	&#125;</span><br><span class="line">	.comments &#123;</span><br><span class="line">		margin: 40px 0px 40px 0px !important;</span><br><span class="line">	&#125;</span><br><span class="line">	.footer &#123;</span><br><span class="line">		// box-shadow: 0px -5px 10px 0px rgba(0, 0, 0, 0.5);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">.sidebar-active #sidebar-dimmer &#123;</span><br><span class="line">	opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 移动端左上角菜单按钮</span><br><span class="line">.site-nav-toggle &#123;</span><br><span class="line">	top: 35px;</span><br><span class="line">	left: 91px;</span><br><span class="line">	// background-color: #222;</span><br><span class="line">&#125;</span><br><span class="line">.btn-bar &#123;</span><br><span class="line">	background-color: rgb(0, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 移动端菜单</span><br><span class="line">@media (max-width: 767px) &#123;</span><br><span class="line">	.menu &#123;</span><br><span class="line">		text-align: center;</span><br><span class="line">		// box-shadow: 0px 5px 10px 0px rgba(0, 0, 0, 0.5);</span><br><span class="line">	&#125;</span><br><span class="line">	.site-nav &#123;</span><br><span class="line">		top: initial;</span><br><span class="line">		background-color: rgba(255, 255, 255, 0.75);</span><br><span class="line">		border-top: none;</span><br><span class="line">		border-bottom: none;</span><br><span class="line">		position: relative;</span><br><span class="line">		z-index: 1024;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//移动端顶部</span><br><span class="line">@media (max-width: 767px) &#123;</span><br><span class="line">	.site-title &#123;</span><br><span class="line">		font-size: 28px !important;</span><br><span class="line">		letter-spacing: 0px !important;</span><br><span class="line">	&#125;</span><br><span class="line">	.site-subtitle&#123;</span><br><span class="line">		letter-spacing: 0px !important;</span><br><span class="line">		padding-bottom: 0px !important;</span><br><span class="line">	&#125;</span><br><span class="line">	.site-meta &#123;</span><br><span class="line">		// box-shadow: 0px 5px 10px 0px rgba(0, 0, 0, 0.5);</span><br><span class="line">	&#125;</span><br><span class="line">	.menu .menu-item &#123;</span><br><span class="line">		margin: 0px 10px !important;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="往文章添加视频"><a href="#往文章添加视频" class="headerlink" title="往文章添加视频"></a>往文章添加视频</h1><p><strong>代码块：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;video src=&apos;v1.mp4&apos; </span><br><span class="line">       type=&apos;video/mp4&apos; </span><br><span class="line">       controls=&apos;controls&apos;  </span><br><span class="line">       preload=&quot;auto&quot;</span><br><span class="line">       width=&apos;100%&apos; </span><br><span class="line">       height=&apos;100%&apos;&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="功能设置"><a href="#功能设置" class="headerlink" title="功能设置"></a>功能设置</h1><h3 id="侧栏添加建站时间"><a href="#侧栏添加建站时间" class="headerlink" title="侧栏添加建站时间"></a>侧栏添加建站时间</h3><p>打开<code>blog/themes/next/layout/_custom/sidebar.swig</code>文件</p>
<p><strong>添加：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 网站运行时间的设置 --&gt;</span><br><span class="line">&lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt; </span><br><span class="line">&lt;script&gt;   </span><br><span class="line"> var now = new Date();    function createtime() &#123;       </span><br><span class="line"> var grt= new Date(&quot;09/26/2019 13:14:21&quot;);//此处修改你的建站时间或者网站上线时间       </span><br><span class="line"> now.setTime(now.getTime()+250);        </span><br><span class="line">days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);</span><br><span class="line">  hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);       </span><br><span class="line"> if(String(hnum).length ==1 )&#123;hnum = &quot;0&quot; + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);        </span><br><span class="line">mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = &quot;0&quot; + mnum;&#125;        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);        </span><br><span class="line">snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = &quot;0&quot; + snum;&#125;        document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;已运行 &quot;+dnum+&quot; 天 &quot;;        </span><br><span class="line">document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;;    &#125;setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>网站侧栏即可预览</strong></p>
<h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3><p><strong>安装插件：</strong></p>
<blockquote>
<p>cnpm install hexo-generator-searchdb –save</p>
</blockquote>
<p>打开<code>blog/themes/next/_config_yml</code>文件</p>
<p><code>local_search:</code>选项里，<code>enable:</code>设置为<code>true</code>，<code>top_n_per_article:</code>设置为<code>-1</code></p>
<p><img src="%E6%90%9C%E7%B4%A2.png" alt></p>
<p><strong>网站最上方点击<code>搜索</code>即可预览</strong></p>
<h3 id="文章字数统计及阅读时常功能"><a href="#文章字数统计及阅读时常功能" class="headerlink" title="文章字数统计及阅读时常功能"></a>文章字数统计及阅读时常功能</h3><p><strong>安装插件：</strong></p>
<blockquote>
<p>cnpm install hexo-wordcount –save</p>
</blockquote>
<p>打开<code>blog/themes/next/_config_yml</code>文件</p>
<p><code>post_wordcount:</code>选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">item_text: true</span><br><span class="line">wordcount: true #单篇文章字数</span><br><span class="line">min2read: true #单篇阅读时长</span><br><span class="line">totalcount: true #站点总字数</span><br><span class="line">separated_meta: true</span><br></pre></td></tr></table></figure>

<p><img src="%E6%96%87%E5%AD%97%E7%BB%9F%E8%AE%A1.png" alt></p>
<h3 id="站点访问统计功能"><a href="#站点访问统计功能" class="headerlink" title="站点访问统计功能"></a>站点访问统计功能</h3><p>打开<code>blog/themes/next/_config_yml</code>文件</p>
<p><code>busuanzi_count</code>选项里的<code>enable:</code>设置为<code>true</code>，<code>page_pv:</code>设置为<code>false</code></p>
<p>打开<code>blog/themes/next/layout/_third-party/analytics/busuanzi-counter.swig</code>文件</p>
<p><strong>将<code>script async src=</code>的网站修改为：</strong></p>
<blockquote>
<p>//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</p>
</blockquote>
<p><img src="busuanzi.png" alt></p>
<p><strong>在网站最底部即可预览</strong></p>
<h3 id="文章阅读数统计"><a href="#文章阅读数统计" class="headerlink" title="文章阅读数统计"></a>文章阅读数统计</h3><ul>
<li><p>注册LeanCloud账号</p>
<p>  <a href="https://leancloud.cn/" target="_blank" rel="noopener"><strong><font color="green">LeanCloud官网</font></strong></a></p>
</li>
<li><p>进入<code>控制台</code>，<code>创建一个新应用</code></p>
</li>
<li><p>点击应用，进入到<code>存储</code>分页，创建一个名为<code>Counter</code>的<code>class</code>，<code>限制写入</code>挂钩</p>
</li>
</ul>
<p>打开<code>blog/theme/next/_config.yml</code>文件</p>
<p><strong><code>leancloud_visitors:</code>选项</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">enable: true</span><br><span class="line">app_id: # your app_id</span><br><span class="line">app_key: # your app_key</span><br></pre></td></tr></table></figure>

<p><strong>AppID和AppKey可以通过：</strong><br>LeanCloud应用的<code>设置</code>页面下的<code>自定义 API 服务域名</code>下的<code>应用keys</code>找到</p>
<p><code>设置安全域名</code><br>有时候我们的会在本地通过locahost:4000浏览并编辑我们的页面，在这种情况下，<br>LeanClound会记录很多没有意义的浏览次数。为了让统计的浏览次数有意义，<br>我们可以在应用-&gt;设置-&gt;安全中心-&gt;Web安全域名中设置自己博客的域名，<br>只有该域名可以访问LeanCloud系统，因此只会记录在这个域名下的访客数据。</p>
<p>LeanCloud应用的<code>设置</code>页面下的<code>安全中心</code>，<code>Web 安全域名</code>里填写你的网站</p>
<hr>
<h1 id="选项卡功能"><a href="#选项卡功能" class="headerlink" title="选项卡功能"></a>选项卡功能</h1><p>打开<code>blog/themes/next/_config_yml</code>文件</p>
<p><strong><code>tabs:</code>选项</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enable: true</span><br><span class="line">transition:</span><br><span class="line">  tabs: true</span><br><span class="line">  labels: true</span><br><span class="line">border_radius: 0</span><br></pre></td></tr></table></figure>

<div class="tabs" id="选项"><ul class="nav-tabs"><li class="tab active"><a href="#选项-1">选项 1</a></li><li class="tab"><a href="#选项-2">选项 2</a></li><li class="tab"><a href="#选项-3">选项 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="选项-1"><p>** A **</p>
</div><div class="tab-pane" id="选项-2"><p>** AA **</p>
</div><div class="tab-pane" id="选项-3"><p>** AAA **</p>
</div></div></div>

<p><strong>写法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs 选项 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">** A **</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">** AA **</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">** AAA **</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="侧栏添加网易云音乐播放器"><a href="#侧栏添加网易云音乐播放器" class="headerlink" title="侧栏添加网易云音乐播放器"></a>侧栏添加网易云音乐播放器</h1><ul>
<li><p>从网易云官网获取外部链接</p>
<p>  <img src="%E7%BD%91%E6%98%93%E4%BA%911.png" alt></p>
</li>
</ul>
<p>打开<code>blog/themes/next/layout/_custom/sidebar.swig</code>文件</p>
<p><strong>写入:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=&quot;变量名&quot;&gt;</span><br><span class="line">网易云音乐的外部链接</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="修改网站图标"><a href="#修改网站图标" class="headerlink" title="修改网站图标"></a>修改网站图标</h1><p>打开<code>blog/themes/next/_config_yml</code>文件</p>
<p><strong><code>favicon</code>选项</strong></p>
<blockquote>
<p>medium: 图标</p>
</blockquote>
<p><img src="%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.png" alt></p>
<hr>
<h1 id="设置主页文章的数量"><a href="#设置主页文章的数量" class="headerlink" title="设置主页文章的数量"></a>设置主页文章的数量</h1><p>打开<code>blog/_config.yml</code>配置文件</p>
<p><strong><code>index_generator:</code>选项</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path: &apos;&apos;</span><br><span class="line">per_page: 2 # 主页显示的文章数量</span><br><span class="line">order_by: -date # 文章排序的方式，默认以时间进行排序（最新的在前面）</span><br></pre></td></tr></table></figure>

<p><img src="%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E6%95%B0%E9%87%8F.png" alt></p>
<hr>
<h1 id="点击下载按钮"><a href="#点击下载按钮" class="headerlink" title="点击下载按钮"></a>点击下载按钮</h1><p><strong>预览：</strong></p>
<a class="btn" href="https://www.baidu.com" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击进入百度</a>

<p> <strong>源码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% btn https://www.baidu.com, 点进入载百度, download fa-lg fa-fw %&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="label-标签"><a href="#label-标签" class="headerlink" title="label 标签"></a>label 标签</h1><p>打开<code>blog/themes/next/_config_yml</code>文件</p>
<p><strong><code>label:</code>选项</strong></p>
<blockquote>
<p>label: true</p>
</blockquote>
<p><strong>写法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label default@内容 %&#125;</span><br></pre></td></tr></table></figure>


<table>
<thead>
<tr>
<th align="left">样式</th>
</tr>
</thead>
<tbody><tr>
<td align="left">default</td>
</tr>
<tr>
<td align="left">primary</td>
</tr>
<tr>
<td align="left">success</td>
</tr>
<tr>
<td align="left">info</td>
</tr>
<tr>
<td align="left">warning</td>
</tr>
<tr>
<td align="left">danger</td>
</tr>
</tbody></table>
<p><img src="lable.png" alt></p>
<p><strong>效果预览：</strong></p>
<ul>
<li><p>default</p>
  <span class="label default">内容</span>    
</li>
<li><p>primary</p>
  <span class="label primary">内容</span>
</li>
<li><p>success</p>
  <span class="label success">内容</span>
</li>
<li><p>info</p>
  <span class="label info">内容</span>
</li>
<li><p>warning</p>
  <span class="label warning">内容</span>
</li>
<li><p>danger</p>
  <span class="label danger">内容</span>

</li>
</ul>
<hr>
<h1 id="主页播图"><a href="#主页播图" class="headerlink" title="主页播图"></a>主页播图</h1><p>在<code>blog/themes/next/layout/_macro</code>目录下，创建<code>carousel.swig</code>文件</p>
<p><strong>carousel.swig文件内容:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% if theme.carousel.enable %&#125;</span><br><span class="line">&lt;script src=&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"></span><br><span class="line">.glyphicon-chevron-left:before&#123;</span><br><span class="line">	/* content: &quot;《&quot; */</span><br><span class="line">&#125;</span><br><span class="line">.glyphicon-chevron-right:before&#123;</span><br><span class="line">	/* content: &quot;》&quot; */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.right-siders&#123;</span><br><span class="line">   border-radius: 10px;</span><br><span class="line">   /*margin-top: 5px;*/</span><br><span class="line">   margin-bottom: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.my-carousel:hover&#123;</span><br><span class="line">  margin-left: 5px;</span><br><span class="line">  //padding: 5px 1px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  transform: scale(1.1);</span><br><span class="line">  box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media (max-width: 767px)&#123;</span><br><span class="line">	.rights&#123;</span><br><span class="line">		display: none;</span><br><span class="line">	&#125;</span><br><span class="line">	.carousel&#123;</span><br><span class="line">		width: 100% !important;</span><br><span class="line">		height: 100% !important;</span><br><span class="line">	&#125;</span><br><span class="line">	.slide&#123;</span><br><span class="line">		width: 100% !important;</span><br><span class="line">		height: 100% !important;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.carousel&#123;		/* 设置播图框 */</span><br><span class="line">	width: 65%;			</span><br><span class="line">	height: 100%;</span><br><span class="line">	position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.carousel-inner &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .item &#123;</span><br><span class="line">  display: none;</span><br><span class="line">  position: relative;</span><br><span class="line">  -webkit-transition: 0.6s ease-in-out left;</span><br><span class="line">  -o-transition: 0.6s ease-in-out left;</span><br><span class="line">  transition: 0.6s ease-in-out left;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .item &gt; img,</span><br><span class="line">.carousel-inner &gt; .item &gt; a &gt; img &#123;</span><br><span class="line">  line-height: 1;</span><br><span class="line">&#125;</span><br><span class="line">@media all and (transform-3d), (-webkit-transform-3d) &#123;</span><br><span class="line">  .carousel-inner &gt; .item &#123;</span><br><span class="line">    -webkit-transition: -webkit-transform 0.6s ease-in-out;</span><br><span class="line">    -moz-transition: -moz-transform 0.6s ease-in-out;</span><br><span class="line">    -o-transition: -o-transform 0.6s ease-in-out;</span><br><span class="line">    transition: transform 0.6s ease-in-out;</span><br><span class="line">    -webkit-backface-visibility: hidden;</span><br><span class="line">    -moz-backface-visibility: hidden;</span><br><span class="line">    backface-visibility: hidden;</span><br><span class="line">    -webkit-perspective: 1000px;</span><br><span class="line">    -moz-perspective: 1000px;</span><br><span class="line">    perspective: 1000px;</span><br><span class="line">  &#125;</span><br><span class="line">  .carousel-inner &gt; .item.next,</span><br><span class="line">  .carousel-inner &gt; .item.active.right &#123;</span><br><span class="line">    -webkit-transform: translate3d(100%, 0, 0);</span><br><span class="line">    transform: translate3d(100%, 0, 0);</span><br><span class="line">    left: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  .carousel-inner &gt; .item.prev,</span><br><span class="line">  .carousel-inner &gt; .item.active.left &#123;</span><br><span class="line">    -webkit-transform: translate3d(-100%, 0, 0);</span><br><span class="line">    transform: translate3d(-100%, 0, 0);</span><br><span class="line">    left: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  .carousel-inner &gt; .item.next.left,</span><br><span class="line">  .carousel-inner &gt; .item.prev.right,</span><br><span class="line">  .carousel-inner &gt; .item.active &#123;</span><br><span class="line">    -webkit-transform: translate3d(0, 0, 0);</span><br><span class="line">    transform: translate3d(0, 0, 0);</span><br><span class="line">    left: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .active,</span><br><span class="line">.carousel-inner &gt; .next,</span><br><span class="line">.carousel-inner &gt; .prev &#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .active &#123;</span><br><span class="line">  left: 0;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .next,</span><br><span class="line">.carousel-inner &gt; .prev &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .next &#123;</span><br><span class="line">  left: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .prev &#123;</span><br><span class="line">  left: -100%;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .next.left,</span><br><span class="line">.carousel-inner &gt; .prev.right &#123;</span><br><span class="line">  left: 0;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .active.left &#123;</span><br><span class="line">  left: -100%;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-inner &gt; .active.right &#123;</span><br><span class="line">  left: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-control &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  /*width: 5%;*/</span><br><span class="line">  opacity: 0.5;</span><br><span class="line">  filter: alpha(opacity=50);</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  color: #fff;</span><br><span class="line">  text-align: center;</span><br><span class="line">  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.6);</span><br><span class="line">  background-color: rgba(0, 0, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line">.carousel-control.left &#123;</span><br><span class="line">  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.0001) 100%);</span><br><span class="line">  background-image: -o-linear-gradient(left, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.0001) 100%);</span><br><span class="line">  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.0001) 100%);</span><br><span class="line">  background-repeat: repeat-x;</span><br><span class="line">  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#80000000, endColorstr=#00000000, GradientType=1);</span><br><span class="line">&#125;</span><br><span class="line">.carousel-control.right &#123;</span><br><span class="line">  left: auto;</span><br><span class="line">  right: 0;</span><br><span class="line">  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, 0.0001) 0%, rgba(0, 0, 0, 0.5) 100%);</span><br><span class="line">  background-image: -o-linear-gradient(left, rgba(0, 0, 0, 0.0001) 0%, rgba(0, 0, 0, 0.5) 100%);</span><br><span class="line">  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.0001) 0%, rgba(0, 0, 0, 0.5) 100%);</span><br><span class="line">  background-repeat: repeat-x;</span><br><span class="line">  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#00000000, endColorstr=#80000000, GradientType=1);</span><br><span class="line">&#125;</span><br><span class="line">.carousel-control:hover,</span><br><span class="line">.carousel-control:focus &#123;</span><br><span class="line">  outline: 0;</span><br><span class="line">  color: #fff;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  opacity: 0.9;</span><br><span class="line">  filter: alpha(opacity=90);</span><br><span class="line">&#125;</span><br><span class="line">.carousel-control .icon-prev,</span><br><span class="line">.carousel-control .icon-next,</span><br><span class="line">.carousel-control .glyphicon-chevron-left,</span><br><span class="line">.carousel-control .glyphicon-chevron-right &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  margin-top: -10px;</span><br><span class="line">  z-index: 5;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">.carousel-control .icon-prev,</span><br><span class="line">.carousel-control .glyphicon-chevron-left &#123;</span><br><span class="line">  left: 50%;</span><br><span class="line">  margin-left: -10px;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">.carousel-control .icon-prev,</span><br><span class="line">.carousel-control .glyphicon-chevron-left &#123;</span><br><span class="line">  background: url(&apos;/images/icon-slides.png&apos;);</span><br><span class="line">  background-position-y: -20px;</span><br><span class="line">  left: 9px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">.carousel-control .icon-next,</span><br><span class="line">.carousel-control .glyphicon-chevron-right &#123;</span><br><span class="line">  right: 50%;</span><br><span class="line">  margin-right: -10px;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">.carousel-control .icon-next,</span><br><span class="line">.carousel-control .glyphicon-chevron-right &#123;</span><br><span class="line">  background: url(&apos;/images/icon-slides.png&apos;);</span><br><span class="line">  background-position-x: -50px;</span><br><span class="line">  background-position-y: -20px;</span><br><span class="line">  right: 0px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.carousel-control .icon-prev,</span><br><span class="line">.carousel-control .icon-next &#123;</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  line-height: 1;</span><br><span class="line">  font-family: serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.carousel-control .icon-prev:before &#123;</span><br><span class="line">  content: 2039;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-control .icon-next:before &#123;</span><br><span class="line">  content: 203a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.carousel-indicators &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  bottom: 2px;</span><br><span class="line">  left: 50%;</span><br><span class="line">  z-index: 15;</span><br><span class="line">  width: 60%;</span><br><span class="line">  margin-left: -30%;</span><br><span class="line">  padding-left: 0;</span><br><span class="line">  list-style: none;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-indicators li &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 30px;</span><br><span class="line">  height: 3px;</span><br><span class="line">  margin: 5px;</span><br><span class="line">  text-indent: -999px;</span><br><span class="line">  border: 1px solid #bbb;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  background-color: rgba(0, 0, 0, .24);</span><br><span class="line">&#125;</span><br><span class="line">.carousel-indicators .active &#123;</span><br><span class="line">  width: 30px;</span><br><span class="line">  height: 3px;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">.carousel-caption &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 15%;</span><br><span class="line">  right: 15%;</span><br><span class="line">  bottom: 20px;</span><br><span class="line">  z-index: 10;</span><br><span class="line">  padding-top: 20px;</span><br><span class="line">  padding-bottom: 20px;</span><br><span class="line">  color: #fff;</span><br><span class="line">  text-align: center;</span><br><span class="line">  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.6);</span><br><span class="line">&#125;</span><br><span class="line">.carousel-caption .btn &#123;</span><br><span class="line">  text-shadow: none;</span><br><span class="line">&#125;</span><br><span class="line">@media screen and (min-width: 768px) &#123;</span><br><span class="line">  .carousel-control .glyphicon-chevron-left,</span><br><span class="line">  .carousel-control .glyphicon-chevron-right,</span><br><span class="line">  .carousel-control .icon-prev,</span><br><span class="line">  .carousel-control .icon-next &#123;</span><br><span class="line">    width: 30px;</span><br><span class="line">    height: 30px;</span><br><span class="line">    margin-top: -10px;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">  &#125;</span><br><span class="line">  .carousel-control .glyphicon-chevron-left,</span><br><span class="line">  .carousel-control .icon-prev &#123;</span><br><span class="line">    margin-left: -10px;</span><br><span class="line">  &#125;</span><br><span class="line">  .carousel-control .glyphicon-chevron-right,</span><br><span class="line">  .carousel-control .icon-next &#123;</span><br><span class="line">   /* margin-right: -10px; */</span><br><span class="line">  &#125;</span><br><span class="line">  .carousel-caption &#123;</span><br><span class="line">    left: 20%;</span><br><span class="line">    right: 20%;</span><br><span class="line">    padding-bottom: 30px;</span><br><span class="line">  &#125;</span><br><span class="line">  .carousel-indicators &#123;</span><br><span class="line">    bottom: -10px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div width=&quot;100%&quot; height=&quot;320px&quot; style=&quot;border: 0px; overflow: hidden; border-radius: 10px; margin-bottom: 25px;&quot; scrolling=&quot;no&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id=&quot;myCarousel&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot; data-interval=&quot;3500&quot; style=&quot;float:left&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 轮播（Carousel）指标 --&gt;</span><br><span class="line">      &lt;ol class=&quot;carousel-indicators&quot;&gt;</span><br><span class="line">      &#123;% set index = 0 %&#125;</span><br><span class="line">      &#123;% for item in theme.carousel.item %&#125;</span><br><span class="line">        &lt;li data-target=&quot;#myCarousel&quot; data-slide-to=&quot;&#123;&#123;index&#125;&#125;&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &#123;% set index = index+1 %&#125;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">      &lt;/ol&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 轮播（Carousel）项目 --&gt;</span><br><span class="line">      &lt;div class=&quot;carousel-inner&quot; style=&quot;height: 280px; border-radius: 10px; width: 100%;&quot;&gt;</span><br><span class="line">       &#123;% set act = 0 %&#125;</span><br><span class="line">       &#123;% for item in theme.carousel.item %&#125;</span><br><span class="line">          &#123;% if act===0 %&#125;</span><br><span class="line">          &lt;a class=&quot;item active&quot; href=&quot;&#123;&#123; url_for(item.link) &#125;&#125;&quot; target=&quot;_blank&quot; style=&quot;height: 100%;&quot;&gt;</span><br><span class="line">            &#123;# 添加 class=&quot;nofancybox&quot; 解决fancybox和图片链接冲突 #&#125;</span><br><span class="line">            &lt;img src=&quot;&#123;&#123;item.img&#125;&#125;&quot; class=&quot;nofancybox&quot;  style=&quot;width: 100%; height: 100%&quot; &gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">          &#123;% set act = 1 %&#125;</span><br><span class="line">          &#123;% elseif act===1 %&#125;</span><br><span class="line">            &lt;a class=&quot;item&quot; href=&quot;&#123;&#123; url_for(item.link) &#125;&#125;&quot; target=&quot;_blank&quot; style=&quot;height: 100%;&quot;&gt;</span><br><span class="line">              &lt;img src=&quot;&#123;&#123;item.img&#125;&#125;&quot; class=&quot;nofancybox&quot;  style=&quot;width: 100%; height: 100%;&quot; &gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 轮播（Carousel）导航 --&gt;</span><br><span class="line">      &lt;a class=&quot;left carousel-control&quot; data-target=&quot;#myCarousel&quot; href=&quot;javascript:void(0);&quot; role=&quot;button&quot; data-slide=&quot;prev&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;glyphicon glyphicon-chevron-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">      &lt;a class=&quot;right carousel-control&quot; data-target=&quot;#myCarousel&quot; href=&quot;javascript:void(0);&quot; role=&quot;button&quot; data-slide=&quot;next&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;glyphicon glyphicon-chevron-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">	&lt;div  class=&quot;rights&quot; style=&quot;width: 30%; height: 280px; margin-right: 0px;margin-left: 20px;float: left;&quot;&gt;</span><br><span class="line">       &lt;!-- 天气插件，地区在后面可以进行修改 --&gt;</span><br><span class="line">       &lt;iframe width=&quot;300px&quot; scrolling=&quot;no&quot; height=&quot;50px&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot; src=&quot;//i.tianqi.com/index.php?c=code&amp;id=12&amp;color=%23&amp;bdc=%23&amp;icon=1&amp;py=guangzhou&amp;num=2&amp;site=12&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">    </span><br><span class="line">       &lt;!-- 学习路线 --&gt;</span><br><span class="line">       &lt;div class=&quot;my-carousel&quot;&gt;</span><br><span class="line">         &lt;a href=&quot;/2019/10/01/学习路线/&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">            &lt;img class=&quot;right-siders nofancybox&quot; src=&quot;/images/lx.png&quot; width=&quot;100%&quot;/&gt;</span><br><span class="line">         &lt;/a&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">       &lt;!-- ss/ssr --&gt;</span><br><span class="line">       &lt;div class=&quot;my-carousel&quot;&gt;</span><br><span class="line">         &lt;a href=&quot;https://github.com/selierlin/Share-SSR-V2ray&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">           &lt;img class=&quot;right-siders nofancybox&quot; src=&quot;/images/ss.png&quot;/&gt;</span><br><span class="line">         &lt;/a&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 相关下载 --&gt;</span><br><span class="line">      &lt;div class=&quot;my-carousel&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;/2019/10/01/相关下载/&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">          &lt;img class=&quot;right-siders nofancybox&quot; src=&quot;/images/dw.png&quot;/&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 参考 --&gt;</span><br><span class="line">      &lt;div class=&quot;my-carousel&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;/2019/10/01/参考/&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">          &lt;img class=&quot;right-siders nofancybox&quot; src=&quot;/images/ck.png&quot;/&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：需要自己修改的东西：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">.carousel-control .icon-prev,里的图片位置</span><br><span class="line"></span><br><span class="line">.carousel-control .icon-next,里的图片位置</span><br><span class="line"></span><br><span class="line">**以上两个为播图框里的左右箭头**</span><br><span class="line"></span><br><span class="line">文件最后被注释的地方，里面href修改自己需要指向的网页，图片也要自己修改（需要条形图）</span><br></pre></td></tr></table></figure>

<p>打开<strong><code>/themes/next/layout/index.swig</code></strong>文件</p>
<ul>
<li><strong>找到</strong> <span class="label default">{% block content</span>%}</li>
</ul>
<ul>
<li><p><strong>往它的下一行添加：</strong></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--轮播图--&gt;</span><br><span class="line">&#123;% include &apos;_macro/carousel.swig&apos; %&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>可能会出现的问题</strong></p>
<p><img src="%E6%92%AD%E5%9B%BE%E9%97%AE%E9%A2%98.png" alt></p>
<p><strong>解决方法：</strong></p>
<ul>
<li>打开<code>/themes/next/source/js/src/utils.js</code>文件，搜索<code>wrapImageWithFancyBox</code>往<code>var $image = $(this);</code>下一行添加：<blockquote>
<p>if ($(this).hasClass(‘nofancybox’)) return;</p>
</blockquote>
</li>
</ul>
<p><img src="%E6%92%AD%E5%9B%BE%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3.png" alt></p>
<p>打开<code>blog/themes/next/layout/_macro/carousel.swig</code>文件（也就是刚刚创建的文件）</p>
<p>找到<code>img</code>代码块，往代码块里面添加<code>class=&quot;nofancybox&quot;</code></p>
<p><img src="img%E4%BB%A3%E7%A0%81%E5%9D%97.png" alt></p>
<hr>
<h1 id="代码复制功能"><a href="#代码复制功能" class="headerlink" title="代码复制功能"></a>代码复制功能</h1><p>在<code>blog/theme/next/source/js/src</code>目录创建名为<code>clipboard.min.js</code>的文件</p>
<p><strong>写入：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/*!</span><br><span class="line"> * clipboard.js v2.0.4</span><br><span class="line"> * https://zenorocha.github.io/clipboard.js</span><br><span class="line"> * </span><br><span class="line"> * Licensed MIT © Zeno Rocha</span><br><span class="line"> */</span><br><span class="line">!function(t,e)&#123;&quot;object&quot;==typeof exports&amp;&amp;&quot;object&quot;==typeof module?module.exports=e():&quot;function&quot;==typeof define&amp;&amp;define.amd?define([],e):&quot;object&quot;==typeof exports?exports.ClipboardJS=e():t.ClipboardJS=e()&#125;(this,function()&#123;return function(n)&#123;var o=&#123;&#125;;function r(t)&#123;if(o[t])return o[t].exports;var e=o[t]=&#123;i:t,l:!1,exports:&#123;&#125;&#125;;return n[t].call(e.exports,e,e.exports,r),e.l=!0,e.exports&#125;return r.m=n,r.c=o,r.d=function(t,e,n)&#123;r.o(t,e)||Object.defineProperty(t,e,&#123;enumerable:!0,get:n&#125;)&#125;,r.r=function(t)&#123;&quot;undefined&quot;!=typeof Symbol&amp;&amp;Symbol.toStringTag&amp;&amp;Object.defineProperty(t,Symbol.toStringTag,&#123;value:&quot;Module&quot;&#125;),Object.defineProperty(t,&quot;__esModule&quot;,&#123;value:!0&#125;)&#125;,r.t=function(e,t)&#123;if(1&amp;t&amp;&amp;(e=r(e)),8&amp;t)return e;if(4&amp;t&amp;&amp;&quot;object&quot;==typeof e&amp;&amp;e&amp;&amp;e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,&quot;default&quot;,&#123;enumerable:!0,value:e&#125;),2&amp;t&amp;&amp;&quot;string&quot;!=typeof e)for(var o in e)r.d(n,o,function(t)&#123;return e[t]&#125;.bind(null,o));return n&#125;,r.n=function(t)&#123;var e=t&amp;&amp;t.__esModule?function()&#123;return t.default&#125;:function()&#123;return t&#125;;return r.d(e,&quot;a&quot;,e),e&#125;,r.o=function(t,e)&#123;return Object.prototype.hasOwnProperty.call(t,e)&#125;,r.p=&quot;&quot;,r(r.s=0)&#125;([function(t,e,n)&#123;&quot;use strict&quot;;var r=&quot;function&quot;==typeof Symbol&amp;&amp;&quot;symbol&quot;==typeof Symbol.iterator?function(t)&#123;return typeof t&#125;:function(t)&#123;return t&amp;&amp;&quot;function&quot;==typeof Symbol&amp;&amp;t.constructor===Symbol&amp;&amp;t!==Symbol.prototype?&quot;symbol&quot;:typeof t&#125;,i=function()&#123;function o(t,e)&#123;for(var n=0;n&lt;e.length;n++)&#123;var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,&quot;value&quot;in o&amp;&amp;(o.writable=!0),Object.defineProperty(t,o.key,o)&#125;&#125;return function(t,e,n)&#123;return e&amp;&amp;o(t.prototype,e),n&amp;&amp;o(t,n),t&#125;&#125;(),a=o(n(1)),c=o(n(3)),u=o(n(4));function o(t)&#123;return t&amp;&amp;t.__esModule?t:&#123;default:t&#125;&#125;var l=function(t)&#123;function o(t,e)&#123;!function(t,e)&#123;if(!(t instanceof e))throw new TypeError(&quot;Cannot call a class as a function&quot;)&#125;(this,o);var n=function(t,e)&#123;if(!t)throw new ReferenceError(&quot;this hasn&apos;t been initialised - super() hasn&apos;t been called&quot;);return!e||&quot;object&quot;!=typeof e&amp;&amp;&quot;function&quot;!=typeof e?t:e&#125;(this,(o.__proto__||Object.getPrototypeOf(o)).call(this));return n.resolveOptions(e),n.listenClick(t),n&#125;return function(t,e)&#123;if(&quot;function&quot;!=typeof e&amp;&amp;null!==e)throw new TypeError(&quot;Super expression must either be null or a function, not &quot;+typeof e);t.prototype=Object.create(e&amp;&amp;e.prototype,&#123;constructor:&#123;value:t,enumerable:!1,writable:!0,configurable:!0&#125;&#125;),e&amp;&amp;(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)&#125;(o,c.default),i(o,[&#123;key:&quot;resolveOptions&quot;,value:function()&#123;var t=0&lt;arguments.length&amp;&amp;void 0!==arguments[0]?arguments[0]:&#123;&#125;;this.action=&quot;function&quot;==typeof t.action?t.action:this.defaultAction,this.target=&quot;function&quot;==typeof t.target?t.target:this.defaultTarget,this.text=&quot;function&quot;==typeof t.text?t.text:this.defaultText,this.container=&quot;object&quot;===r(t.container)?t.container:document.body&#125;&#125;,&#123;key:&quot;listenClick&quot;,value:function(t)&#123;var e=this;this.listener=(0,u.default)(t,&quot;click&quot;,function(t)&#123;return e.onClick(t)&#125;)&#125;&#125;,&#123;key:&quot;onClick&quot;,value:function(t)&#123;var e=t.delegateTarget||t.currentTarget;this.clipboardAction&amp;&amp;(this.clipboardAction=null),this.clipboardAction=new a.default(&#123;action:this.action(e),target:this.target(e),text:this.text(e),container:this.container,trigger:e,emitter:this&#125;)&#125;&#125;,&#123;key:&quot;defaultAction&quot;,value:function(t)&#123;return s(&quot;action&quot;,t)&#125;&#125;,&#123;key:&quot;defaultTarget&quot;,value:function(t)&#123;var e=s(&quot;target&quot;,t);if(e)return document.querySelector(e)&#125;&#125;,&#123;key:&quot;defaultText&quot;,value:function(t)&#123;return s(&quot;text&quot;,t)&#125;&#125;,&#123;key:&quot;destroy&quot;,value:function()&#123;this.listener.destroy(),this.clipboardAction&amp;&amp;(this.clipboardAction.destroy(),this.clipboardAction=null)&#125;&#125;],[&#123;key:&quot;isSupported&quot;,value:function()&#123;var t=0&lt;arguments.length&amp;&amp;void 0!==arguments[0]?arguments[0]:[&quot;copy&quot;,&quot;cut&quot;],e=&quot;string&quot;==typeof t?[t]:t,n=!!document.queryCommandSupported;return e.forEach(function(t)&#123;n=n&amp;&amp;!!document.queryCommandSupported(t)&#125;),n&#125;&#125;]),o&#125;();function s(t,e)&#123;var n=&quot;data-clipboard-&quot;+t;if(e.hasAttribute(n))return e.getAttribute(n)&#125;t.exports=l&#125;,function(t,e,n)&#123;&quot;use strict&quot;;var o,r=&quot;function&quot;==typeof Symbol&amp;&amp;&quot;symbol&quot;==typeof Symbol.iterator?function(t)&#123;return typeof t&#125;:function(t)&#123;return t&amp;&amp;&quot;function&quot;==typeof Symbol&amp;&amp;t.constructor===Symbol&amp;&amp;t!==Symbol.prototype?&quot;symbol&quot;:typeof t&#125;,i=function()&#123;function o(t,e)&#123;for(var n=0;n&lt;e.length;n++)&#123;var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,&quot;value&quot;in o&amp;&amp;(o.writable=!0),Object.defineProperty(t,o.key,o)&#125;&#125;return function(t,e,n)&#123;return e&amp;&amp;o(t.prototype,e),n&amp;&amp;o(t,n),t&#125;&#125;(),a=n(2),c=(o=a)&amp;&amp;o.__esModule?o:&#123;default:o&#125;;var u=function()&#123;function e(t)&#123;!function(t,e)&#123;if(!(t instanceof e))throw new TypeError(&quot;Cannot call a class as a function&quot;)&#125;(this,e),this.resolveOptions(t),this.initSelection()&#125;return i(e,[&#123;key:&quot;resolveOptions&quot;,value:function()&#123;var t=0&lt;arguments.length&amp;&amp;void 0!==arguments[0]?arguments[0]:&#123;&#125;;this.action=t.action,this.container=t.container,this.emitter=t.emitter,this.target=t.target,this.text=t.text,this.trigger=t.trigger,this.selectedText=&quot;&quot;&#125;&#125;,&#123;key:&quot;initSelection&quot;,value:function()&#123;this.text?this.selectFake():this.target&amp;&amp;this.selectTarget()&#125;&#125;,&#123;key:&quot;selectFake&quot;,value:function()&#123;var t=this,e=&quot;rtl&quot;==document.documentElement.getAttribute(&quot;dir&quot;);this.removeFake(),this.fakeHandlerCallback=function()&#123;return t.removeFake()&#125;,this.fakeHandler=this.container.addEventListener(&quot;click&quot;,this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement(&quot;textarea&quot;),this.fakeElem.style.fontSize=&quot;12pt&quot;,this.fakeElem.style.border=&quot;0&quot;,this.fakeElem.style.padding=&quot;0&quot;,this.fakeElem.style.margin=&quot;0&quot;,this.fakeElem.style.position=&quot;absolute&quot;,this.fakeElem.style[e?&quot;right&quot;:&quot;left&quot;]=&quot;-9999px&quot;;var n=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=n+&quot;px&quot;,this.fakeElem.setAttribute(&quot;readonly&quot;,&quot;&quot;),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,c.default)(this.fakeElem),this.copyText()&#125;&#125;,&#123;key:&quot;removeFake&quot;,value:function()&#123;this.fakeHandler&amp;&amp;(this.container.removeEventListener(&quot;click&quot;,this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&amp;&amp;(this.container.removeChild(this.fakeElem),this.fakeElem=null)&#125;&#125;,&#123;key:&quot;selectTarget&quot;,value:function()&#123;this.selectedText=(0,c.default)(this.target),this.copyText()&#125;&#125;,&#123;key:&quot;copyText&quot;,value:function()&#123;var e=void 0;try&#123;e=document.execCommand(this.action)&#125;catch(t)&#123;e=!1&#125;this.handleResult(e)&#125;&#125;,&#123;key:&quot;handleResult&quot;,value:function(t)&#123;this.emitter.emit(t?&quot;success&quot;:&quot;error&quot;,&#123;action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)&#125;)&#125;&#125;,&#123;key:&quot;clearSelection&quot;,value:function()&#123;this.trigger&amp;&amp;this.trigger.focus(),window.getSelection().removeAllRanges()&#125;&#125;,&#123;key:&quot;destroy&quot;,value:function()&#123;this.removeFake()&#125;&#125;,&#123;key:&quot;action&quot;,set:function()&#123;var t=0&lt;arguments.length&amp;&amp;void 0!==arguments[0]?arguments[0]:&quot;copy&quot;;if(this._action=t,&quot;copy&quot;!==this._action&amp;&amp;&quot;cut&quot;!==this._action)throw new Error(&apos;Invalid &quot;action&quot; value, use either &quot;copy&quot; or &quot;cut&quot;&apos;)&#125;,get:function()&#123;return this._action&#125;&#125;,&#123;key:&quot;target&quot;,set:function(t)&#123;if(void 0!==t)&#123;if(!t||&quot;object&quot;!==(void 0===t?&quot;undefined&quot;:r(t))||1!==t.nodeType)throw new Error(&apos;Invalid &quot;target&quot; value, use a valid Element&apos;);if(&quot;copy&quot;===this.action&amp;&amp;t.hasAttribute(&quot;disabled&quot;))throw new Error(&apos;Invalid &quot;target&quot; attribute. Please use &quot;readonly&quot; instead of &quot;disabled&quot; attribute&apos;);if(&quot;cut&quot;===this.action&amp;&amp;(t.hasAttribute(&quot;readonly&quot;)||t.hasAttribute(&quot;disabled&quot;)))throw new Error(&apos;Invalid &quot;target&quot; attribute. You can\&apos;t cut text from elements with &quot;readonly&quot; or &quot;disabled&quot; attributes&apos;);this._target=t&#125;&#125;,get:function()&#123;return this._target&#125;&#125;]),e&#125;();t.exports=u&#125;,function(t,e)&#123;t.exports=function(t)&#123;var e;if(&quot;SELECT&quot;===t.nodeName)t.focus(),e=t.value;else if(&quot;INPUT&quot;===t.nodeName||&quot;TEXTAREA&quot;===t.nodeName)&#123;var n=t.hasAttribute(&quot;readonly&quot;);n||t.setAttribute(&quot;readonly&quot;,&quot;&quot;),t.select(),t.setSelectionRange(0,t.value.length),n||t.removeAttribute(&quot;readonly&quot;),e=t.value&#125;else&#123;t.hasAttribute(&quot;contenteditable&quot;)&amp;&amp;t.focus();var o=window.getSelection(),r=document.createRange();r.selectNodeContents(t),o.removeAllRanges(),o.addRange(r),e=o.toString()&#125;return e&#125;&#125;,function(t,e)&#123;function n()&#123;&#125;n.prototype=&#123;on:function(t,e,n)&#123;var o=this.e||(this.e=&#123;&#125;);return(o[t]||(o[t]=[])).push(&#123;fn:e,ctx:n&#125;),this&#125;,once:function(t,e,n)&#123;var o=this;function r()&#123;o.off(t,r),e.apply(n,arguments)&#125;return r._=e,this.on(t,r,n)&#125;,emit:function(t)&#123;for(var e=[].slice.call(arguments,1),n=((this.e||(this.e=&#123;&#125;))[t]||[]).slice(),o=0,r=n.length;o&lt;r;o++)n[o].fn.apply(n[o].ctx,e);return this&#125;,off:function(t,e)&#123;var n=this.e||(this.e=&#123;&#125;),o=n[t],r=[];if(o&amp;&amp;e)for(var i=0,a=o.length;i&lt;a;i++)o[i].fn!==e&amp;&amp;o[i].fn._!==e&amp;&amp;r.push(o[i]);return r.length?n[t]=r:delete n[t],this&#125;&#125;,t.exports=n&#125;,function(t,e,n)&#123;var d=n(5),h=n(6);t.exports=function(t,e,n)&#123;if(!t&amp;&amp;!e&amp;&amp;!n)throw new Error(&quot;Missing required arguments&quot;);if(!d.string(e))throw new TypeError(&quot;Second argument must be a String&quot;);if(!d.fn(n))throw new TypeError(&quot;Third argument must be a Function&quot;);if(d.node(t))return s=e,f=n,(l=t).addEventListener(s,f),&#123;destroy:function()&#123;l.removeEventListener(s,f)&#125;&#125;;if(d.nodeList(t))return a=t,c=e,u=n,Array.prototype.forEach.call(a,function(t)&#123;t.addEventListener(c,u)&#125;),&#123;destroy:function()&#123;Array.prototype.forEach.call(a,function(t)&#123;t.removeEventListener(c,u)&#125;)&#125;&#125;;if(d.string(t))return o=t,r=e,i=n,h(document.body,o,r,i);throw new TypeError(&quot;First argument must be a String, HTMLElement, HTMLCollection, or NodeList&quot;);var o,r,i,a,c,u,l,s,f&#125;&#125;,function(t,n)&#123;n.node=function(t)&#123;return void 0!==t&amp;&amp;t instanceof HTMLElement&amp;&amp;1===t.nodeType&#125;,n.nodeList=function(t)&#123;var e=Object.prototype.toString.call(t);return void 0!==t&amp;&amp;(&quot;[object NodeList]&quot;===e||&quot;[object HTMLCollection]&quot;===e)&amp;&amp;&quot;length&quot;in t&amp;&amp;(0===t.length||n.node(t[0]))&#125;,n.string=function(t)&#123;return&quot;string&quot;==typeof t||t instanceof String&#125;,n.fn=function(t)&#123;return&quot;[object Function]&quot;===Object.prototype.toString.call(t)&#125;&#125;,function(t,e,n)&#123;var a=n(7);function i(t,e,n,o,r)&#123;var i=function(e,n,t,o)&#123;return function(t)&#123;t.delegateTarget=a(t.target,n),t.delegateTarget&amp;&amp;o.call(e,t)&#125;&#125;.apply(this,arguments);return t.addEventListener(n,i,r),&#123;destroy:function()&#123;t.removeEventListener(n,i,r)&#125;&#125;&#125;t.exports=function(t,e,n,o,r)&#123;return&quot;function&quot;==typeof t.addEventListener?i.apply(null,arguments):&quot;function&quot;==typeof n?i.bind(null,document).apply(null,arguments):(&quot;string&quot;==typeof t&amp;&amp;(t=document.querySelectorAll(t)),Array.prototype.map.call(t,function(t)&#123;return i(t,e,n,o,r)&#125;))&#125;&#125;,function(t,e)&#123;if(&quot;undefined&quot;!=typeof Element&amp;&amp;!Element.prototype.matches)&#123;var n=Element.prototype;n.matches=n.matchesSelector||n.mozMatchesSelector||n.msMatchesSelector||n.oMatchesSelector||n.webkitMatchesSelector&#125;t.exports=function(t,e)&#123;for(;t&amp;&amp;9!==t.nodeType;)&#123;if(&quot;function&quot;==typeof t.matches&amp;&amp;t.matches(e))return t;t=t.parentNode&#125;&#125;&#125;])&#125;);</span><br></pre></td></tr></table></figure>

<p>在<code>blog/theme/next/source/js/src</code>目录创建名为<code>clipboard-use.js</code>的文件</p>
<p><strong>写入：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">!function (e, t, a) &#123; </span><br><span class="line">  /* code */</span><br><span class="line">  var initCopyCode = function()&#123;</span><br><span class="line">    var copyHtml = &apos;&apos;;</span><br><span class="line">    copyHtml += &apos;&lt;button class=&quot;btn-copy&quot; data-clipboard-snippet=&quot;&quot;&gt;&apos;;</span><br><span class="line">    copyHtml += &apos;&lt;span&gt;复制&lt;/span&gt;&apos;;</span><br><span class="line">    copyHtml += &apos;&lt;/button&gt;&apos;;</span><br><span class="line">    $(&quot;.highlight .code pre&quot;).before(copyHtml);</span><br><span class="line">    new ClipboardJS(&apos;.btn-copy&apos;, &#123;</span><br><span class="line">        target: function(trigger) &#123;</span><br><span class="line">            return trigger.nextElementSibling;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  initCopyCode();</span><br><span class="line">&#125;(window, document);</span><br></pre></td></tr></table></figure>

<p><strong>添加样式：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//代码块复制按钮</span><br><span class="line">.highlight&#123;</span><br><span class="line">  //方便copy代码按钮（btn-copy）的定位</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.btn-copy &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    background-color: #eee;</span><br><span class="line">    background-image: linear-gradient(#fcfcfc,#eee);</span><br><span class="line">    border: 1px solid #d5d5d5;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">    font-size: 13px;</span><br><span class="line">    font-weight: 700;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">    color: #333;</span><br><span class="line">    -webkit-transition: opacity .3s ease-in-out;</span><br><span class="line">    -o-transition: opacity .3s ease-in-out;</span><br><span class="line">    transition: opacity .3s ease-in-out;</span><br><span class="line">    padding: 2px 6px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 5px;</span><br><span class="line">    top: 5px;</span><br><span class="line">    opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">.btn-copy span &#123;</span><br><span class="line">    margin-left: 5px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight:hover .btn-copy&#123;</span><br><span class="line">  opacity: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开<code>blog/themes/next/layout/_layout.swig</code>文件</p>
<p><strong>在最下方，<code>/body</code>之前添加：</strong></p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 代码块复制功能 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clipboard.min.js&quot;&gt;&lt;/script&gt;  </span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clipboard-use.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></code></pre><hr>
<h1 id="往侧栏添加颗粒时钟"><a href="#往侧栏添加颗粒时钟" class="headerlink" title="往侧栏添加颗粒时钟"></a>往侧栏添加颗粒时钟</h1><p>往<code>themes/next/layout/_custom</code>创建名为<code>clock.swig</code>的文件</p>
<p><strong>往文件写入：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div style=&quot;&quot;&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; style=&quot;width:60%;&quot;&gt;当前浏览器不支持canvas，请更换浏览器后再试&lt;/canvas&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">(function()&#123;</span><br><span class="line"></span><br><span class="line">   var digit=</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,1,1,0,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,0,1,1,0],</span><br><span class="line">            [0,0,1,1,1,0,0]</span><br><span class="line">        ],//0</span><br><span class="line">        [</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,1,1,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [1,1,1,1,1,1,1]</span><br><span class="line">        ],//1</span><br><span class="line">        [</span><br><span class="line">            [0,1,1,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,1,1,0,0,0,0],</span><br><span class="line">            [1,1,0,0,0,0,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,1,1,1,1,1]</span><br><span class="line">        ],//2</span><br><span class="line">        [</span><br><span class="line">            [1,1,1,1,1,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0]</span><br><span class="line">        ],//3</span><br><span class="line">        [</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,1,0],</span><br><span class="line">            [0,0,1,1,1,1,0],</span><br><span class="line">            [0,1,1,0,1,1,0],</span><br><span class="line">            [1,1,0,0,1,1,0],</span><br><span class="line">            [1,1,1,1,1,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,1,1]</span><br><span class="line">        ],//4</span><br><span class="line">        [</span><br><span class="line">            [1,1,1,1,1,1,1],</span><br><span class="line">            [1,1,0,0,0,0,0],</span><br><span class="line">            [1,1,0,0,0,0,0],</span><br><span class="line">            [1,1,1,1,1,1,0],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0]</span><br><span class="line">        ],//5</span><br><span class="line">        [</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,1,1,0,0,0,0],</span><br><span class="line">            [1,1,0,0,0,0,0],</span><br><span class="line">            [1,1,0,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0]</span><br><span class="line">        ],//6</span><br><span class="line">        [</span><br><span class="line">            [1,1,1,1,1,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0],</span><br><span class="line">            [0,0,1,1,0,0,0]</span><br><span class="line">        ],//7</span><br><span class="line">        [</span><br><span class="line">            [0,1,1,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,1,1,0]</span><br><span class="line">        ],//8</span><br><span class="line">        [</span><br><span class="line">            [0,1,1,1,1,1,0],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [1,1,0,0,0,1,1],</span><br><span class="line">            [0,1,1,1,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,0,1,1],</span><br><span class="line">            [0,0,0,0,1,1,0],</span><br><span class="line">            [0,0,0,1,1,0,0],</span><br><span class="line">            [0,1,1,0,0,0,0]</span><br><span class="line">        ],//9</span><br><span class="line">        [</span><br><span class="line">            [0,0,0,0,0,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,0,0,0,0,0],</span><br><span class="line">            [0,0,0,0,0,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,1,1,1,0,0],</span><br><span class="line">            [0,0,0,0,0,0,0]</span><br><span class="line">        ]//:</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">var canvas = document.getElementById(&apos;canvas&apos;);</span><br><span class="line"></span><br><span class="line">if(canvas.getContext)&#123;</span><br><span class="line">    var cxt = canvas.getContext(&apos;2d&apos;);</span><br><span class="line">    //声明canvas的宽高</span><br><span class="line">    var H = 100,W = 700;</span><br><span class="line">    canvas.height = H;</span><br><span class="line">    canvas.width = W;</span><br><span class="line">    cxt.fillStyle = &apos;#f00&apos;;</span><br><span class="line">    cxt.fillRect(10,10,50,50);</span><br><span class="line"></span><br><span class="line">    //存储时间数据</span><br><span class="line">    var data = [];</span><br><span class="line">    //存储运动的小球</span><br><span class="line">    var balls = [];</span><br><span class="line">    //设置粒子半径</span><br><span class="line">    var R = canvas.height/20-1;</span><br><span class="line">    (function()&#123;</span><br><span class="line">        var temp = /(\d)(\d):(\d)(\d):(\d)(\d)/.exec(new Date());</span><br><span class="line">        //存储时间数字，由十位小时、个位小时、冒号、十位分钟、个位分钟、冒号、十位秒钟、个位秒钟这7个数字组成</span><br><span class="line">        data.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    /*生成点阵数字*/</span><br><span class="line">    function renderDigit(index,num)&#123;</span><br><span class="line">        for(var i = 0; i &lt; digit[num].length; i++)&#123;</span><br><span class="line">            for(var j = 0; j &lt; digit[num][i].length; j++)&#123;</span><br><span class="line">                if(digit[num][i][j] == 1)&#123;</span><br><span class="line">                    cxt.beginPath();</span><br><span class="line">                    cxt.arc(14*(R+2)*index + j*2*(R+1)+(R+1),i*2*(R+1)+(R+1),R,0,2*Math.PI);</span><br><span class="line">                    cxt.closePath();</span><br><span class="line">                    cxt.fill();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*更新时钟*/</span><br><span class="line">    function updateDigitTime()&#123;</span><br><span class="line">        var changeNumArray = [];</span><br><span class="line">        var temp = /(\d)(\d):(\d)(\d):(\d)(\d)/.exec(new Date());</span><br><span class="line">        var NewData = [];</span><br><span class="line">        NewData.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);</span><br><span class="line">        for(var i = data.length-1; i &gt;=0 ; i--)&#123;</span><br><span class="line">            //时间发生变化</span><br><span class="line">            if(NewData[i] !== data[i])&#123;</span><br><span class="line">                //将变化的数字值和在data数组中的索引存储在changeNumArray数组中</span><br><span class="line">                changeNumArray.push(i+&apos;_&apos;+(Number(data[i])+1)%10);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //增加小球</span><br><span class="line">        for(var i = 0; i&lt; changeNumArray.length; i++)&#123;</span><br><span class="line">            addBalls.apply(this,changeNumArray[i].split(&apos;_&apos;));</span><br><span class="line">        &#125;</span><br><span class="line">        data = NewData.concat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*更新小球状态*/</span><br><span class="line">    function updateBalls()&#123;</span><br><span class="line">        for(var i = 0; i &lt; balls.length; i++)&#123;</span><br><span class="line">            balls[i].stepY += balls[i].disY;</span><br><span class="line">            balls[i].x += balls[i].stepX;</span><br><span class="line">            balls[i].y += balls[i].stepY;</span><br><span class="line">            if(balls[i].x &gt; W + R || balls[i].y &gt; H + R)&#123;</span><br><span class="line">                balls.splice(i,1);</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*增加要运动的小球*/</span><br><span class="line">    function addBalls(index,num)&#123;</span><br><span class="line">        var numArray = [1,2,3];</span><br><span class="line">        var colorArray =  [&quot;#3BE&quot;,&quot;#09C&quot;,&quot;#A6C&quot;,&quot;#93C&quot;,&quot;#9C0&quot;,&quot;#690&quot;,&quot;#FB3&quot;,&quot;#F80&quot;,&quot;#F44&quot;,&quot;#C00&quot;];</span><br><span class="line">        for(var i = 0; i &lt; digit[num].length; i++)&#123;</span><br><span class="line">            for(var j = 0; j &lt; digit[num][i].length; j++)&#123;</span><br><span class="line">                if(digit[num][i][j] == 1)&#123;</span><br><span class="line">                    var ball = &#123;</span><br><span class="line">                        x:14*(R+2)*index + j*2*(R+1)+(R+1),</span><br><span class="line">                        y:i*2*(R+1)+(R+1),</span><br><span class="line">                        stepX:Math.floor(Math.random() * 4 -2),</span><br><span class="line">                        stepY:-2*numArray[Math.floor(Math.random()*numArray.length)],</span><br><span class="line">                        color:colorArray[Math.floor(Math.random()*colorArray.length)],</span><br><span class="line">                        disY:1</span><br><span class="line">                    &#125;;</span><br><span class="line">                    balls.push(ball);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*渲染*/</span><br><span class="line">    function render()&#123;</span><br><span class="line">        //重置画布宽度，达到清空画布的效果</span><br><span class="line">        canvas.height = 100;</span><br><span class="line">        //渲染时钟</span><br><span class="line">        for(var i = 0; i &lt; data.length; i++)&#123;</span><br><span class="line">            renderDigit(i,data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        //渲染小球</span><br><span class="line">        for(var i = 0; i &lt; balls.length; i++)&#123;</span><br><span class="line">            cxt.beginPath();</span><br><span class="line">            cxt.arc(balls[i].x,balls[i].y,R,0,2*Math.PI);</span><br><span class="line">            cxt.fillStyle = balls[i].color;</span><br><span class="line">            cxt.closePath();</span><br><span class="line">            cxt.fill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clearInterval(oTimer);</span><br><span class="line">    var oTimer = setInterval(function()&#123;</span><br><span class="line">        //更新时钟</span><br><span class="line">        updateDigitTime();</span><br><span class="line">        //更新小球状态</span><br><span class="line">        updateBalls();</span><br><span class="line">        //渲染</span><br><span class="line">        render();</span><br><span class="line">    &#125;,50);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>打开<code>themes/next/layout/_custom/sidebar.swig</code></p>
<p><strong>找个位置加入：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;lock&quot;&gt;</span><br><span class="line">&#123;% include &apos;../_custom/clock.swig&apos; %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="归档美化"><a href="#归档美化" class="headerlink" title="归档美化"></a>归档美化</h1><p>打开<code>/themes/next/layout/_macro/post-collapse.swig</code>文件,将<code>post-meta</code>这个div<br>移到前面<code>header</code>标签下</p>
<p>在<code>/themes/next/source/css/_custom/custom.styl</code>新增如下样式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 归档页样式 began */</span><br><span class="line">.page-archive .archive-page-counter &#123;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">  background-color: #49b1f5;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">  padding-right: 10px;</span><br><span class="line">  border-radius: 8px;</span><br><span class="line">  color: #fff;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.post-time&#123;</span><br><span class="line">  font-size: 11px;</span><br><span class="line">  position: absolute;</span><br><span class="line">  color: #fff;</span><br><span class="line">  background-color: #49b1f5;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  padding-left: 5px;</span><br><span class="line">  padding-right: 10px;</span><br><span class="line">  margin-left: 15px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  margin-bottom: 1rem;</span><br><span class="line">  -webkit-transition: all .2s ease-in-out;</span><br><span class="line">  -moz-transition: all .2s ease-in-out;</span><br><span class="line">  -o-transition: all .2s ease-in-out;</span><br><span class="line">  -ms-transition: all .2s ease-in-out;</span><br><span class="line">  transition: all .2s ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line">a.post-title-link:before&#123;</span><br><span class="line">  top: 10px;</span><br><span class="line">  width: 18px;</span><br><span class="line">  height: 18px;</span><br><span class="line">  content: &quot;*&quot;;</span><br><span class="line">  margin-right: 5px;</span><br><span class="line">  font: normal normal normal 14px/1 FontAwesome;</span><br><span class="line">  font-size: 15px;</span><br><span class="line">  line-height: 18px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post:hover&#123;</span><br><span class="line"> //transform: scale(1.1);</span><br><span class="line"> box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1);</span><br><span class="line"> border-radius: 30px;</span><br><span class="line"> //width: 90%; // 用鼠标指针选中文章页面时，会产生动态页面</span><br><span class="line"> padding: 1px 10px;</span><br><span class="line"> margin-left: 25px;</span><br><span class="line"> font-size: 16px;</span><br><span class="line"> transition-duration: 0.15s;</span><br><span class="line"> +mobile()&#123;</span><br><span class="line">   //width: 260px;</span><br><span class="line">   margin-left: 18px;</span><br><span class="line"> &#125;</span><br><span class="line">  display:false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.post-title-link&#123;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  font-size: 15px;</span><br><span class="line">  font-weight: 400;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-title&#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin-left: 4.5rem;</span><br><span class="line">  color: #4c4948;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  font-size: .8rem;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    margin-left: 4rem;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-header&#123;</span><br><span class="line">  position: top;</span><br><span class="line">  margin-bottom: 1rem;</span><br><span class="line">  -webkit-transition: all .2s ease-in-out;</span><br><span class="line">  -moz-transition: all .2s ease-in-out;</span><br><span class="line">  -o-transition: all .2s ease-in-out;</span><br><span class="line">  -ms-transition: all .2s ease-in-out;</span><br><span class="line">  transition: all .2s ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> .post-title-link&#123;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  font-weight: 100;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">// .post-meta&#123;</span><br><span class="line">//  position: absolute;</span><br><span class="line">//  color: #99a9bf;</span><br><span class="line">//  width: 80px;</span><br><span class="line">//  color: #114142;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">div.post-block.tag .collection-title h2 &#123;</span><br><span class="line">  border-width: 1px;</span><br><span class="line">  border-style: solid;</span><br><span class="line">  border-color: #3f3f3f;</span><br><span class="line">  border-radius: 20px;</span><br><span class="line">  font-size: 22px;</span><br><span class="line">  background-color: #b4e8fa;</span><br><span class="line">  padding: 2px 15px;</span><br><span class="line">  letter-spacing: 1.5px;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  color: #3f3f3f;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin: 10px 0 10px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  +mobile()&#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.category-list-link:hover&#123;</span><br><span class="line">  transform: scale(1.1);</span><br><span class="line">  box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1);</span><br><span class="line">  border-radius: 8px;</span><br><span class="line">  padding: 1px 1px;</span><br><span class="line">  margin-left: 5px;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  transition-duration: 0.15s;</span><br><span class="line">  //display:flex;</span><br><span class="line">&#125;</span><br><span class="line">/* 归档页样式 end */</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="标签页美化"><a href="#标签页美化" class="headerlink" title="标签页美化"></a>标签页美化</h1><p>在<code>/themes/next/layout/</code>目录下，新增tag-color.swig文件，填入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">     var alltags = document.getElementsByClassName(&apos;tag-cloud-tags&apos;);</span><br><span class="line">     var tags = alltags[0].getElementsByTagName(&apos;a&apos;);</span><br><span class="line">     for (var i = tags.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">       var r=Math.floor(Math.random()*75+130);</span><br><span class="line">       var g=Math.floor(Math.random()*75+100);</span><br><span class="line">       var b=Math.floor(Math.random()*75+80);</span><br><span class="line">       tags[i].style.background = &quot;rgb(&quot;+r+&quot;,&quot;+g+&quot;,&quot;+b+&quot;)&quot;;</span><br><span class="line">     &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .tag-cloud-tags&#123;</span><br><span class="line">    /*font-family: Helvetica, Tahoma, Arial;*/</span><br><span class="line">    /*font-weight: 100;*/</span><br><span class="line">    text-align: center;</span><br><span class="line">    counter-reset: tags;</span><br><span class="line">  &#125;</span><br><span class="line">  .tag-cloud-tags a&#123;</span><br><span class="line">    border-radius: 6px;</span><br><span class="line">    padding-right: 5px;</span><br><span class="line">    padding-left: 5px;</span><br><span class="line">    margin: 8px 5px 0px 0px;</span><br><span class="line">  &#125;</span><br><span class="line">  .tag-cloud-tags a:before&#123;</span><br><span class="line">    content: &quot;🔖&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .tag-cloud-tags a:hover&#123;</span><br><span class="line">     box-shadow: 0px 5px 15px 0px rgba(0,0,0,.4);</span><br><span class="line">     transform: scale(1.1);</span><br><span class="line">     /*box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1);*/</span><br><span class="line">     transition-duration: 0.15s;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>在同级目录的<code>page.swig</code>文件，搜索:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% elif page.type === &apos;categories&apos; %&#125;</span><br></pre></td></tr></table></figure>

<p>在上面添加:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include &apos;tag-color.swig&apos; %&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="添加文章链接"><a href="#添加文章链接" class="headerlink" title="添加文章链接"></a>添加文章链接</h1><a href="/2019/10/08/linux笔记/" title="点击链接前往文章">点击链接前往文章</a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% post_link linux笔记 &apos;点击链接前往文章&apos; %&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="由于3个-不能往选项卡里添加代码块，这里使用其他格式的代码块"><a href="#由于3个-不能往选项卡里添加代码块，这里使用其他格式的代码块" class="headerlink" title="由于3个`不能往选项卡里添加代码块，这里使用其他格式的代码块"></a>由于3个`不能往选项卡里添加代码块，这里使用其他格式的代码块</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">printf(&quot;hellow\n&quot;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock %&#125;</span><br><span class="line">printf(&quot;hellow\n&quot;);</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="note-便签"><a href="#note-便签" class="headerlink" title="note 便签"></a>note 便签</h1><div class="note default"><h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><p>是类型还有以下几种</p></div>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">#### default</span><br><span class="line">是类型还有以下几种</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">写法</th>
</tr>
</thead>
<tbody><tr>
<td align="left">primary</td>
</tr>
<tr>
<td align="left">success</td>
</tr>
<tr>
<td align="left">info</td>
</tr>
<tr>
<td align="left">warning</td>
</tr>
<tr>
<td align="left">danger</td>
</tr>
<tr>
<td align="left">danger no-icon</td>
</tr>
<tr>
<td align="left">不写的话也会有效果</td>
</tr>
</tbody></table>
<hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><ul>
<li>:— 代表左对齐</li>
<li>:–: 代表居中对齐</li>
<li>—: 代表右对齐</li>
</ul>
<table>
<thead>
<tr>
<th align="left">left</th>
<th align="center">center</th>
<th align="right">right</th>
</tr>
</thead>
<tbody><tr>
<td align="left">aaaa</td>
<td align="center">bbbbbb</td>
<td align="right">ccccc</td>
</tr>
<tr>
<td align="left">a</td>
<td align="center">b</td>
<td align="right">c</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| left | center | right |</span><br><span class="line">| :--- | :----: | ----: |</span><br><span class="line">| aaaa | bbbbbb | ccccc |</span><br><span class="line">| a    | b      | c     |</span><br></pre></td></tr></table></figure>

<p><strong>简化表格</strong></p>
<table>
<thead>
<tr>
<th>aaa</th>
<th>bbb</th>
</tr>
</thead>
<tbody><tr>
<td>ccc</td>
<td>ddd</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaa|bbb</span><br><span class="line">-|-</span><br><span class="line">ccc|ddd</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hellow word"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="1.png" alt></p>
<p>c++语言高亮:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock lang:cxx %&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客的搭建与使用</title>
    <url>/2019/09/27/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<img src="/2019/09/27/hexo博客的搭建与使用/封面.jpg">

<p>将<code>hexo</code>博客搭建到<code>github</code></p>
<a id="more"></a> 

<h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><p>(以windows平台进行搭建)</p>
<ul>
<li><p>安装<strong>Git</strong><br>  <a href="https://git-scm.com/" target="_blank" rel="noopener"><font color="green"><strong>git官网</strong></font></a></p>
</li>
<li><p>安装<strong>node.js</strong><br>  <a href="https://nodejs.org/en/" target="_blank" rel="noopener"><font color="green"><strong>node.js官网</strong></font></a></p>
</li>
</ul>
<p>在桌面空白位置，右键选择<strong>git bash here</strong>打开git终端</p>
<img src="/2019/09/27/hexo博客的搭建与使用/打开git终端.png">

<ul>
<li>查看node.js版本：<blockquote>
<p>node -v</p>
</blockquote>
</li>
</ul>
<p>因为用npm下载太慢，所有要用cnpm</p>
<ul>
<li><p>安装cnpm</p>
<blockquote>
<p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p>
</blockquote>
</li>
<li><p>查看cnpm版本：</p>
<blockquote>
<p>cnpm -v</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li><p>安装hexo</p>
<blockquote>
<p>cnpm install -g hexo-cli</p>
</blockquote>
</li>
<li><p>查看hexo版本：</p>
<blockquote>
<p>hexo -v</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="生成hexo博客的文件"><a href="#生成hexo博客的文件" class="headerlink" title="生成hexo博客的文件"></a>生成hexo博客的文件</h2><ul>
<li>在任意位置，创建一个名为<font color="red">blog</font>的目录，并且用git终端进入到这个目录</li>
</ul>
<p><strong>使用git终端查看当前目录</strong></p>
<blockquote>
<p>pwd</p>
</blockquote>
<p><strong>DOS命令</strong>：</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">dir</td>
<td align="left">查看该目录下所有文件和目录</td>
</tr>
<tr>
<td align="left">cd 目录名</td>
<td align="left">进入该目录</td>
</tr>
<tr>
<td align="left">cd ..</td>
<td align="left">返回上一层目录</td>
</tr>
</tbody></table>
<img src="/2019/09/27/hexo博客的搭建与使用/进入blog目录.png">

<ul>
<li>初始化一个博客<blockquote>
<p>hexo init</p>
</blockquote>
</li>
</ul>
<hr>
<h1 id="创建一篇文章"><a href="#创建一篇文章" class="headerlink" title="创建一篇文章"></a>创建一篇文章</h1><ul>
<li>创建文章:<blockquote>
<p>hexo n “文章名”</p>
</blockquote>
</li>
</ul>
<p><font color="red">.md</font>后缀的文件为你的文章，打开后开始编写你的文章</p>
<img src="/2019/09/27/hexo博客的搭建与使用/new文章.png">

<p><strong>文章保存在<font color="red">blog/source/_posts</font>目录下</strong></p>
<h3 id="删除文章："><a href="#删除文章：" class="headerlink" title="删除文章："></a>删除文章：</h3><blockquote>
<p>直接到目录下删除</p>
</blockquote>
<p><img src="%E5%88%A0%E9%99%A4%E6%96%87%E7%AB%A0.png" alt></p>
<hr>
<h1 id="启动博客（本地）"><a href="#启动博客（本地）" class="headerlink" title="启动博客（本地）"></a>启动博客（本地）</h1><ul>
<li>启动本地博客</li>
</ul>
<blockquote>
<p>hexo s<br>这个为本地博客： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p>
</blockquote>
<p><img src="%E5%90%AF%E5%8A%A8%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2.png" alt></p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ctrl+z</td>
<td align="left">进程挂起</td>
</tr>
<tr>
<td align="left">fg % n</td>
<td align="left">查看当前第n个挂起的进程</td>
</tr>
<tr>
<td align="left">jobs</td>
<td align="left">查看当前有多少进程在后台运行</td>
</tr>
<tr>
<td align="left">kill % n</td>
<td align="left">删除第n个进程</td>
</tr>
</tbody></table>
<hr>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">hexo s</td>
<td align="left">启动本地博客</td>
</tr>
<tr>
<td align="left">hexo clean</td>
<td align="left">删除本地博客生成的文件</td>
</tr>
<tr>
<td align="left">hexo g</td>
<td align="left">生成本地博客的文件</td>
</tr>
<tr>
<td align="left">hexo d</td>
<td align="left">部署博客</td>
</tr>
</tbody></table>
<hr>
<h1 id="将博客部署到github"><a href="#将博客部署到github" class="headerlink" title="将博客部署到github"></a>将博客部署到github</h1><p>github创建一个仓库，仓库名的格式为<font color="red">xxx.github.io</font></p>
<ul>
<li>安装部署插件<blockquote>
<p>cnpm install –save hexo-deployer-git</p>
</blockquote>
</li>
</ul>
<p>从<font color="red">blog</font>目录下打开<font color="red">_config.yml</font>文件</p>
<blockquote>
<p>deploy:<br>   type: git<br>   //以下两个需要自己输入<br>   repo: 你仓库的链接<br>   branch: master</p>
</blockquote>
<p><img src="%E9%83%A8%E7%BD%B2%E8%AE%BE%E7%BD%AE.png" alt></p>
<ul>
<li>开始部署<blockquote>
<p>hexo d</p>
</blockquote>
</li>
</ul>
<p>输入你的github账号就行了，<strong>你的仓库名就是你博客的链接</strong></p>
<ul>
<li>如果没有出现github账号的输入窗口<blockquote>
<p>hexo clean<br>hexo d</p>
</blockquote>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
</search>
